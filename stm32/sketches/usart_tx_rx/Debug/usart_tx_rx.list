
usart_tx_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800640c  0800640c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00004b48  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004bd0  20004bd0  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd82  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ce  00000000  00000000  0003be3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  0003f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  00040650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000390c  00000000  00000000  00041980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160cd  00000000  00000000  0004528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d57b4  00000000  00000000  0005b359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130b0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a8  00000000  00000000  00130b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062f0 	.word	0x080062f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080062f0 	.word	0x080062f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb14 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f83a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8e0 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f8be 	bl	8000658 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80004dc:	f000 f892 	bl	8000604 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 80004e0:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <main+0x58>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <main+0x5c>)
 80004e6:	f000 ff4d 	bl	8001384 <HAL_DMA_RegisterCallback>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 10);
 80004ea:	220a      	movs	r2, #10
 80004ec:	490e      	ldr	r1, [pc, #56]	; (8000528 <main+0x60>)
 80004ee:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x64>)
 80004f0:	f002 f9c1 	bl	8002876 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 f87e 	bl	80035f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <main+0x68>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x6c>)
 80004fe:	f003 f8c3 	bl	8003688 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x70>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of TransmitTask */
  TransmitTaskHandle = osThreadNew(transmit_task, NULL, &TransmitTask_attributes);
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x74>)
 800050a:	2100      	movs	r1, #0
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x78>)
 800050e:	f003 f8bb 	bl	8003688 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <main+0x7c>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f003 f890 	bl	800363c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x54>
 800051e:	bf00      	nop
 8000520:	08000721 	.word	0x08000721
 8000524:	20004ac0 	.word	0x20004ac0
 8000528:	20000000 	.word	0x20000000
 800052c:	20004a7c 	.word	0x20004a7c
 8000530:	0800633c 	.word	0x0800633c
 8000534:	0800078d 	.word	0x0800078d
 8000538:	20004a78 	.word	0x20004a78
 800053c:	08006360 	.word	0x08006360
 8000540:	0800079d 	.word	0x0800079d
 8000544:	20004b34 	.word	0x20004b34

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fdfc 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xb4>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xb4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <SystemClock_Config+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <SystemClock_Config+0xb8>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <SystemClock_Config+0xb8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f9e7 	bl	800198c <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005c4:	f000 f91c 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fc4a 	bl	8001e7c <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ee:	f000 f907 	bl	8000800 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_USART3_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART3_UART_Init+0x4c>)
 800063c:	f002 f8ce 	bl	80027dc <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f8db 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20004a7c 	.word	0x20004a7c
 8000654:	40004800 	.word	0x40004800

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_DMA_Init+0x3c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_DMA_Init+0x3c>)
 8000668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_DMA_Init+0x3c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2105      	movs	r1, #5
 800067e:	200e      	movs	r0, #14
 8000680:	f000 fb34 	bl	8000cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000684:	200e      	movs	r0, #14
 8000686:	f000 fb4d 	bl	8000d24 <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_GPIO_Init+0x80>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MX_GPIO_Init+0x80>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_GPIO_Init+0x80>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <MX_GPIO_Init+0x80>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_GPIO_Init+0x80>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_GPIO_Init+0x84>)
 80006ee:	f001 f919 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_GPIO_Init+0x84>)
 800070c:	f000 ff6e 	bl	80015ec <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40021000 	.word	0x40021000

08000720 <DMATransferComplete>:

/* USER CODE BEGIN 4 */
// Callback function for when USART DMA transmit is done
void DMATransferComplete(DMA_HandleTypeDef* hdma)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
		// Disable the DMA
		huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <DMATransferComplete+0x2c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <DMATransferComplete+0x2c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000736:	615a      	str	r2, [r3, #20]
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <DMATransferComplete+0x30>)
 800073e:	f001 f90a 	bl	8001956 <HAL_GPIO_TogglePin>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20004a7c 	.word	0x20004a7c
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
//	UNUSED(huart);
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
	memcpy(inst_buffer, rx_buffer, 10);
 800075c:	220a      	movs	r2, #10
 800075e:	4908      	ldr	r1, [pc, #32]	; (8000780 <HAL_UART_RxCpltCallback+0x2c>)
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <HAL_UART_RxCpltCallback+0x30>)
 8000762:	f005 fce9 	bl	8006138 <memcpy>
	inst_buffer[10] = '\n';
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <HAL_UART_RxCpltCallback+0x30>)
 8000768:	220a      	movs	r2, #10
 800076a:	729a      	strb	r2, [r3, #10]
	HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 10);
 800076c:	220a      	movs	r2, #10
 800076e:	4904      	ldr	r1, [pc, #16]	; (8000780 <HAL_UART_RxCpltCallback+0x2c>)
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <HAL_UART_RxCpltCallback+0x34>)
 8000772:	f002 f880 	bl	8002876 <HAL_UART_Receive_IT>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000
 8000784:	20004b20 	.word	0x20004b20
 8000788:	20004a7c 	.word	0x20004a7c

0800078c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f003 f809 	bl	80037ac <osDelay>
 800079a:	e7fb      	b.n	8000794 <StartDefaultTask+0x8>

0800079c <transmit_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_task */
void transmit_task(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_task */
  /* Infinite loop */
  for(;;)
  {
		// Enable the DMA to start a transfer process
		huart3.Instance->CR3 |= USART_CR3_DMAT;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <transmit_task+0x34>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	695a      	ldr	r2, [r3, #20]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <transmit_task+0x34>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007b2:	615a      	str	r2, [r3, #20]
//	  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, sizeof(msg));
		HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)inst_buffer,
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <transmit_task+0x38>)
				(uint32_t)&huart3.Instance->DR, sizeof(inst_buffer));
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <transmit_task+0x34>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3304      	adds	r3, #4
		HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)inst_buffer,
 80007bc:	461a      	mov	r2, r3
 80007be:	2314      	movs	r3, #20
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <transmit_task+0x3c>)
 80007c2:	f000 fb6b 	bl	8000e9c <HAL_DMA_Start_IT>
    osDelay(3000);
 80007c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ca:	f002 ffef 	bl	80037ac <osDelay>
		huart3.Instance->CR3 |= USART_CR3_DMAT;
 80007ce:	e7e9      	b.n	80007a4 <transmit_task+0x8>
 80007d0:	20004a7c 	.word	0x20004a7c
 80007d4:	20004b20 	.word	0x20004b20
 80007d8:	20004ac0 	.word	0x20004ac0

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f9a5 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40001000 	.word	0x40001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <HAL_MspInit+0x54>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_MspInit+0x54>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	210f      	movs	r1, #15
 800084e:	f06f 0001 	mvn.w	r0, #1
 8000852:	f000 fa4b 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a34      	ldr	r2, [pc, #208]	; (8000954 <HAL_UART_MspInit+0xf0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d162      	bne.n	800094c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_UART_MspInit+0xf4>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_UART_MspInit+0xf4>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <HAL_UART_MspInit+0xf4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d0:	2307      	movs	r3, #7
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4820      	ldr	r0, [pc, #128]	; (800095c <HAL_UART_MspInit+0xf8>)
 80008dc:	f000 fe86 	bl	80015ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_UART_MspInit+0xfc>)
 80008e2:	4a20      	ldr	r2, [pc, #128]	; (8000964 <HAL_UART_MspInit+0x100>)
 80008e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_UART_MspInit+0xfc>)
 80008e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_UART_MspInit+0xfc>)
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_UART_MspInit+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_UART_MspInit+0xfc>)
 80008fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000900:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0xfc>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_UART_MspInit+0xfc>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000920:	480f      	ldr	r0, [pc, #60]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000922:	f000 fa0d 	bl	8000d40 <HAL_DMA_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800092c:	f7ff ff68 	bl	8000800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_UART_MspInit+0xfc>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2105      	movs	r1, #5
 8000940:	2027      	movs	r0, #39	; 0x27
 8000942:	f000 f9d3 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000946:	2027      	movs	r0, #39	; 0x27
 8000948:	f000 f9ec 	bl	8000d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004800 	.word	0x40004800
 8000958:	40023800 	.word	0x40023800
 800095c:	40020800 	.word	0x40020800
 8000960:	20004ac0 	.word	0x20004ac0
 8000964:	40026058 	.word	0x40026058

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2036      	movs	r0, #54	; 0x36
 800097e:	f000 f9b5 	bl	8000cec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000982:	2036      	movs	r0, #54	; 0x36
 8000984:	f000 f9ce 	bl	8000d24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_InitTick+0xa0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_InitTick+0xa0>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6413      	str	r3, [r2, #64]	; 0x40
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_InitTick+0xa0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a4:	f107 0210 	add.w	r2, r7, #16
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4611      	mov	r1, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fc34 	bl	800221c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b4:	f001 fc0a 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 80009b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <HAL_InitTick+0xa4>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	3b01      	subs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_InitTick+0xa8>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <HAL_InitTick+0xac>)
 80009cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_InitTick+0xa8>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_InitTick+0xa8>)
 80009d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_InitTick+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_InitTick+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <HAL_InitTick+0xa8>)
 80009ea:	f001 fc49 	bl	8002280 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <HAL_InitTick+0xa8>)
 80009f6:	f001 fc9d 	bl	8002334 <HAL_TIM_Base_Start_IT>
 80009fa:	4603      	mov	r3, r0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	20004b38 	.word	0x20004b38
 8000a14:	40001000 	.word	0x40001000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA1_Stream3_IRQHandler+0x10>)
 8000a4a:	f000 fb11 	bl	8001070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20004ac0 	.word	0x20004ac0

08000a58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <USART3_IRQHandler+0x10>)
 8000a5e:	f001 ff3b 	bl	80028d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20004a7c 	.word	0x20004a7c

08000a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <TIM6_DAC_IRQHandler+0x10>)
 8000a72:	f001 fccf 	bl	8002414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20004b38 	.word	0x20004b38

08000a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aaa:	490e      	ldr	r1, [pc, #56]	; (8000ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac0:	4c0b      	ldr	r4, [pc, #44]	; (8000af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ace:	f7ff ffd7 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f005 fb0b 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ad6:	f7ff fcf7 	bl	80004c8 <main>
  bx  lr    
 8000ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ae8:	08006414 	.word	0x08006414
  ldr r2, =_sbss
 8000aec:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000af0:	20004bd0 	.word	0x20004bd0

08000af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <HAL_Init+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_Init+0x40>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x40>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8d8 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff ff1e 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe6e 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023c00 	.word	0x40023c00

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000001c 	.word	0x2000001c
 8000b60:	20004b80 	.word	0x20004b80

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20004b80 	.word	0x20004b80

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfe:	f7ff ff61 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	68b9      	ldr	r1, [r7, #8]
 8000d08:	6978      	ldr	r0, [r7, #20]
 8000d0a:	f7ff ffb1 	bl	8000c70 <NVIC_EncodePriority>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff80 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff54 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ff0a 	bl	8000b64 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d101      	bne.n	8000d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e099      	b.n	8000e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2202      	movs	r2, #2
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7c:	e00f      	b.n	8000d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d7e:	f7ff fef1 	bl	8000b64 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	d908      	bls.n	8000d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2220      	movs	r2, #32
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2203      	movs	r2, #3
 8000d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e078      	b.n	8000e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1e8      	bne.n	8000d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <HAL_DMA_Init+0x158>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d107      	bne.n	8000e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4313      	orrs	r3, r2
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f023 0307 	bic.w	r3, r3, #7
 8000e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d117      	bne.n	8000e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00e      	beq.n	8000e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fb55 	bl	80014f4 <DMA_CheckFifoParam>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2240      	movs	r2, #64	; 0x40
 8000e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e016      	b.n	8000e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fb0c 	bl	8001488 <DMA_CalcBaseAndBitshift>
 8000e70:	4603      	mov	r3, r0
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e78:	223f      	movs	r2, #63	; 0x3f
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	f010803f 	.word	0xf010803f

08000e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_DMA_Start_IT+0x26>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e040      	b.n	8000f44 <HAL_DMA_Start_IT+0xa8>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d12f      	bne.n	8000f36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2202      	movs	r2, #2
 8000eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 fa9e 	bl	800142c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef4:	223f      	movs	r2, #63	; 0x3f
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0216 	orr.w	r2, r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0208 	orr.w	r2, r2, #8
 8000f22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e005      	b.n	8000f42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f5a:	f7ff fe03 	bl	8000b64 <HAL_GetTick>
 8000f5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d008      	beq.n	8000f7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e052      	b.n	8001024 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0216 	bic.w	r2, r2, #22
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d103      	bne.n	8000fae <HAL_DMA_Abort+0x62>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0208 	bic.w	r2, r2, #8
 8000fbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0201 	bic.w	r2, r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fce:	e013      	b.n	8000ff8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fd0:	f7ff fdc8 	bl	8000b64 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d90c      	bls.n	8000ff8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e015      	b.n	8001024 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1e4      	bne.n	8000fd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100a:	223f      	movs	r2, #63	; 0x3f
 800100c:	409a      	lsls	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d004      	beq.n	800104a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00c      	b.n	8001064 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2205      	movs	r2, #5
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800107c:	4b92      	ldr	r3, [pc, #584]	; (80012c8 <HAL_DMA_IRQHandler+0x258>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a92      	ldr	r2, [pc, #584]	; (80012cc <HAL_DMA_IRQHandler+0x25c>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0a9b      	lsrs	r3, r3, #10
 8001088:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109a:	2208      	movs	r2, #8
 800109c:	409a      	lsls	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d01a      	beq.n	80010dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0204 	bic.w	r2, r2, #4
 80010c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	2208      	movs	r2, #8
 80010ca:	409a      	lsls	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e0:	2201      	movs	r2, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d012      	beq.n	8001112 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	2201      	movs	r2, #1
 8001100:	409a      	lsls	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110a:	f043 0202 	orr.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001116:	2204      	movs	r2, #4
 8001118:	409a      	lsls	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	2204      	movs	r2, #4
 8001136:	409a      	lsls	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	f043 0204 	orr.w	r2, r3, #4
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2210      	movs	r2, #16
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d043      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03c      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116a:	2210      	movs	r2, #16
 800116c:	409a      	lsls	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d018      	beq.n	80011b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d108      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d024      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
 800119e:	e01f      	b.n	80011e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01b      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	4798      	blx	r3
 80011b0:	e016      	b.n	80011e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0208 	bic.w	r2, r2, #8
 80011ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e4:	2220      	movs	r2, #32
 80011e6:	409a      	lsls	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 808e 	beq.w	800130e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8086 	beq.w	800130e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001206:	2220      	movs	r2, #32
 8001208:	409a      	lsls	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b05      	cmp	r3, #5
 8001218:	d136      	bne.n	8001288 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0216 	bic.w	r2, r2, #22
 8001228:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001238:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <HAL_DMA_IRQHandler+0x1da>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0208 	bic.w	r2, r2, #8
 8001258:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125e:	223f      	movs	r2, #63	; 0x3f
 8001260:	409a      	lsls	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127a:	2b00      	cmp	r3, #0
 800127c:	d07d      	beq.n	800137a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
        }
        return;
 8001286:	e078      	b.n	800137a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d01c      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d030      	beq.n	800130e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4798      	blx	r3
 80012b4:	e02b      	b.n	800130e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d027      	beq.n	800130e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
 80012c6:	e022      	b.n	800130e <HAL_DMA_IRQHandler+0x29e>
 80012c8:	20000014 	.word	0x20000014
 80012cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10f      	bne.n	80012fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0210 	bic.w	r2, r2, #16
 80012ec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001312:	2b00      	cmp	r3, #0
 8001314:	d032      	beq.n	800137c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d022      	beq.n	8001368 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3301      	adds	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	429a      	cmp	r2, r3
 8001344:	d307      	bcc.n	8001356 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f2      	bne.n	800133a <HAL_DMA_IRQHandler+0x2ca>
 8001354:	e000      	b.n	8001358 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001356:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
 8001378:	e000      	b.n	800137c <HAL_DMA_IRQHandler+0x30c>
        return;
 800137a:	bf00      	nop
    }
  }
}
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop

08001384 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	460b      	mov	r3, r1
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_DMA_RegisterCallback+0x20>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e03c      	b.n	800141e <HAL_DMA_RegisterCallback+0x9a>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d129      	bne.n	800140c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d829      	bhi.n	8001412 <HAL_DMA_RegisterCallback+0x8e>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <HAL_DMA_RegisterCallback+0x40>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	080013e5 	.word	0x080013e5
 80013cc:	080013ed 	.word	0x080013ed
 80013d0:	080013f5 	.word	0x080013f5
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	08001405 	.word	0x08001405
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80013e2:	e017      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80013ea:	e013      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80013f2:	e00f      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80013fa:	e00b      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8001402:	e007      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800140a:	e003      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	75fb      	strb	r3, [r7, #23]
 8001410:	e000      	b.n	8001414 <HAL_DMA_RegisterCallback+0x90>
      break;
 8001412:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001448:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b40      	cmp	r3, #64	; 0x40
 8001458:	d108      	bne.n	800146c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800146a:	e007      	b.n	800147c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	60da      	str	r2, [r3, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	3b10      	subs	r3, #16
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <DMA_CalcBaseAndBitshift+0x64>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <DMA_CalcBaseAndBitshift+0x68>)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d909      	bls.n	80014ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	659a      	str	r2, [r3, #88]	; 0x58
 80014c8:	e007      	b.n	80014da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	aaaaaaab 	.word	0xaaaaaaab
 80014f0:	0800639c 	.word	0x0800639c

080014f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d11f      	bne.n	800154e <DMA_CheckFifoParam+0x5a>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d856      	bhi.n	80015c2 <DMA_CheckFifoParam+0xce>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <DMA_CheckFifoParam+0x28>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	0800153f 	.word	0x0800153f
 8001524:	0800152d 	.word	0x0800152d
 8001528:	080015c3 	.word	0x080015c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d046      	beq.n	80015c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800153c:	e043      	b.n	80015c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001546:	d140      	bne.n	80015ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800154c:	e03d      	b.n	80015ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001556:	d121      	bne.n	800159c <DMA_CheckFifoParam+0xa8>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d837      	bhi.n	80015ce <DMA_CheckFifoParam+0xda>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <DMA_CheckFifoParam+0x70>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001575 	.word	0x08001575
 8001568:	0800157b 	.word	0x0800157b
 800156c:	08001575 	.word	0x08001575
 8001570:	0800158d 	.word	0x0800158d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
      break;
 8001578:	e030      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d025      	beq.n	80015d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800158a:	e022      	b.n	80015d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001594:	d11f      	bne.n	80015d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800159a:	e01c      	b.n	80015d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d903      	bls.n	80015aa <DMA_CheckFifoParam+0xb6>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d003      	beq.n	80015b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015a8:	e018      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      break;
 80015ae:	e015      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00e      	beq.n	80015da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      break;
 80015c0:	e00b      	b.n	80015da <DMA_CheckFifoParam+0xe6>
      break;
 80015c2:	bf00      	nop
 80015c4:	e00a      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;
 80015c6:	bf00      	nop
 80015c8:	e008      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;
 80015ca:	bf00      	nop
 80015cc:	e006      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;
 80015ce:	bf00      	nop
 80015d0:	e004      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;
 80015d2:	bf00      	nop
 80015d4:	e002      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;   
 80015d6:	bf00      	nop
 80015d8:	e000      	b.n	80015dc <DMA_CheckFifoParam+0xe8>
      break;
 80015da:	bf00      	nop
    }
  } 
  
  return status; 
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e16b      	b.n	80018e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 815a 	bne.w	80018da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d005      	beq.n	800163e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	2b02      	cmp	r3, #2
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d017      	beq.n	80016dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80b4 	beq.w	80018da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_GPIO_Init+0x30c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a5b      	ldr	r2, [pc, #364]	; (80018fc <HAL_GPIO_Init+0x310>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_GPIO_Init+0x314>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02b      	beq.n	8001812 <HAL_GPIO_Init+0x226>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a51      	ldr	r2, [pc, #324]	; (8001904 <HAL_GPIO_Init+0x318>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x222>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_GPIO_Init+0x31c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x21e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4f      	ldr	r2, [pc, #316]	; (800190c <HAL_GPIO_Init+0x320>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x21a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_GPIO_Init+0x324>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x216>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_GPIO_Init+0x328>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x212>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x32c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x20e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_GPIO_Init+0x330>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x20a>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e00e      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017f6:	2308      	movs	r3, #8
 80017f8:	e00c      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017fa:	2306      	movs	r3, #6
 80017fc:	e00a      	b.n	8001814 <HAL_GPIO_Init+0x228>
 80017fe:	2305      	movs	r3, #5
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001802:	2304      	movs	r3, #4
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x228>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x228>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x228>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4935      	ldr	r1, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x310>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001856:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <HAL_GPIO_Init+0x334>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_GPIO_Init+0x334>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <HAL_GPIO_Init+0x334>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f ae90 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021000 	.word	0x40021000
 8001914:	40021400 	.word	0x40021400
 8001918:	40021800 	.word	0x40021800
 800191c:	40021c00 	.word	0x40021c00
 8001920:	40013c00 	.word	0x40013c00

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	041a      	lsls	r2, r3, #16
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43d9      	mvns	r1, r3
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	400b      	ands	r3, r1
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e264      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4ba0      	ldr	r3, [pc, #640]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b9d      	ldr	r3, [pc, #628]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b99      	ldr	r3, [pc, #612]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d05b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e23f      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x74>
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a90      	ldr	r2, [pc, #576]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b8b      	ldr	r3, [pc, #556]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a8a      	ldr	r2, [pc, #552]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a87      	ldr	r2, [pc, #540]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a24:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a83      	ldr	r2, [pc, #524]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a80      	ldr	r2, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff f88e 	bl	8000b64 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f88a 	bl	8000b64 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e204      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f87a 	bl	8000b64 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff f876 	bl	8000b64 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1f0      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c4      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4952      	ldr	r1, [pc, #328]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x2b0>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff f82f 	bl	8000b64 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f82b 	bl	8000b64 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a5      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4940      	ldr	r1, [pc, #256]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_OscConfig+0x2b0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f80e 	bl	8000b64 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff f80a 	bl	8000b64 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e184      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d030      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x2b4>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7fe ffee 	bl	8000b64 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7fe ffea 	bl	8000b64 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e164      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x200>
 8001baa:	e015      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x2b4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ffd7 	bl	8000b64 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7fe ffd3 	bl	8000b64 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e14d      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a0 	beq.w	8001d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d121      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_RCC_OscConfig+0x2b8>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7fe ff99 	bl	8000b64 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e011      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	42470000 	.word	0x42470000
 8001c40:	42470e80 	.word	0x42470e80
 8001c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c48:	f7fe ff8c 	bl	8000b64 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e106      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_OscConfig+0x4e4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a80      	ldr	r2, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e01c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x32a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x312>
 8001c84:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x32a>
 8001c9e:	4b75      	ldr	r3, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a74      	ldr	r2, [pc, #464]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ff51 	bl	8000b64 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe ff4d 	bl	8000b64 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0c5      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ee      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x33a>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe ff3b 	bl	8000b64 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe ff37 	bl	8000b64 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0af      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 809b 	beq.w	8001e66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d05c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d141      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff0b 	bl	8000b64 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe ff07 	bl	8000b64 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e081      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d64:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	019b      	lsls	r3, r3, #6
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
 8001d94:	4937      	ldr	r1, [pc, #220]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fee0 	bl	8000b64 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe fedc 	bl	8000b64 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e056      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x41c>
 8001dc6:	e04e      	b.n	8001e66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7fe fec9 	bl	8000b64 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7fe fec5 	bl	8000b64 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e03f      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x44a>
 8001df4:	e037      	b.n	8001e66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e032      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d028      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d121      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d11a      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e32:	4013      	ands	r3, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d111      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40007000 	.word	0x40007000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	42470060 	.word	0x42470060

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0cc      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b65      	ldr	r3, [pc, #404]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d044      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e067      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4934      	ldr	r1, [pc, #208]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fdfa 	bl	8000b64 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fdf6 	bl	8000b64 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d20c      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fca0 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	08006384 	.word	0x08006384
 8002040:	20000014 	.word	0x20000014
 8002044:	20000018 	.word	0x20000018

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800204e:	2100      	movs	r1, #0
 8002050:	6079      	str	r1, [r7, #4]
 8002052:	2100      	movs	r1, #0
 8002054:	60f9      	str	r1, [r7, #12]
 8002056:	2100      	movs	r1, #0
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800205a:	2100      	movs	r1, #0
 800205c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800205e:	4952      	ldr	r1, [pc, #328]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002060:	6889      	ldr	r1, [r1, #8]
 8002062:	f001 010c 	and.w	r1, r1, #12
 8002066:	2908      	cmp	r1, #8
 8002068:	d00d      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3e>
 800206a:	2908      	cmp	r1, #8
 800206c:	f200 8094 	bhi.w	8002198 <HAL_RCC_GetSysClockFreq+0x150>
 8002070:	2900      	cmp	r1, #0
 8002072:	d002      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x32>
 8002074:	2904      	cmp	r1, #4
 8002076:	d003      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x38>
 8002078:	e08e      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <HAL_RCC_GetSysClockFreq+0x164>)
 800207c:	60bb      	str	r3, [r7, #8]
       break;
 800207e:	e08e      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002082:	60bb      	str	r3, [r7, #8]
      break;
 8002084:	e08b      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002086:	4948      	ldr	r1, [pc, #288]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002088:	6849      	ldr	r1, [r1, #4]
 800208a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800208e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002090:	4945      	ldr	r1, [pc, #276]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002092:	6849      	ldr	r1, [r1, #4]
 8002094:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002098:	2900      	cmp	r1, #0
 800209a:	d024      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209c:	4942      	ldr	r1, [pc, #264]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800209e:	6849      	ldr	r1, [r1, #4]
 80020a0:	0989      	lsrs	r1, r1, #6
 80020a2:	4608      	mov	r0, r1
 80020a4:	f04f 0100 	mov.w	r1, #0
 80020a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020ac:	f04f 0500 	mov.w	r5, #0
 80020b0:	ea00 0204 	and.w	r2, r0, r4
 80020b4:	ea01 0305 	and.w	r3, r1, r5
 80020b8:	493d      	ldr	r1, [pc, #244]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80020ba:	fb01 f003 	mul.w	r0, r1, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	fb01 f102 	mul.w	r1, r1, r2
 80020c4:	1844      	adds	r4, r0, r1
 80020c6:	493a      	ldr	r1, [pc, #232]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80020c8:	fba2 0101 	umull	r0, r1, r2, r1
 80020cc:	1863      	adds	r3, r4, r1
 80020ce:	4619      	mov	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	f7fe f87a 	bl	80001d0 <__aeabi_uldivmod>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4613      	mov	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e04a      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	461a      	mov	r2, r3
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020f6:	f04f 0100 	mov.w	r1, #0
 80020fa:	ea02 0400 	and.w	r4, r2, r0
 80020fe:	ea03 0501 	and.w	r5, r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	014b      	lsls	r3, r1, #5
 8002110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002114:	0142      	lsls	r2, r0, #5
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	1b00      	subs	r0, r0, r4
 800211c:	eb61 0105 	sbc.w	r1, r1, r5
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	018b      	lsls	r3, r1, #6
 800212a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800212e:	0182      	lsls	r2, r0, #6
 8002130:	1a12      	subs	r2, r2, r0
 8002132:	eb63 0301 	sbc.w	r3, r3, r1
 8002136:	f04f 0000 	mov.w	r0, #0
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	00d9      	lsls	r1, r3, #3
 8002140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002144:	00d0      	lsls	r0, r2, #3
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	1912      	adds	r2, r2, r4
 800214c:	eb45 0303 	adc.w	r3, r5, r3
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	0299      	lsls	r1, r3, #10
 800215a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800215e:	0290      	lsls	r0, r2, #10
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	461a      	mov	r2, r3
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	f7fe f82e 	bl	80001d0 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	60bb      	str	r3, [r7, #8]
      break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCC_GetSysClockFreq+0x164>)
 800219a:	60bb      	str	r3, [r7, #8]
      break;
 800219c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219e:	68bb      	ldr	r3, [r7, #8]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	017d7840 	.word	0x017d7840

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000014 	.word	0x20000014

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021d0:	f7ff fff0 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0a9b      	lsrs	r3, r3, #10
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4903      	ldr	r1, [pc, #12]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08006394 	.word	0x08006394

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021f8:	f7ff ffdc 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0b5b      	lsrs	r3, r3, #13
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4903      	ldr	r1, [pc, #12]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	08006394 	.word	0x08006394

0800221c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	220f      	movs	r2, #15
 800222a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_GetClockConfig+0x5c>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0203 	and.w	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_RCC_GetClockConfig+0x5c>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCC_GetClockConfig+0x5c>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_GetClockConfig+0x5c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_RCC_GetClockConfig+0x60>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0207 	and.w	r2, r3, #7
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40023c00 	.word	0x40023c00

08002280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f839 	bl	800231e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 f9d8 	bl	8002674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e04e      	b.n	80023ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d01d      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_TIM_Base_Start_IT+0xc8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_TIM_Base_Start_IT+0xcc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_TIM_Base_Start_IT+0xd0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <HAL_TIM_Base_Start_IT+0xd4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_TIM_Base_Start_IT+0xd8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x80>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIM_Base_Start_IT+0xdc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d111      	bne.n	80023d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d010      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	e007      	b.n	80023e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40014000 	.word	0x40014000
 8002410:	40001800 	.word	0x40001800

08002414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b02      	cmp	r3, #2
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0202 	mvn.w	r2, #2
 8002440:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8ee 	bl	8002638 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f8e0 	bl	8002624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8f1 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0204 	mvn.w	r2, #4
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8c4 	bl	8002638 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8b6 	bl	8002624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8c7 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0208 	mvn.w	r2, #8
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f89a 	bl	8002638 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f88c 	bl	8002624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f89d 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b10      	cmp	r3, #16
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f870 	bl	8002638 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f862 	bl	8002624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f873 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0201 	mvn.w	r2, #1
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f922 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f902 	bl	80027c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f838 	bl	8002660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8cc 	bl	80027b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a40      	ldr	r2, [pc, #256]	; (8002788 <TIM_Base_SetConfig+0x114>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <TIM_Base_SetConfig+0x40>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d00f      	beq.n	80026b4 <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3d      	ldr	r2, [pc, #244]	; (800278c <TIM_Base_SetConfig+0x118>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00b      	beq.n	80026b4 <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3c      	ldr	r2, [pc, #240]	; (8002790 <TIM_Base_SetConfig+0x11c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d007      	beq.n	80026b4 <TIM_Base_SetConfig+0x40>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3b      	ldr	r2, [pc, #236]	; (8002794 <TIM_Base_SetConfig+0x120>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_Base_SetConfig+0x40>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <TIM_Base_SetConfig+0x124>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d108      	bne.n	80026c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a2f      	ldr	r2, [pc, #188]	; (8002788 <TIM_Base_SetConfig+0x114>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d02b      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d027      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a2c      	ldr	r2, [pc, #176]	; (800278c <TIM_Base_SetConfig+0x118>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d023      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <TIM_Base_SetConfig+0x11c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <TIM_Base_SetConfig+0x120>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01b      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a29      	ldr	r2, [pc, #164]	; (8002798 <TIM_Base_SetConfig+0x124>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d017      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a28      	ldr	r2, [pc, #160]	; (800279c <TIM_Base_SetConfig+0x128>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <TIM_Base_SetConfig+0x12c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00f      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <TIM_Base_SetConfig+0x130>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00b      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <TIM_Base_SetConfig+0x134>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <TIM_Base_SetConfig+0x138>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <TIM_Base_SetConfig+0x13c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <TIM_Base_SetConfig+0x114>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d003      	beq.n	800276c <TIM_Base_SetConfig+0xf8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <TIM_Base_SetConfig+0x124>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d103      	bne.n	8002774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	615a      	str	r2, [r3, #20]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40010000 	.word	0x40010000
 800278c:	40000400 	.word	0x40000400
 8002790:	40000800 	.word	0x40000800
 8002794:	40000c00 	.word	0x40000c00
 8002798:	40010400 	.word	0x40010400
 800279c:	40014000 	.word	0x40014000
 80027a0:	40014400 	.word	0x40014400
 80027a4:	40014800 	.word	0x40014800
 80027a8:	40001800 	.word	0x40001800
 80027ac:	40001c00 	.word	0x40001c00
 80027b0:	40002000 	.word	0x40002000

080027b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e03f      	b.n	800286e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f82e 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fcdb 	bl	80031dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	4613      	mov	r3, r2
 8002882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	d11d      	bne.n	80028cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Receive_IT+0x26>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e016      	b.n	80028ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Receive_IT+0x38>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e00f      	b.n	80028ce <HAL_UART_Receive_IT+0x58>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	461a      	mov	r2, r3
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fab6 	bl	8002e34 <UART_Start_Receive_IT>
 80028c8:	4603      	mov	r3, r0
 80028ca:	e000      	b.n	80028ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0ba      	sub	sp, #232	; 0xe8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_UART_IRQHandler+0x66>
 800292a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fb95 	bl	8003066 <UART_Receive_IT>
      return;
 800293c:	e256      	b.n	8002dec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800293e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80de 	beq.w	8002b04 <HAL_UART_IRQHandler+0x22c>
 8002948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002958:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80d1 	beq.w	8002b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_UART_IRQHandler+0xae>
 800296e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_UART_IRQHandler+0xd2>
 8002992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f043 0202 	orr.w	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_UART_IRQHandler+0xf6>
 80029b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f043 0204 	orr.w	r2, r3, #4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <HAL_UART_IRQHandler+0x126>
 80029da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0208 	orr.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 81ed 	beq.w	8002de2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_UART_IRQHandler+0x14e>
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fb20 	bl	8003066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_UART_IRQHandler+0x17a>
 8002a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d04f      	beq.n	8002af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa28 	bl	8002ea8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d141      	bne.n	8002aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3314      	adds	r3, #20
 8002a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1d9      	bne.n	8002a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d013      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4a7d      	ldr	r2, [pc, #500]	; (8002cb4 <HAL_UART_IRQHandler+0x3dc>)
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fab0 	bl	800102c <HAL_DMA_Abort_IT>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002adc:	4610      	mov	r0, r2
 8002ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	e00e      	b.n	8002b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f990 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	e00a      	b.n	8002b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f98c 	bl	8002e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	e006      	b.n	8002b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f988 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002afe:	e170      	b.n	8002de2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	bf00      	nop
    return;
 8002b02:	e16e      	b.n	8002de2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	f040 814a 	bne.w	8002da2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8143 	beq.w	8002da2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 813c 	beq.w	8002da2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	f040 80b4 	bne.w	8002cb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8140 	beq.w	8002de6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	f080 8139 	bcs.w	8002de6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b86:	f000 8088 	beq.w	8002c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	330c      	adds	r3, #12
 8002bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bc6:	e841 2300 	strex	r3, r2, [r1]
 8002bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1d9      	bne.n	8002b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e1      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e3      	bne.n	8002c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e3      	bne.n	8002c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f959 	bl	8000f4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8b6 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cb0:	e099      	b.n	8002de6 <HAL_UART_IRQHandler+0x50e>
 8002cb2:	bf00      	nop
 8002cb4:	08002f6f 	.word	0x08002f6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 808b 	beq.w	8002dea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8086 	beq.w	8002dea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d02:	647a      	str	r2, [r7, #68]	; 0x44
 8002d04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e3      	bne.n	8002cde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	623b      	str	r3, [r7, #32]
   return(result);
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3314      	adds	r3, #20
 8002d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d3a:	633a      	str	r2, [r7, #48]	; 0x30
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e3      	bne.n	8002d16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0310 	bic.w	r3, r3, #16
 8002d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e3      	bne.n	8002d5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f83e 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da0:	e023      	b.n	8002dea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x4ea>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8eb 	bl	8002f96 <UART_Transmit_IT>
    return;
 8002dc0:	e014      	b.n	8002dec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <HAL_UART_IRQHandler+0x514>
 8002dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f92b 	bl	8003036 <UART_EndTransmit_IT>
    return;
 8002de0:	e004      	b.n	8002dec <HAL_UART_IRQHandler+0x514>
    return;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <HAL_UART_IRQHandler+0x514>
      return;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <HAL_UART_IRQHandler+0x514>
      return;
 8002dea:	bf00      	nop
  }
}
 8002dec:	37e8      	adds	r7, #232	; 0xe8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2222      	movs	r2, #34	; 0x22
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b095      	sub	sp, #84	; 0x54
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ed0:	643a      	str	r2, [r7, #64]	; 0x40
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d119      	bne.n	8002f54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f023 0310 	bic.w	r3, r3, #16
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f40:	61ba      	str	r2, [r7, #24]
 8002f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e5      	bne.n	8002f20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f62:	bf00      	nop
 8002f64:	3754      	adds	r7, #84	; 0x54
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff3d 	bl	8002e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b21      	cmp	r3, #33	; 0x21
 8002fa8:	d13e      	bne.n	8003028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d114      	bne.n	8002fde <UART_Transmit_IT+0x48>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d110      	bne.n	8002fde <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	1c9a      	adds	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e008      	b.n	8002ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6211      	str	r1, [r2, #32]
 8002fe8:	781a      	ldrb	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10f      	bne.n	8003024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fecc 	bl	8002df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b08c      	sub	sp, #48	; 0x30
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b22      	cmp	r3, #34	; 0x22
 8003078:	f040 80ab 	bne.w	80031d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003084:	d117      	bne.n	80030b6 <UART_Receive_IT+0x50>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d113      	bne.n	80030b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	1c9a      	adds	r2, r3, #2
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
 80030b4:	e026      	b.n	8003104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d007      	beq.n	80030da <UART_Receive_IT+0x74>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <UART_Receive_IT+0x82>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e008      	b.n	80030fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003114:	2b00      	cmp	r3, #0
 8003116:	d15a      	bne.n	80031ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0220 	bic.w	r2, r2, #32
 8003126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	2b01      	cmp	r3, #1
 8003156:	d135      	bne.n	80031c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	613b      	str	r3, [r7, #16]
   return(result);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f023 0310 	bic.w	r3, r3, #16
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	623a      	str	r2, [r7, #32]
 8003180:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	69f9      	ldr	r1, [r7, #28]
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	61bb      	str	r3, [r7, #24]
   return(result);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e5      	bne.n	800315e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b10      	cmp	r3, #16
 800319e:	d10a      	bne.n	80031b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fe2d 	bl	8002e1c <HAL_UARTEx_RxEventCallback>
 80031c2:	e002      	b.n	80031ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fd fac5 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e002      	b.n	80031d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3730      	adds	r7, #48	; 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031e0:	b09f      	sub	sp, #124	; 0x7c
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	ea40 0301 	orr.w	r3, r0, r1
 80031fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	431a      	orrs	r2, r3
 800320e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4313      	orrs	r3, r2
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003220:	f021 010c 	bic.w	r1, r1, #12
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800322a:	430b      	orrs	r3, r1
 800322c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	6999      	ldr	r1, [r3, #24]
 800323c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	ea40 0301 	orr.w	r3, r0, r1
 8003244:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4bc5      	ldr	r3, [pc, #788]	; (8003560 <UART_SetConfig+0x384>)
 800324c:	429a      	cmp	r2, r3
 800324e:	d004      	beq.n	800325a <UART_SetConfig+0x7e>
 8003250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4bc3      	ldr	r3, [pc, #780]	; (8003564 <UART_SetConfig+0x388>)
 8003256:	429a      	cmp	r2, r3
 8003258:	d103      	bne.n	8003262 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800325a:	f7fe ffcb 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 800325e:	6778      	str	r0, [r7, #116]	; 0x74
 8003260:	e002      	b.n	8003268 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003262:	f7fe ffb3 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8003266:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003270:	f040 80b6 	bne.w	80033e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003276:	461c      	mov	r4, r3
 8003278:	f04f 0500 	mov.w	r5, #0
 800327c:	4622      	mov	r2, r4
 800327e:	462b      	mov	r3, r5
 8003280:	1891      	adds	r1, r2, r2
 8003282:	6439      	str	r1, [r7, #64]	; 0x40
 8003284:	415b      	adcs	r3, r3
 8003286:	647b      	str	r3, [r7, #68]	; 0x44
 8003288:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800328c:	1912      	adds	r2, r2, r4
 800328e:	eb45 0303 	adc.w	r3, r5, r3
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	00d9      	lsls	r1, r3, #3
 800329c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032a0:	00d0      	lsls	r0, r2, #3
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	1911      	adds	r1, r2, r4
 80032a8:	6639      	str	r1, [r7, #96]	; 0x60
 80032aa:	416b      	adcs	r3, r5
 80032ac:	667b      	str	r3, [r7, #100]	; 0x64
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80032bc:	415b      	adcs	r3, r3
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032c8:	f7fc ff82 	bl	80001d0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4ba5      	ldr	r3, [pc, #660]	; (8003568 <UART_SetConfig+0x38c>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011e      	lsls	r6, r3, #4
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	461c      	mov	r4, r3
 80032de:	f04f 0500 	mov.w	r5, #0
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	6339      	str	r1, [r7, #48]	; 0x30
 80032ea:	415b      	adcs	r3, r3
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
 80032ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032f2:	1912      	adds	r2, r2, r4
 80032f4:	eb45 0303 	adc.w	r3, r5, r3
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	00d9      	lsls	r1, r3, #3
 8003302:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003306:	00d0      	lsls	r0, r2, #3
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	1911      	adds	r1, r2, r4
 800330e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003310:	416b      	adcs	r3, r5
 8003312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	1891      	adds	r1, r2, r2
 8003320:	62b9      	str	r1, [r7, #40]	; 0x28
 8003322:	415b      	adcs	r3, r3
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800332a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800332e:	f7fc ff4f 	bl	80001d0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <UART_SetConfig+0x38c>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a87      	ldr	r2, [pc, #540]	; (8003568 <UART_SetConfig+0x38c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003358:	441e      	add	r6, r3
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	4618      	mov	r0, r3
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	1894      	adds	r4, r2, r2
 8003368:	623c      	str	r4, [r7, #32]
 800336a:	415b      	adcs	r3, r3
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003372:	1812      	adds	r2, r2, r0
 8003374:	eb41 0303 	adc.w	r3, r1, r3
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	f04f 0500 	mov.w	r5, #0
 8003380:	00dd      	lsls	r5, r3, #3
 8003382:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003386:	00d4      	lsls	r4, r2, #3
 8003388:	4622      	mov	r2, r4
 800338a:	462b      	mov	r3, r5
 800338c:	1814      	adds	r4, r2, r0
 800338e:	653c      	str	r4, [r7, #80]	; 0x50
 8003390:	414b      	adcs	r3, r1
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	461a      	mov	r2, r3
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	1891      	adds	r1, r2, r2
 80033a0:	61b9      	str	r1, [r7, #24]
 80033a2:	415b      	adcs	r3, r3
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033ae:	f7fc ff0f 	bl	80001d0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <UART_SetConfig+0x38c>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	; 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	3332      	adds	r3, #50	; 0x32
 80033ca:	4a67      	ldr	r2, [pc, #412]	; (8003568 <UART_SetConfig+0x38c>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 0207 	and.w	r2, r3, #7
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4432      	add	r2, r6
 80033dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033de:	e0b9      	b.n	8003554 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e2:	461c      	mov	r4, r3
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	4622      	mov	r2, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	1891      	adds	r1, r2, r2
 80033ee:	6139      	str	r1, [r7, #16]
 80033f0:	415b      	adcs	r3, r3
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033f8:	1912      	adds	r2, r2, r4
 80033fa:	eb45 0303 	adc.w	r3, r5, r3
 80033fe:	f04f 0000 	mov.w	r0, #0
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	00d9      	lsls	r1, r3, #3
 8003408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800340c:	00d0      	lsls	r0, r2, #3
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	eb12 0804 	adds.w	r8, r2, r4
 8003416:	eb43 0905 	adc.w	r9, r3, r5
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4618      	mov	r0, r3
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	008b      	lsls	r3, r1, #2
 800342e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003432:	0082      	lsls	r2, r0, #2
 8003434:	4640      	mov	r0, r8
 8003436:	4649      	mov	r1, r9
 8003438:	f7fc feca 	bl	80001d0 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4b49      	ldr	r3, [pc, #292]	; (8003568 <UART_SetConfig+0x38c>)
 8003442:	fba3 2302 	umull	r2, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	011e      	lsls	r6, r3, #4
 800344a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344c:	4618      	mov	r0, r3
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	1894      	adds	r4, r2, r2
 8003458:	60bc      	str	r4, [r7, #8]
 800345a:	415b      	adcs	r3, r3
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003462:	1812      	adds	r2, r2, r0
 8003464:	eb41 0303 	adc.w	r3, r1, r3
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	f04f 0500 	mov.w	r5, #0
 8003470:	00dd      	lsls	r5, r3, #3
 8003472:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003476:	00d4      	lsls	r4, r2, #3
 8003478:	4622      	mov	r2, r4
 800347a:	462b      	mov	r3, r5
 800347c:	1814      	adds	r4, r2, r0
 800347e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003480:	414b      	adcs	r3, r1
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4618      	mov	r0, r3
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	008b      	lsls	r3, r1, #2
 8003498:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349c:	0082      	lsls	r2, r0, #2
 800349e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80034a2:	f7fc fe95 	bl	80001d0 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <UART_SetConfig+0x38c>)
 80034ac:	fba3 1302 	umull	r1, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	2164      	movs	r1, #100	; 0x64
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <UART_SetConfig+0x38c>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ca:	441e      	add	r6, r3
 80034cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ce:	4618      	mov	r0, r3
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	1894      	adds	r4, r2, r2
 80034da:	603c      	str	r4, [r7, #0]
 80034dc:	415b      	adcs	r3, r3
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e4:	1812      	adds	r2, r2, r0
 80034e6:	eb41 0303 	adc.w	r3, r1, r3
 80034ea:	f04f 0400 	mov.w	r4, #0
 80034ee:	f04f 0500 	mov.w	r5, #0
 80034f2:	00dd      	lsls	r5, r3, #3
 80034f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034f8:	00d4      	lsls	r4, r2, #3
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	eb12 0a00 	adds.w	sl, r2, r0
 8003502:	eb43 0b01 	adc.w	fp, r3, r1
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	008b      	lsls	r3, r1, #2
 800351a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800351e:	0082      	lsls	r2, r0, #2
 8003520:	4650      	mov	r0, sl
 8003522:	4659      	mov	r1, fp
 8003524:	f7fc fe54 	bl	80001d0 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <UART_SetConfig+0x38c>)
 800352e:	fba3 1302 	umull	r1, r3, r3, r2
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2164      	movs	r1, #100	; 0x64
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	3332      	adds	r3, #50	; 0x32
 8003540:	4a09      	ldr	r2, [pc, #36]	; (8003568 <UART_SetConfig+0x38c>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4432      	add	r2, r6
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	bf00      	nop
 8003556:	377c      	adds	r7, #124	; 0x7c
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	51eb851f 	.word	0x51eb851f

0800356c <__NVIC_SetPriority>:
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	db0a      	blt.n	8003596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	490c      	ldr	r1, [pc, #48]	; (80035b8 <__NVIC_SetPriority+0x4c>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	440b      	add	r3, r1
 8003590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003594:	e00a      	b.n	80035ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <__NVIC_SetPriority+0x50>)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3b04      	subs	r3, #4
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	440b      	add	r3, r1
 80035aa:	761a      	strb	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000e100 	.word	0xe000e100
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <SysTick_Handler+0x1c>)
 80035c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035c8:	f001 fd28 	bl	800501c <xTaskGetSchedulerState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035d2:	f002 fb11 	bl	8005bf8 <xPortSysTickHandler>
  }
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	e000e010 	.word	0xe000e010

080035e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80035e4:	2100      	movs	r1, #0
 80035e6:	f06f 0004 	mvn.w	r0, #4
 80035ea:	f7ff ffbf 	bl	800356c <__NVIC_SetPriority>
#endif
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035fa:	f3ef 8305 	mrs	r3, IPSR
 80035fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003600:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003606:	f06f 0305 	mvn.w	r3, #5
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e00c      	b.n	8003628 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <osKernelInitialize+0x44>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <osKernelInitialize+0x44>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	e002      	b.n	8003628 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200000a4 	.word	0x200000a4

0800363c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003642:	f3ef 8305 	mrs	r3, IPSR
 8003646:	603b      	str	r3, [r7, #0]
  return(result);
 8003648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <osKernelStart+0x1a>
    stat = osErrorISR;
 800364e:	f06f 0305 	mvn.w	r3, #5
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	e010      	b.n	8003678 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <osKernelStart+0x48>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d109      	bne.n	8003672 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800365e:	f7ff ffbf 	bl	80035e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <osKernelStart+0x48>)
 8003664:	2202      	movs	r2, #2
 8003666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003668:	f001 f87c 	bl	8004764 <vTaskStartScheduler>
      stat = osOK;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	e002      	b.n	8003678 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003678:	687b      	ldr	r3, [r7, #4]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200000a4 	.word	0x200000a4

08003688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	; 0x38
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003698:	f3ef 8305 	mrs	r3, IPSR
 800369c:	617b      	str	r3, [r7, #20]
  return(result);
 800369e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d17e      	bne.n	80037a2 <osThreadNew+0x11a>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d07b      	beq.n	80037a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036ae:	2318      	movs	r3, #24
 80036b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d045      	beq.n	800374e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <osThreadNew+0x48>
        name = attr->name;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <osThreadNew+0x6e>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b38      	cmp	r3, #56	; 0x38
 80036e8:	d805      	bhi.n	80036f6 <osThreadNew+0x6e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <osThreadNew+0x72>
        return (NULL);
 80036f6:	2300      	movs	r3, #0
 80036f8:	e054      	b.n	80037a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <osThreadNew+0xa8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2bbb      	cmp	r3, #187	; 0xbb
 8003718:	d90a      	bls.n	8003730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <osThreadNew+0xa8>
        mem = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e010      	b.n	8003752 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10c      	bne.n	8003752 <osThreadNew+0xca>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d108      	bne.n	8003752 <osThreadNew+0xca>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <osThreadNew+0xca>
          mem = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	e001      	b.n	8003752 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d110      	bne.n	800377a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003760:	9202      	str	r2, [sp, #8]
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6a3a      	ldr	r2, [r7, #32]
 800376c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fe0c 	bl	800438c <xTaskCreateStatic>
 8003774:	4603      	mov	r3, r0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e013      	b.n	80037a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d110      	bne.n	80037a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	b29a      	uxth	r2, r3
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fe57 	bl	8004446 <xTaskCreate>
 8003798:	4603      	mov	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <osThreadNew+0x11a>
            hTask = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037a2:	693b      	ldr	r3, [r7, #16]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3728      	adds	r7, #40	; 0x28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b4:	f3ef 8305 	mrs	r3, IPSR
 80037b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <osDelay+0x1c>
    stat = osErrorISR;
 80037c0:	f06f 0305 	mvn.w	r3, #5
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e007      	b.n	80037d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 ff92 	bl	80046fc <vTaskDelay>
    }
  }

  return (stat);
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a07      	ldr	r2, [pc, #28]	; (8003810 <vApplicationGetIdleTaskMemory+0x2c>)
 80037f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a06      	ldr	r2, [pc, #24]	; (8003814 <vApplicationGetIdleTaskMemory+0x30>)
 80037fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200000a8 	.word	0x200000a8
 8003814:	20000164 	.word	0x20000164

08003818 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <vApplicationGetTimerTaskMemory+0x2c>)
 8003828:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <vApplicationGetTimerTaskMemory+0x30>)
 800382e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	20000364 	.word	0x20000364
 8003848:	20000420 	.word	0x20000420

0800384c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f103 0208 	add.w	r2, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f103 0208 	add.w	r2, r3, #8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f103 0208 	add.w	r2, r3, #8
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d103      	bne.n	800390e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e00c      	b.n	8003928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3308      	adds	r3, #8
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e002      	b.n	800391c <vListInsert+0x2e>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d2f6      	bcs.n	8003916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6852      	ldr	r2, [r2, #4]
 8003980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d103      	bne.n	8003994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1e5a      	subs	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039de:	f002 f879 	bl	8005ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	441a      	add	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	441a      	add	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01a      	beq.n	8003a72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f929 	bl	8004c98 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d012      	beq.n	8003a72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <xQueueGenericReset+0xcc>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	e009      	b.n	8003a72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3310      	adds	r3, #16
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fef2 	bl	800384c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3324      	adds	r3, #36	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff feed 	bl	800384c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f002 f85f 	bl	8005b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <xQueueGenericCreateStatic+0x52>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <xQueueGenericCreateStatic+0x56>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <xQueueGenericCreateStatic+0x58>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	623b      	str	r3, [r7, #32]
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <xQueueGenericCreateStatic+0x7e>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <xQueueGenericCreateStatic+0x82>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <xQueueGenericCreateStatic+0x84>
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	61fb      	str	r3, [r7, #28]
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b22:	2350      	movs	r3, #80	; 0x50
 8003b24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b50      	cmp	r3, #80	; 0x50
 8003b2a:	d00a      	beq.n	8003b42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61bb      	str	r3, [r7, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f805 	bl	8003b74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3730      	adds	r7, #48	; 0x30
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e002      	b.n	8003b96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	69b8      	ldr	r0, [r7, #24]
 8003ba6:	f7ff ff05 	bl	80039b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08e      	sub	sp, #56	; 0x38
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <xQueueGenericSend+0x32>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <xQueueGenericSend+0x40>
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <xQueueGenericSend+0x44>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <xQueueGenericSend+0x46>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <xQueueGenericSend+0x60>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c18:	bf00      	nop
 8003c1a:	e7fe      	b.n	8003c1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d103      	bne.n	8003c2a <xQueueGenericSend+0x6e>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <xQueueGenericSend+0x72>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <xQueueGenericSend+0x74>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xQueueGenericSend+0x8e>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	623b      	str	r3, [r7, #32]
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4a:	f001 f9e7 	bl	800501c <xTaskGetSchedulerState>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d102      	bne.n	8003c5a <xQueueGenericSend+0x9e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueGenericSend+0xa2>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueGenericSend+0xa4>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xQueueGenericSend+0xbe>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	61fb      	str	r3, [r7, #28]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c7a:	f001 ff2b 	bl	8005ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <xQueueGenericSend+0xd4>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d129      	bne.n	8003ce4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c96:	f000 fa0b 	bl	80040b0 <prvCopyDataToQueue>
 8003c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fff5 	bl	8004c98 <xTaskRemoveFromEventList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <xQueueGenericSend+0x1f8>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	e00a      	b.n	8003cdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <xQueueGenericSend+0x1f8>)
 8003cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003cdc:	f001 ff2a 	bl	8005b34 <vPortExitCritical>
				return pdPASS;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e063      	b.n	8003dac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cea:	f001 ff23 	bl	8005b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e05c      	b.n	8003dac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f82f 	bl	8004d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d06:	f001 ff15 	bl	8005b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d0a:	f000 fd9b 	bl	8004844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d0e:	f001 fee1 	bl	8005ad4 <vPortEnterCritical>
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d103      	bne.n	8003d28 <xQueueGenericSend+0x16c>
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSend+0x182>
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3e:	f001 fef9 	bl	8005b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d42:	1d3a      	adds	r2, r7, #4
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f81e 	bl	8004d8c <xTaskCheckForTimeOut>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d124      	bne.n	8003da0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d58:	f000 faa2 	bl	80042a0 <prvIsQueueFull>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	3310      	adds	r3, #16
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 ff44 	bl	8004bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d72:	f000 fa2d 	bl	80041d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d76:	f000 fd73 	bl	8004860 <xTaskResumeAll>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f af7c 	bne.w	8003c7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <xQueueGenericSend+0x1f8>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	e772      	b.n	8003c7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d96:	f000 fa1b 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d9a:	f000 fd61 	bl	8004860 <xTaskResumeAll>
 8003d9e:	e76c      	b.n	8003c7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da2:	f000 fa15 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003da6:	f000 fd5b 	bl	8004860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3738      	adds	r7, #56	; 0x38
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b090      	sub	sp, #64	; 0x40
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <xQueueGenericSendFromISR+0x3c>
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <xQueueGenericSendFromISR+0x40>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <xQueueGenericSendFromISR+0x42>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d103      	bne.n	8003e22 <xQueueGenericSendFromISR+0x6a>
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <xQueueGenericSendFromISR+0x6e>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xQueueGenericSendFromISR+0x70>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	623b      	str	r3, [r7, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e42:	f001 ff29 	bl	8005c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e46:	f3ef 8211 	mrs	r2, BASEPRI
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	61fa      	str	r2, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <xQueueGenericSendFromISR+0xbc>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d12f      	bne.n	8003ed4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e8a:	f000 f911 	bl	80040b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d112      	bne.n	8003ebe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d016      	beq.n	8003ece <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fef7 	bl	8004c98 <xTaskRemoveFromEventList>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e007      	b.n	8003ece <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	b25a      	sxtb	r2, r3
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003ed2:	e001      	b.n	8003ed8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ee2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3740      	adds	r7, #64	; 0x40
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xQueueReceive+0x30>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	623b      	str	r3, [r7, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceive+0x3e>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceive+0x42>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceive+0x44>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueReceive+0x5e>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61fb      	str	r3, [r7, #28]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f4e:	f001 f865 	bl	800501c <xTaskGetSchedulerState>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <xQueueReceive+0x6e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueReceive+0x72>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueReceive+0x74>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <xQueueReceive+0x8e>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61bb      	str	r3, [r7, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f7e:	f001 fda9 	bl	8005ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01f      	beq.n	8003fce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f000 f8f7 	bl	8004184 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	1e5a      	subs	r2, r3, #1
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	3310      	adds	r3, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fe74 	bl	8004c98 <xTaskRemoveFromEventList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <xQueueReceive+0x1bc>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fc6:	f001 fdb5 	bl	8005b34 <vPortExitCritical>
				return pdPASS;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e069      	b.n	80040a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fd4:	f001 fdae 	bl	8005b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e062      	b.n	80040a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe2:	f107 0310 	add.w	r3, r7, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 feba 	bl	8004d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ff0:	f001 fda0 	bl	8005b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ff4:	f000 fc26 	bl	8004844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ff8:	f001 fd6c 	bl	8005ad4 <vPortEnterCritical>
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004002:	b25b      	sxtb	r3, r3
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d103      	bne.n	8004012 <xQueueReceive+0x122>
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <xQueueReceive+0x138>
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004028:	f001 fd84 	bl	8005b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800402c:	1d3a      	adds	r2, r7, #4
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fea9 	bl	8004d8c <xTaskCheckForTimeOut>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d123      	bne.n	8004088 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004042:	f000 f917 	bl	8004274 <prvIsQueueEmpty>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	3324      	adds	r3, #36	; 0x24
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fdcf 	bl	8004bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800405a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405c:	f000 f8b8 	bl	80041d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004060:	f000 fbfe 	bl	8004860 <xTaskResumeAll>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d189      	bne.n	8003f7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <xQueueReceive+0x1bc>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	e780      	b.n	8003f7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800407c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407e:	f000 f8a7 	bl	80041d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004082:	f000 fbed 	bl	8004860 <xTaskResumeAll>
 8004086:	e77a      	b.n	8003f7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408a:	f000 f8a1 	bl	80041d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800408e:	f000 fbe7 	bl	8004860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 f8ee 	bl	8004274 <prvIsQueueEmpty>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f43f af6f 	beq.w	8003f7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3730      	adds	r7, #48	; 0x30
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d14d      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ffbc 	bl	8005058 <xTaskPriorityDisinherit>
 80040e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	e043      	b.n	8004172 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d119      	bne.n	8004124 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6858      	ldr	r0, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	461a      	mov	r2, r3
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	f002 f81c 	bl	8006138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	d32b      	bcc.n	8004172 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	e026      	b.n	8004172 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68d8      	ldr	r0, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	461a      	mov	r2, r3
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	f002 f802 	bl	8006138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	425b      	negs	r3, r3
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d207      	bcs.n	8004160 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	425b      	negs	r3, r3
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d105      	bne.n	8004172 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3b01      	subs	r3, #1
 8004170:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800417a:	697b      	ldr	r3, [r7, #20]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d303      	bcc.n	80041b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68d9      	ldr	r1, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	461a      	mov	r2, r3
 80041c2:	6838      	ldr	r0, [r7, #0]
 80041c4:	f001 ffb8 	bl	8006138 <memcpy>
	}
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041d8:	f001 fc7c 	bl	8005ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e4:	e011      	b.n	800420a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd50 	bl	8004c98 <xTaskRemoveFromEventList>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041fe:	f000 fe27 	bl	8004e50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	3b01      	subs	r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dce9      	bgt.n	80041e6 <prvUnlockQueue+0x16>
 8004212:	e000      	b.n	8004216 <prvUnlockQueue+0x46>
					break;
 8004214:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	22ff      	movs	r2, #255	; 0xff
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800421e:	f001 fc89 	bl	8005b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004222:	f001 fc57 	bl	8005ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800422e:	e011      	b.n	8004254 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3310      	adds	r3, #16
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd2b 	bl	8004c98 <xTaskRemoveFromEventList>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004248:	f000 fe02 	bl	8004e50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800424c:	7bbb      	ldrb	r3, [r7, #14]
 800424e:	3b01      	subs	r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004258:	2b00      	cmp	r3, #0
 800425a:	dce9      	bgt.n	8004230 <prvUnlockQueue+0x60>
 800425c:	e000      	b.n	8004260 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800425e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004268:	f001 fc64 	bl	8005b34 <vPortExitCritical>
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800427c:	f001 fc2a 	bl	8005ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e001      	b.n	8004292 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004292:	f001 fc4f 	bl	8005b34 <vPortExitCritical>

	return xReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a8:	f001 fc14 	bl	8005ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d102      	bne.n	80042be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042b8:	2301      	movs	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	e001      	b.n	80042c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042c2:	f001 fc37 	bl	8005b34 <vPortExitCritical>

	return xReturn;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e014      	b.n	800430a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042ec:	490c      	ldr	r1, [pc, #48]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <vQueueAddToRegistry+0x50>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004302:	e006      	b.n	8004312 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3301      	adds	r3, #1
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b07      	cmp	r3, #7
 800430e:	d9e7      	bls.n	80042e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20004b84 	.word	0x20004b84

08004324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004334:	f001 fbce 	bl	8005ad4 <vPortEnterCritical>
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <vQueueWaitForMessageRestricted+0x2a>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004354:	b25b      	sxtb	r3, r3
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d103      	bne.n	8004364 <vQueueWaitForMessageRestricted+0x40>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004364:	f001 fbe6 	bl	8005b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fc61 	bl	8004c40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff26 	bl	80041d0 <prvUnlockQueue>
	}
 8004384:	bf00      	nop
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af04      	add	r7, sp, #16
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61fb      	str	r3, [r7, #28]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043d2:	23bc      	movs	r3, #188	; 0xbc
 80043d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2bbc      	cmp	r3, #188	; 0xbc
 80043da:	d00a      	beq.n	80043f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	61bb      	str	r3, [r7, #24]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01e      	beq.n	8004438 <xTaskCreateStatic+0xac>
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	2202      	movs	r2, #2
 800440e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004412:	2300      	movs	r3, #0
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	f107 0314 	add.w	r3, r7, #20
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f850 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004432:	f000 f8f3 	bl	800461c <prvAddNewTaskToReadyList>
 8004436:	e001      	b.n	800443c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800443c:	697b      	ldr	r3, [r7, #20]
	}
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08c      	sub	sp, #48	; 0x30
 800444a:	af04      	add	r7, sp, #16
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f001 fc5c 	bl	8005d18 <pvPortMalloc>
 8004460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004468:	20bc      	movs	r0, #188	; 0xbc
 800446a:	f001 fc55 	bl	8005d18 <pvPortMalloc>
 800446e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
 800447c:	e005      	b.n	800448a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f001 fd16 	bl	8005eb0 <vPortFree>
 8004484:	e001      	b.n	800448a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	2300      	movs	r3, #0
 800449c:	9303      	str	r3, [sp, #12]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f80e 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044b4:	69f8      	ldr	r0, [r7, #28]
 80044b6:	f000 f8b1 	bl	800461c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e002      	b.n	80044c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044c6:	69bb      	ldr	r3, [r7, #24]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	21a5      	movs	r1, #165	; 0xa5
 80044ea:	f001 fe33 	bl	8006154 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044f8:	3b01      	subs	r3, #1
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	617b      	str	r3, [r7, #20]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01f      	beq.n	800456e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e012      	b.n	800455a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	7819      	ldrb	r1, [r3, #0]
 800453c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	3334      	adds	r3, #52	; 0x34
 8004544:	460a      	mov	r2, r1
 8004546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	2b0f      	cmp	r3, #15
 800455e:	d9e9      	bls.n	8004534 <prvInitialiseNewTask+0x64>
 8004560:	e000      	b.n	8004564 <prvInitialiseNewTask+0x94>
			{
				break;
 8004562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800456c:	e003      	b.n	8004576 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b37      	cmp	r3, #55	; 0x37
 800457a:	d901      	bls.n	8004580 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800457c:	2337      	movs	r3, #55	; 0x37
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	2200      	movs	r2, #0
 8004590:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	3304      	adds	r3, #4
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff f978 	bl	800388c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	3318      	adds	r3, #24
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff f973 	bl	800388c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	3354      	adds	r3, #84	; 0x54
 80045d0:	2260      	movs	r2, #96	; 0x60
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fdbd 	bl	8006154 <memset>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <prvInitialiseNewTask+0x140>)
 80045de:	659a      	str	r2, [r3, #88]	; 0x58
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	4a0c      	ldr	r2, [pc, #48]	; (8004614 <prvInitialiseNewTask+0x144>)
 80045e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <prvInitialiseNewTask+0x148>)
 80045ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	69b8      	ldr	r0, [r7, #24]
 80045f2:	f001 f941 	bl	8005878 <pxPortInitialiseStack>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004606:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004608:	bf00      	nop
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	080063c4 	.word	0x080063c4
 8004614:	080063e4 	.word	0x080063e4
 8004618:	080063a4 	.word	0x080063a4

0800461c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004624:	f001 fa56 	bl	8005ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <prvAddNewTaskToReadyList+0xc4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	4a2c      	ldr	r2, [pc, #176]	; (80046e0 <prvAddNewTaskToReadyList+0xc4>)
 8004630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <prvAddNewTaskToReadyList+0xc8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800463a:	4a2a      	ldr	r2, [pc, #168]	; (80046e4 <prvAddNewTaskToReadyList+0xc8>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <prvAddNewTaskToReadyList+0xc4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d110      	bne.n	800466a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004648:	f000 fc26 	bl	8004e98 <prvInitialiseTaskLists>
 800464c:	e00d      	b.n	800466a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <prvAddNewTaskToReadyList+0xcc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <prvAddNewTaskToReadyList+0xc8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	429a      	cmp	r2, r3
 8004662:	d802      	bhi.n	800466a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004664:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <prvAddNewTaskToReadyList+0xc8>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <prvAddNewTaskToReadyList+0xd0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <prvAddNewTaskToReadyList+0xd0>)
 8004672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <prvAddNewTaskToReadyList+0xd0>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <prvAddNewTaskToReadyList+0xd4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d903      	bls.n	8004690 <prvAddNewTaskToReadyList+0x74>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <prvAddNewTaskToReadyList+0xd4>)
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <prvAddNewTaskToReadyList+0xd8>)
 800469e:	441a      	add	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7ff f8fd 	bl	80038a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046ac:	f001 fa42 	bl	8005b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <prvAddNewTaskToReadyList+0xcc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00e      	beq.n	80046d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvAddNewTaskToReadyList+0xc8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d207      	bcs.n	80046d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvAddNewTaskToReadyList+0xdc>)
 80046c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000cf4 	.word	0x20000cf4
 80046e4:	20000820 	.word	0x20000820
 80046e8:	20000d00 	.word	0x20000d00
 80046ec:	20000d10 	.word	0x20000d10
 80046f0:	20000cfc 	.word	0x20000cfc
 80046f4:	20000824 	.word	0x20000824
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d017      	beq.n	800473e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800470e:	4b13      	ldr	r3, [pc, #76]	; (800475c <vTaskDelay+0x60>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <vTaskDelay+0x30>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800472c:	f000 f88a 	bl	8004844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fcfe 	bl	8005134 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004738:	f000 f892 	bl	8004860 <xTaskResumeAll>
 800473c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <vTaskDelay+0x64>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000d1c 	.word	0x20000d1c
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004772:	463a      	mov	r2, r7
 8004774:	1d39      	adds	r1, r7, #4
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f832 	bl	80037e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	9202      	str	r2, [sp, #8]
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2300      	movs	r3, #0
 8004790:	460a      	mov	r2, r1
 8004792:	4924      	ldr	r1, [pc, #144]	; (8004824 <vTaskStartScheduler+0xc0>)
 8004794:	4824      	ldr	r0, [pc, #144]	; (8004828 <vTaskStartScheduler+0xc4>)
 8004796:	f7ff fdf9 	bl	800438c <xTaskCreateStatic>
 800479a:	4603      	mov	r3, r0
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <vTaskStartScheduler+0xc8>)
 800479e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047a0:	4b22      	ldr	r3, [pc, #136]	; (800482c <vTaskStartScheduler+0xc8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e001      	b.n	80047b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047b8:	f000 fd10 	bl	80051dc <xTimerCreateTimerTask>
 80047bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11b      	bne.n	80047fc <vTaskStartScheduler+0x98>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	613b      	str	r3, [r7, #16]
}
 80047d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <vTaskStartScheduler+0xcc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3354      	adds	r3, #84	; 0x54
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <vTaskStartScheduler+0xd0>)
 80047e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <vTaskStartScheduler+0xd4>)
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
 80047e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <vTaskStartScheduler+0xd8>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f0:	4b13      	ldr	r3, [pc, #76]	; (8004840 <vTaskStartScheduler+0xdc>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047f6:	f001 f8cb 	bl	8005990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047fa:	e00e      	b.n	800481a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d10a      	bne.n	800481a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <vTaskStartScheduler+0xb4>
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	08006324 	.word	0x08006324
 8004828:	08004e69 	.word	0x08004e69
 800482c:	20000d18 	.word	0x20000d18
 8004830:	20000820 	.word	0x20000820
 8004834:	20000024 	.word	0x20000024
 8004838:	20000d14 	.word	0x20000d14
 800483c:	20000d00 	.word	0x20000d00
 8004840:	20000cf8 	.word	0x20000cf8

08004844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <vTaskSuspendAll+0x18>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a03      	ldr	r2, [pc, #12]	; (800485c <vTaskSuspendAll+0x18>)
 8004850:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000d1c 	.word	0x20000d1c

08004860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <xTaskResumeAll+0x118>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xTaskResumeAll+0x2c>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	603b      	str	r3, [r7, #0]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800488c:	f001 f922 	bl	8005ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004890:	4b39      	ldr	r3, [pc, #228]	; (8004978 <xTaskResumeAll+0x118>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	4a38      	ldr	r2, [pc, #224]	; (8004978 <xTaskResumeAll+0x118>)
 8004898:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489a:	4b37      	ldr	r3, [pc, #220]	; (8004978 <xTaskResumeAll+0x118>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d162      	bne.n	8004968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <xTaskResumeAll+0x11c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d05e      	beq.n	8004968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048aa:	e02f      	b.n	800490c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ac:	4b34      	ldr	r3, [pc, #208]	; (8004980 <xTaskResumeAll+0x120>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3318      	adds	r3, #24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff f851 	bl	8003960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff f84c 	bl	8003960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <xTaskResumeAll+0x124>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <xTaskResumeAll+0x7c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <xTaskResumeAll+0x124>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a27      	ldr	r2, [pc, #156]	; (8004988 <xTaskResumeAll+0x128>)
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe ffd7 	bl	80038a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b23      	ldr	r3, [pc, #140]	; (800498c <xTaskResumeAll+0x12c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <xTaskResumeAll+0x130>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <xTaskResumeAll+0x120>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1cb      	bne.n	80048ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800491a:	f000 fb5f 	bl	8004fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <xTaskResumeAll+0x134>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800492a:	f000 f847 	bl	80049bc <xTaskIncrementTick>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <xTaskResumeAll+0x130>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f1      	bne.n	800492a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <xTaskResumeAll+0x134>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <xTaskResumeAll+0x130>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <xTaskResumeAll+0x138>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004968:	f001 f8e4 	bl	8005b34 <vPortExitCritical>

	return xAlreadyYielded;
 800496c:	68bb      	ldr	r3, [r7, #8]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000d1c 	.word	0x20000d1c
 800497c:	20000cf4 	.word	0x20000cf4
 8004980:	20000cb4 	.word	0x20000cb4
 8004984:	20000cfc 	.word	0x20000cfc
 8004988:	20000824 	.word	0x20000824
 800498c:	20000820 	.word	0x20000820
 8004990:	20000d08 	.word	0x20000d08
 8004994:	20000d04 	.word	0x20000d04
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <xTaskGetTickCount+0x1c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049a8:	687b      	ldr	r3, [r7, #4]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000cf8 	.word	0x20000cf8

080049bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <xTaskIncrementTick+0x148>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 808f 	bne.w	8004aee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d0:	4b4d      	ldr	r3, [pc, #308]	; (8004b08 <xTaskIncrementTick+0x14c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049d8:	4a4b      	ldr	r2, [pc, #300]	; (8004b08 <xTaskIncrementTick+0x14c>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d120      	bne.n	8004a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049e4:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <xTaskIncrementTick+0x150>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	603b      	str	r3, [r7, #0]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <xTaskIncrementTick+0x46>
 8004a04:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <xTaskIncrementTick+0x150>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <xTaskIncrementTick+0x154>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3f      	ldr	r2, [pc, #252]	; (8004b0c <xTaskIncrementTick+0x150>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4a3f      	ldr	r2, [pc, #252]	; (8004b10 <xTaskIncrementTick+0x154>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	4a3d      	ldr	r2, [pc, #244]	; (8004b14 <xTaskIncrementTick+0x158>)
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	f000 fadb 	bl	8004fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a26:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <xTaskIncrementTick+0x15c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d349      	bcc.n	8004ac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a30:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <xTaskIncrementTick+0x150>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <xTaskIncrementTick+0x15c>)
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	601a      	str	r2, [r3, #0]
					break;
 8004a42:	e03f      	b.n	8004ac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <xTaskIncrementTick+0x150>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d203      	bcs.n	8004a64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <xTaskIncrementTick+0x15c>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a62:	e02f      	b.n	8004ac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe ff79 	bl	8003960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3318      	adds	r3, #24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe ff70 	bl	8003960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <xTaskIncrementTick+0x160>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d903      	bls.n	8004a94 <xTaskIncrementTick+0xd8>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <xTaskIncrementTick+0x160>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <xTaskIncrementTick+0x164>)
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fe fefb 	bl	80038a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <xTaskIncrementTick+0x168>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3b8      	bcc.n	8004a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac2:	e7b5      	b.n	8004a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <xTaskIncrementTick+0x168>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4915      	ldr	r1, [pc, #84]	; (8004b20 <xTaskIncrementTick+0x164>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d901      	bls.n	8004ae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ae0:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <xTaskIncrementTick+0x16c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e004      	b.n	8004af8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <xTaskIncrementTick+0x170>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	4a0d      	ldr	r2, [pc, #52]	; (8004b2c <xTaskIncrementTick+0x170>)
 8004af6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004af8:	697b      	ldr	r3, [r7, #20]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000d1c 	.word	0x20000d1c
 8004b08:	20000cf8 	.word	0x20000cf8
 8004b0c:	20000cac 	.word	0x20000cac
 8004b10:	20000cb0 	.word	0x20000cb0
 8004b14:	20000d0c 	.word	0x20000d0c
 8004b18:	20000d14 	.word	0x20000d14
 8004b1c:	20000cfc 	.word	0x20000cfc
 8004b20:	20000824 	.word	0x20000824
 8004b24:	20000820 	.word	0x20000820
 8004b28:	20000d08 	.word	0x20000d08
 8004b2c:	20000d04 	.word	0x20000d04

08004b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b3e:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <vTaskSwitchContext+0xb4>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b44:	e046      	b.n	8004bd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <vTaskSwitchContext+0xb4>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <vTaskSwitchContext+0xb8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e010      	b.n	8004b76 <vTaskSwitchContext+0x46>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vTaskSwitchContext+0x3e>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	491d      	ldr	r1, [pc, #116]	; (8004bec <vTaskSwitchContext+0xbc>)
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0e4      	beq.n	8004b54 <vTaskSwitchContext+0x24>
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <vTaskSwitchContext+0xbc>)
 8004b96:	4413      	add	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3308      	adds	r3, #8
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d104      	bne.n	8004bba <vTaskSwitchContext+0x8a>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <vTaskSwitchContext+0xc0>)
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <vTaskSwitchContext+0xb8>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <vTaskSwitchContext+0xc0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3354      	adds	r3, #84	; 0x54
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <vTaskSwitchContext+0xc4>)
 8004bd2:	6013      	str	r3, [r2, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000d1c 	.word	0x20000d1c
 8004be4:	20000d08 	.word	0x20000d08
 8004be8:	20000cfc 	.word	0x20000cfc
 8004bec:	20000824 	.word	0x20000824
 8004bf0:	20000820 	.word	0x20000820
 8004bf4:	20000024 	.word	0x20000024

08004bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c1e:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <vTaskPlaceOnEventList+0x44>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3318      	adds	r3, #24
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fe fe61 	bl	80038ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	6838      	ldr	r0, [r7, #0]
 8004c30:	f000 fa80 	bl	8005134 <prvAddCurrentTaskToDelayedList>
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000820 	.word	0x20000820

08004c40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	617b      	str	r3, [r7, #20]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7fe fe18 	bl	80038a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	68b8      	ldr	r0, [r7, #8]
 8004c86:	f000 fa55 	bl	8005134 <prvAddCurrentTaskToDelayedList>
	}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000820 	.word	0x20000820

08004c98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	60fb      	str	r3, [r7, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	e7fe      	b.n	8004cc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fe49 	bl	8003960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <xTaskRemoveFromEventList+0xb0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fe40 	bl	8003960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <xTaskRemoveFromEventList+0xb4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d903      	bls.n	8004cf4 <xTaskRemoveFromEventList+0x5c>
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <xTaskRemoveFromEventList+0xb4>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <xTaskRemoveFromEventList+0xb8>)
 8004d02:	441a      	add	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fe fdcb 	bl	80038a6 <vListInsertEnd>
 8004d10:	e005      	b.n	8004d1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	3318      	adds	r3, #24
 8004d16:	4619      	mov	r1, r3
 8004d18:	480e      	ldr	r0, [pc, #56]	; (8004d54 <xTaskRemoveFromEventList+0xbc>)
 8004d1a:	f7fe fdc4 	bl	80038a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <xTaskRemoveFromEventList+0xc0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d905      	bls.n	8004d38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <xTaskRemoveFromEventList+0xc4>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e001      	b.n	8004d3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d3c:	697b      	ldr	r3, [r7, #20]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000d1c 	.word	0x20000d1c
 8004d4c:	20000cfc 	.word	0x20000cfc
 8004d50:	20000824 	.word	0x20000824
 8004d54:	20000cb4 	.word	0x20000cb4
 8004d58:	20000820 	.word	0x20000820
 8004d5c:	20000d08 	.word	0x20000d08

08004d60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <vTaskInternalSetTimeOutState+0x24>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <vTaskInternalSetTimeOutState+0x28>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	20000d0c 	.word	0x20000d0c
 8004d88:	20000cf8 	.word	0x20000cf8

08004d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	613b      	str	r3, [r7, #16]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	60fb      	str	r3, [r7, #12]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dce:	f000 fe81 	bl	8005ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <xTaskCheckForTimeOut+0xbc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d102      	bne.n	8004df2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e023      	b.n	8004e3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <xTaskCheckForTimeOut+0xc0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d007      	beq.n	8004e0e <xTaskCheckForTimeOut+0x82>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e015      	b.n	8004e3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d20b      	bcs.n	8004e30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff9b 	bl	8004d60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e004      	b.n	8004e3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f000 fe7b 	bl	8005b34 <vPortExitCritical>

	return xReturn;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000cf8 	.word	0x20000cf8
 8004e4c:	20000d0c 	.word	0x20000d0c

08004e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <vTaskMissedYield+0x14>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	20000d08 	.word	0x20000d08

08004e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e70:	f000 f852 	bl	8004f18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <prvIdleTask+0x28>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d9f9      	bls.n	8004e70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <prvIdleTask+0x2c>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e8c:	e7f0      	b.n	8004e70 <prvIdleTask+0x8>
 8004e8e:	bf00      	nop
 8004e90:	20000824 	.word	0x20000824
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e00c      	b.n	8004ebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <prvInitialiseTaskLists+0x60>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fcca 	bl	800384c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b37      	cmp	r3, #55	; 0x37
 8004ec2:	d9ef      	bls.n	8004ea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ec4:	480d      	ldr	r0, [pc, #52]	; (8004efc <prvInitialiseTaskLists+0x64>)
 8004ec6:	f7fe fcc1 	bl	800384c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eca:	480d      	ldr	r0, [pc, #52]	; (8004f00 <prvInitialiseTaskLists+0x68>)
 8004ecc:	f7fe fcbe 	bl	800384c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ed0:	480c      	ldr	r0, [pc, #48]	; (8004f04 <prvInitialiseTaskLists+0x6c>)
 8004ed2:	f7fe fcbb 	bl	800384c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ed6:	480c      	ldr	r0, [pc, #48]	; (8004f08 <prvInitialiseTaskLists+0x70>)
 8004ed8:	f7fe fcb8 	bl	800384c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004edc:	480b      	ldr	r0, [pc, #44]	; (8004f0c <prvInitialiseTaskLists+0x74>)
 8004ede:	f7fe fcb5 	bl	800384c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvInitialiseTaskLists+0x78>)
 8004ee4:	4a05      	ldr	r2, [pc, #20]	; (8004efc <prvInitialiseTaskLists+0x64>)
 8004ee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <prvInitialiseTaskLists+0x7c>)
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <prvInitialiseTaskLists+0x68>)
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000824 	.word	0x20000824
 8004efc:	20000c84 	.word	0x20000c84
 8004f00:	20000c98 	.word	0x20000c98
 8004f04:	20000cb4 	.word	0x20000cb4
 8004f08:	20000cc8 	.word	0x20000cc8
 8004f0c:	20000ce0 	.word	0x20000ce0
 8004f10:	20000cac 	.word	0x20000cac
 8004f14:	20000cb0 	.word	0x20000cb0

08004f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f1e:	e019      	b.n	8004f54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f20:	f000 fdd8 	bl	8005ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <prvCheckTasksWaitingTermination+0x50>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fd15 	bl	8003960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f4a:	f000 fdf3 	bl	8005b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f810 	bl	8004f74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e1      	bne.n	8004f20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000cc8 	.word	0x20000cc8
 8004f6c:	20000cf4 	.word	0x20000cf4
 8004f70:	20000cdc 	.word	0x20000cdc

08004f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3354      	adds	r3, #84	; 0x54
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f8fd 	bl	8006180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 ff8b 	bl	8005eb0 <vPortFree>
				vPortFree( pxTCB );
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 ff88 	bl	8005eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fa0:	e018      	b.n	8004fd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d103      	bne.n	8004fb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 ff7f 	bl	8005eb0 <vPortFree>
	}
 8004fb2:	e00f      	b.n	8004fd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d00a      	beq.n	8004fd4 <prvDeleteTCB+0x60>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvDeleteTCB+0x5e>
	}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <prvResetNextTaskUnblockTime+0x38>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvResetNextTaskUnblockTime+0x3c>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ff4:	e008      	b.n	8005008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <prvResetNextTaskUnblockTime+0x38>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	4a04      	ldr	r2, [pc, #16]	; (8005018 <prvResetNextTaskUnblockTime+0x3c>)
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	20000cac 	.word	0x20000cac
 8005018:	20000d14 	.word	0x20000d14

0800501c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <xTaskGetSchedulerState+0x34>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800502a:	2301      	movs	r3, #1
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	e008      	b.n	8005042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005030:	4b08      	ldr	r3, [pc, #32]	; (8005054 <xTaskGetSchedulerState+0x38>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005038:	2302      	movs	r3, #2
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	e001      	b.n	8005042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005042:	687b      	ldr	r3, [r7, #4]
	}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	20000d00 	.word	0x20000d00
 8005054:	20000d1c 	.word	0x20000d1c

08005058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d056      	beq.n	800511c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800506e:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <xTaskPriorityDisinherit+0xd0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d00a      	beq.n	800508e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	60fb      	str	r3, [r7, #12]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d02c      	beq.n	800511c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d128      	bne.n	800511c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fc46 	bl	8003960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <xTaskPriorityDisinherit+0xd4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <xTaskPriorityDisinherit+0xa4>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4a0c      	ldr	r2, [pc, #48]	; (800512c <xTaskPriorityDisinherit+0xd4>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <xTaskPriorityDisinherit+0xd8>)
 800510a:	441a      	add	r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fe fbc7 	bl	80038a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800511c:	697b      	ldr	r3, [r7, #20]
	}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000820 	.word	0x20000820
 800512c:	20000cfc 	.word	0x20000cfc
 8005130:	20000824 	.word	0x20000824

08005134 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005144:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fc08 	bl	8003960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d10a      	bne.n	800516e <prvAddCurrentTaskToDelayedList+0x3a>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515e:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4819      	ldr	r0, [pc, #100]	; (80051cc <prvAddCurrentTaskToDelayedList+0x98>)
 8005168:	f7fe fb9d 	bl	80038a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800516c:	e026      	b.n	80051bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	429a      	cmp	r2, r3
 8005184:	d209      	bcs.n	800519a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fe fbab 	bl	80038ee <vListInsert>
}
 8005198:	e010      	b.n	80051bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7fe fba1 	bl	80038ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d202      	bcs.n	80051bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6013      	str	r3, [r2, #0]
}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000cf8 	.word	0x20000cf8
 80051c8:	20000820 	.word	0x20000820
 80051cc:	20000ce0 	.word	0x20000ce0
 80051d0:	20000cb0 	.word	0x20000cb0
 80051d4:	20000cac 	.word	0x20000cac
 80051d8:	20000d14 	.word	0x20000d14

080051dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051e6:	f000 fb07 	bl	80057f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <xTimerCreateTimerTask+0x80>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d021      	beq.n	8005236 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051fa:	1d3a      	adds	r2, r7, #4
 80051fc:	f107 0108 	add.w	r1, r7, #8
 8005200:	f107 030c 	add.w	r3, r7, #12
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fb07 	bl	8003818 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	9202      	str	r2, [sp, #8]
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	2302      	movs	r3, #2
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2300      	movs	r3, #0
 800521a:	460a      	mov	r2, r1
 800521c:	4910      	ldr	r1, [pc, #64]	; (8005260 <xTimerCreateTimerTask+0x84>)
 800521e:	4811      	ldr	r0, [pc, #68]	; (8005264 <xTimerCreateTimerTask+0x88>)
 8005220:	f7ff f8b4 	bl	800438c <xTaskCreateStatic>
 8005224:	4603      	mov	r3, r0
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <xTimerCreateTimerTask+0x8c>)
 8005228:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <xTimerCreateTimerTask+0x8c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	613b      	str	r3, [r7, #16]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000d50 	.word	0x20000d50
 8005260:	0800632c 	.word	0x0800632c
 8005264:	080053a1 	.word	0x080053a1
 8005268:	20000d54 	.word	0x20000d54

0800526c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800529a:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <xTimerGenericCommand+0x98>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02a      	beq.n	80052f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	dc18      	bgt.n	80052e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052b4:	f7ff feb2 	bl	800501c <xTaskGetSchedulerState>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d109      	bne.n	80052d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <xTimerGenericCommand+0x98>)
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	f107 0110 	add.w	r1, r7, #16
 80052c6:	2300      	movs	r3, #0
 80052c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ca:	f7fe fc77 	bl	8003bbc <xQueueGenericSend>
 80052ce:	6278      	str	r0, [r7, #36]	; 0x24
 80052d0:	e012      	b.n	80052f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <xTimerGenericCommand+0x98>)
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f107 0110 	add.w	r1, r7, #16
 80052da:	2300      	movs	r3, #0
 80052dc:	2200      	movs	r2, #0
 80052de:	f7fe fc6d 	bl	8003bbc <xQueueGenericSend>
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24
 80052e4:	e008      	b.n	80052f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <xTimerGenericCommand+0x98>)
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	f107 0110 	add.w	r1, r7, #16
 80052ee:	2300      	movs	r3, #0
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	f7fe fd61 	bl	8003db8 <xQueueGenericSendFromISR>
 80052f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3728      	adds	r7, #40	; 0x28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000d50 	.word	0x20000d50

08005308 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <prvProcessExpiredTimer+0x94>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3304      	adds	r3, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe fb1d 	bl	8003960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d022      	beq.n	800537a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	18d1      	adds	r1, r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f000 f8d1 	bl	80054e8 <prvInsertTimerInActiveList>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01f      	beq.n	800538c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800534c:	2300      	movs	r3, #0
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2300      	movs	r3, #0
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	2100      	movs	r1, #0
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7ff ff88 	bl	800526c <xTimerGenericCommand>
 800535c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	6978      	ldr	r0, [r7, #20]
 8005392:	4798      	blx	r3
}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000d48 	.word	0x20000d48

080053a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f857 	bl	8005460 <prvGetNextExpireTime>
 80053b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4619      	mov	r1, r3
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f803 	bl	80053c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053be:	f000 f8d5 	bl	800556c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c2:	e7f1      	b.n	80053a8 <prvTimerTask+0x8>

080053c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053ce:	f7ff fa39 	bl	8004844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f866 	bl	80054a8 <prvSampleTimeNow>
 80053dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d130      	bne.n	8005446 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <prvProcessTimerOrBlockTask+0x3c>
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d806      	bhi.n	8005400 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053f2:	f7ff fa35 	bl	8004860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff ff85 	bl	8005308 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053fe:	e024      	b.n	800544a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005406:	4b13      	ldr	r3, [pc, #76]	; (8005454 <prvProcessTimerOrBlockTask+0x90>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <prvProcessTimerOrBlockTask+0x50>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <prvProcessTimerOrBlockTask+0x52>
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <prvProcessTimerOrBlockTask+0x94>)
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	f7fe ff7d 	bl	8004324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800542a:	f7ff fa19 	bl	8004860 <xTaskResumeAll>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <prvProcessTimerOrBlockTask+0x98>)
 8005436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
}
 8005444:	e001      	b.n	800544a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005446:	f7ff fa0b 	bl	8004860 <xTaskResumeAll>
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000d4c 	.word	0x20000d4c
 8005458:	20000d50 	.word	0x20000d50
 800545c:	e000ed04 	.word	0xe000ed04

08005460 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005468:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <prvGetNextExpireTime+0x44>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <prvGetNextExpireTime+0x16>
 8005472:	2201      	movs	r2, #1
 8005474:	e000      	b.n	8005478 <prvGetNextExpireTime+0x18>
 8005476:	2200      	movs	r2, #0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <prvGetNextExpireTime+0x44>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e001      	b.n	8005494 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005494:	68fb      	ldr	r3, [r7, #12]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000d48 	.word	0x20000d48

080054a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054b0:	f7ff fa74 	bl	800499c <xTaskGetTickCount>
 80054b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <prvSampleTimeNow+0x3c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d205      	bcs.n	80054cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054c0:	f000 f936 	bl	8005730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054d2:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <prvSampleTimeNow+0x3c>)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054d8:	68fb      	ldr	r3, [r7, #12]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000d58 	.word	0x20000d58

080054e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d812      	bhi.n	8005534 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	429a      	cmp	r2, r3
 800551a:	d302      	bcc.n	8005522 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e01b      	b.n	800555a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005522:	4b10      	ldr	r3, [pc, #64]	; (8005564 <prvInsertTimerInActiveList+0x7c>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3304      	adds	r3, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f7fe f9de 	bl	80038ee <vListInsert>
 8005532:	e012      	b.n	800555a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d206      	bcs.n	800554a <prvInsertTimerInActiveList+0x62>
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e007      	b.n	800555a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <prvInsertTimerInActiveList+0x80>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7fe f9ca 	bl	80038ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800555a:	697b      	ldr	r3, [r7, #20]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000d4c 	.word	0x20000d4c
 8005568:	20000d48 	.word	0x20000d48

0800556c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005572:	e0ca      	b.n	800570a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da18      	bge.n	80055ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800557a:	1d3b      	adds	r3, r7, #4
 800557c:	3304      	adds	r3, #4
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	61fb      	str	r3, [r7, #28]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a2:	6850      	ldr	r0, [r2, #4]
 80055a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a6:	6892      	ldr	r2, [r2, #8]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f2c0 80aa 	blt.w	8005708 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d004      	beq.n	80055ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	3304      	adds	r3, #4
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe f9cb 	bl	8003960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ca:	463b      	mov	r3, r7
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff ff6b 	bl	80054a8 <prvSampleTimeNow>
 80055d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	f200 8097 	bhi.w	800570a <prvProcessReceivedCommands+0x19e>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <prvProcessReceivedCommands+0x78>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005681 	.word	0x08005681
 80055f4:	08005695 	.word	0x08005695
 80055f8:	080056df 	.word	0x080056df
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	0800560d 	.word	0x0800560d
 8005604:	08005681 	.word	0x08005681
 8005608:	08005695 	.word	0x08005695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	18d1      	adds	r1, r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562c:	f7ff ff5c 	bl	80054e8 <prvInsertTimerInActiveList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d069      	beq.n	800570a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05e      	beq.n	800570a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	441a      	add	r2, r3
 8005654:	2300      	movs	r3, #0
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2300      	movs	r3, #0
 800565a:	2100      	movs	r1, #0
 800565c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565e:	f7ff fe05 	bl	800526c <xTimerGenericCommand>
 8005662:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d14f      	bne.n	800570a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	61bb      	str	r3, [r7, #24]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005692:	e03a      	b.n	800570a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	617b      	str	r3, [r7, #20]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	18d1      	adds	r1, r2, r3
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d8:	f7ff ff06 	bl	80054e8 <prvInsertTimerInActiveList>
					break;
 80056dc:	e015      	b.n	800570a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80056ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ee:	f000 fbdf 	bl	8005eb0 <vPortFree>
 80056f2:	e00a      	b.n	800570a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005706:	e000      	b.n	800570a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005708:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <prvProcessReceivedCommands+0x1c0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1d39      	adds	r1, r7, #4
 8005710:	2200      	movs	r2, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fbec 	bl	8003ef0 <xQueueReceive>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	f47f af2a 	bne.w	8005574 <prvProcessReceivedCommands+0x8>
	}
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	3730      	adds	r7, #48	; 0x30
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000d50 	.word	0x20000d50

08005730 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005736:	e048      	b.n	80057ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005738:	4b2d      	ldr	r3, [pc, #180]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe f905 	bl	8003960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d02e      	beq.n	80057ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d90e      	bls.n	800579c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800578a:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe f8aa 	bl	80038ee <vListInsert>
 800579a:	e016      	b.n	80057ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800579c:	2300      	movs	r3, #0
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2300      	movs	r3, #0
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	2100      	movs	r1, #0
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff fd60 	bl	800526c <xTimerGenericCommand>
 80057ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	603b      	str	r3, [r7, #0]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1b1      	bne.n	8005738 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <prvSwitchTimerLists+0xc4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <prvSwitchTimerLists+0xc0>)
 80057e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057e2:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <prvSwitchTimerLists+0xc4>)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6013      	str	r3, [r2, #0]
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000d48 	.word	0x20000d48
 80057f4:	20000d4c 	.word	0x20000d4c

080057f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057fe:	f000 f969 	bl	8005ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <prvCheckForValidListAndQueue+0x60>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d120      	bne.n	800584c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800580a:	4814      	ldr	r0, [pc, #80]	; (800585c <prvCheckForValidListAndQueue+0x64>)
 800580c:	f7fe f81e 	bl	800384c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005810:	4813      	ldr	r0, [pc, #76]	; (8005860 <prvCheckForValidListAndQueue+0x68>)
 8005812:	f7fe f81b 	bl	800384c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <prvCheckForValidListAndQueue+0x6c>)
 8005818:	4a10      	ldr	r2, [pc, #64]	; (800585c <prvCheckForValidListAndQueue+0x64>)
 800581a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <prvCheckForValidListAndQueue+0x70>)
 800581e:	4a10      	ldr	r2, [pc, #64]	; (8005860 <prvCheckForValidListAndQueue+0x68>)
 8005820:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005822:	2300      	movs	r3, #0
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <prvCheckForValidListAndQueue+0x74>)
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <prvCheckForValidListAndQueue+0x78>)
 800582a:	2110      	movs	r1, #16
 800582c:	200a      	movs	r0, #10
 800582e:	f7fe f929 	bl	8003a84 <xQueueGenericCreateStatic>
 8005832:	4603      	mov	r3, r0
 8005834:	4a08      	ldr	r2, [pc, #32]	; (8005858 <prvCheckForValidListAndQueue+0x60>)
 8005836:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005838:	4b07      	ldr	r3, [pc, #28]	; (8005858 <prvCheckForValidListAndQueue+0x60>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <prvCheckForValidListAndQueue+0x60>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	490b      	ldr	r1, [pc, #44]	; (8005874 <prvCheckForValidListAndQueue+0x7c>)
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fd42 	bl	80042d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800584c:	f000 f972 	bl	8005b34 <vPortExitCritical>
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000d50 	.word	0x20000d50
 800585c:	20000d20 	.word	0x20000d20
 8005860:	20000d34 	.word	0x20000d34
 8005864:	20000d48 	.word	0x20000d48
 8005868:	20000d4c 	.word	0x20000d4c
 800586c:	20000dfc 	.word	0x20000dfc
 8005870:	20000d5c 	.word	0x20000d5c
 8005874:	08006334 	.word	0x08006334

08005878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b04      	subs	r3, #4
 8005888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b04      	subs	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058a8:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <pxPortInitialiseStack+0x64>)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b14      	subs	r3, #20
 80058b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b04      	subs	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f06f 0202 	mvn.w	r2, #2
 80058c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b20      	subs	r3, #32
 80058cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	080058e1 	.word	0x080058e1

080058e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <prvTaskExitError+0x54>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d00a      	beq.n	800590a <prvTaskExitError+0x2a>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <prvTaskExitError+0x28>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	60bb      	str	r3, [r7, #8]
}
 800591c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800591e:	bf00      	nop
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0fc      	beq.n	8005920 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	20000020 	.word	0x20000020
	...

08005940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <pxCurrentTCBConst2>)
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	6808      	ldr	r0, [r1, #0]
 8005946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	f380 8809 	msr	PSP, r0
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8811 	msr	BASEPRI, r0
 800595a:	4770      	bx	lr
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst2>:
 8005960:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005968:	4808      	ldr	r0, [pc, #32]	; (800598c <prvPortStartFirstTask+0x24>)
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f380 8808 	msr	MSP, r0
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8814 	msr	CONTROL, r0
 800597a:	b662      	cpsie	i
 800597c:	b661      	cpsie	f
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	df00      	svc	0
 8005988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800598a:	bf00      	nop
 800598c:	e000ed08 	.word	0xe000ed08

08005990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005996:	4b46      	ldr	r3, [pc, #280]	; (8005ab0 <xPortStartScheduler+0x120>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a46      	ldr	r2, [pc, #280]	; (8005ab4 <xPortStartScheduler+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10a      	bne.n	80059b6 <xPortStartScheduler+0x26>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059b6:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <xPortStartScheduler+0x120>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3f      	ldr	r2, [pc, #252]	; (8005ab8 <xPortStartScheduler+0x128>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d10a      	bne.n	80059d6 <xPortStartScheduler+0x46>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	60fb      	str	r3, [r7, #12]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059d6:	4b39      	ldr	r3, [pc, #228]	; (8005abc <xPortStartScheduler+0x12c>)
 80059d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	22ff      	movs	r2, #255	; 0xff
 80059e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <xPortStartScheduler+0x130>)
 80059fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059fe:	4b31      	ldr	r3, [pc, #196]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a00:	2207      	movs	r2, #7
 8005a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a04:	e009      	b.n	8005a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a06:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d0ef      	beq.n	8005a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a26:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1c3 0307 	rsb	r3, r3, #7
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d00a      	beq.n	8005a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60bb      	str	r3, [r7, #8]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a48:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a7e:	f000 f8dd 	bl	8005c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <xPortStartScheduler+0x13c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a88:	f000 f8fc 	bl	8005c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a8c:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <xPortStartScheduler+0x140>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0f      	ldr	r2, [pc, #60]	; (8005ad0 <xPortStartScheduler+0x140>)
 8005a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a98:	f7ff ff66 	bl	8005968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a9c:	f7ff f848 	bl	8004b30 <vTaskSwitchContext>
	prvTaskExitError();
 8005aa0:	f7ff ff1e 	bl	80058e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000ed00 	.word	0xe000ed00
 8005ab4:	410fc271 	.word	0x410fc271
 8005ab8:	410fc270 	.word	0x410fc270
 8005abc:	e000e400 	.word	0xe000e400
 8005ac0:	20000e4c 	.word	0x20000e4c
 8005ac4:	20000e50 	.word	0x20000e50
 8005ac8:	e000ed20 	.word	0xe000ed20
 8005acc:	20000020 	.word	0x20000020
 8005ad0:	e000ef34 	.word	0xe000ef34

08005ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	607b      	str	r3, [r7, #4]
}
 8005aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <vPortEnterCritical+0x58>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <vPortEnterCritical+0x58>)
 8005af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <vPortEnterCritical+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10f      	bne.n	8005b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <vPortEnterCritical+0x5c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	603b      	str	r3, [r7, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <vPortEnterCritical+0x4a>
	}
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000020 	.word	0x20000020
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <vPortExitCritical+0x50>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <vPortExitCritical+0x24>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	607b      	str	r3, [r7, #4]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b58:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <vPortExitCritical+0x50>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <vPortExitCritical+0x50>)
 8005b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <vPortExitCritical+0x50>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <vPortExitCritical+0x42>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	f383 8811 	msr	BASEPRI, r3
}
 8005b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000020 	.word	0x20000020
	...

08005b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b90:	f3ef 8009 	mrs	r0, PSP
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <pxCurrentTCBConst>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f01e 0f10 	tst.w	lr, #16
 8005ba0:	bf08      	it	eq
 8005ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bb4:	f380 8811 	msr	BASEPRI, r0
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f7fe ffb6 	bl	8004b30 <vTaskSwitchContext>
 8005bc4:	f04f 0000 	mov.w	r0, #0
 8005bc8:	f380 8811 	msr	BASEPRI, r0
 8005bcc:	bc09      	pop	{r0, r3}
 8005bce:	6819      	ldr	r1, [r3, #0]
 8005bd0:	6808      	ldr	r0, [r1, #0]
 8005bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd6:	f01e 0f10 	tst.w	lr, #16
 8005bda:	bf08      	it	eq
 8005bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005be0:	f380 8809 	msr	PSP, r0
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w

08005bf0 <pxCurrentTCBConst>:
 8005bf0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop

08005bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
}
 8005c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c12:	f7fe fed3 	bl	80049bc <xTaskIncrementTick>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <xPortSysTickHandler+0x40>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f383 8811 	msr	BASEPRI, r3
}
 8005c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortSetupTimerInterrupt+0x34>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <vPortSetupTimerInterrupt+0x38>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <vPortSetupTimerInterrupt+0x3c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <vPortSetupTimerInterrupt+0x40>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <vPortSetupTimerInterrupt+0x44>)
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <vPortSetupTimerInterrupt+0x34>)
 8005c60:	2207      	movs	r2, #7
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000e010 	.word	0xe000e010
 8005c74:	e000e018 	.word	0xe000e018
 8005c78:	20000014 	.word	0x20000014
 8005c7c:	10624dd3 	.word	0x10624dd3
 8005c80:	e000e014 	.word	0xe000e014

08005c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c94 <vPortEnableVFP+0x10>
 8005c88:	6801      	ldr	r1, [r0, #0]
 8005c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c8e:	6001      	str	r1, [r0, #0]
 8005c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c92:	bf00      	nop
 8005c94:	e000ed88 	.word	0xe000ed88

08005c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c9e:	f3ef 8305 	mrs	r3, IPSR
 8005ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d914      	bls.n	8005cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <vPortValidateInterruptPriority+0x70>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005cb4:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <vPortValidateInterruptPriority+0x74>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	7afa      	ldrb	r2, [r7, #11]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d20a      	bcs.n	8005cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <vPortValidateInterruptPriority+0x78>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <vPortValidateInterruptPriority+0x7c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d90a      	bls.n	8005cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	603b      	str	r3, [r7, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <vPortValidateInterruptPriority+0x60>
	}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	e000e3f0 	.word	0xe000e3f0
 8005d0c:	20000e4c 	.word	0x20000e4c
 8005d10:	e000ed0c 	.word	0xe000ed0c
 8005d14:	20000e50 	.word	0x20000e50

08005d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	; 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d24:	f7fe fd8e 	bl	8004844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d28:	4b5b      	ldr	r3, [pc, #364]	; (8005e98 <pvPortMalloc+0x180>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d30:	f000 f920 	bl	8005f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d34:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <pvPortMalloc+0x184>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 8093 	bne.w	8005e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01d      	beq.n	8005d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d48:	2208      	movs	r2, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d014      	beq.n	8005d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	3308      	adds	r3, #8
 8005d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <pvPortMalloc+0x6c>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	617b      	str	r3, [r7, #20]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d06e      	beq.n	8005e68 <pvPortMalloc+0x150>
 8005d8a:	4b45      	ldr	r3, [pc, #276]	; (8005ea0 <pvPortMalloc+0x188>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d869      	bhi.n	8005e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d94:	4b43      	ldr	r3, [pc, #268]	; (8005ea4 <pvPortMalloc+0x18c>)
 8005d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d98:	4b42      	ldr	r3, [pc, #264]	; (8005ea4 <pvPortMalloc+0x18c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d9e:	e004      	b.n	8005daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d903      	bls.n	8005dbc <pvPortMalloc+0xa4>
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f1      	bne.n	8005da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dbc:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <pvPortMalloc+0x180>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d050      	beq.n	8005e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2208      	movs	r2, #8
 8005dcc:	4413      	add	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	2308      	movs	r3, #8
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d91f      	bls.n	8005e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <pvPortMalloc+0xf8>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	613b      	str	r3, [r7, #16]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	1ad2      	subs	r2, r2, r3
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e22:	69b8      	ldr	r0, [r7, #24]
 8005e24:	f000 f908 	bl	8006038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e28:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <pvPortMalloc+0x188>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <pvPortMalloc+0x188>)
 8005e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <pvPortMalloc+0x188>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <pvPortMalloc+0x190>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d203      	bcs.n	8005e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e42:	4b17      	ldr	r3, [pc, #92]	; (8005ea0 <pvPortMalloc+0x188>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <pvPortMalloc+0x190>)
 8005e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <pvPortMalloc+0x184>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <pvPortMalloc+0x194>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <pvPortMalloc+0x194>)
 8005e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e68:	f7fe fcfa 	bl	8004860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <pvPortMalloc+0x174>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60fb      	str	r3, [r7, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <pvPortMalloc+0x172>
	return pvReturn;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3728      	adds	r7, #40	; 0x28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20004a5c 	.word	0x20004a5c
 8005e9c:	20004a70 	.word	0x20004a70
 8005ea0:	20004a60 	.word	0x20004a60
 8005ea4:	20004a54 	.word	0x20004a54
 8005ea8:	20004a64 	.word	0x20004a64
 8005eac:	20004a68 	.word	0x20004a68

08005eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04d      	beq.n	8005f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	425b      	negs	r3, r3
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4413      	add	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <vPortFree+0xb8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <vPortFree+0x44>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60fb      	str	r3, [r7, #12]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <vPortFree+0x62>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60bb      	str	r3, [r7, #8]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <vPortFree+0xb8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01e      	beq.n	8005f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11a      	bne.n	8005f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	4b0e      	ldr	r3, [pc, #56]	; (8005f68 <vPortFree+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f38:	f7fe fc84 	bl	8004844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <vPortFree+0xbc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <vPortFree+0xbc>)
 8005f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f000 f874 	bl	8006038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <vPortFree+0xc0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	4a06      	ldr	r2, [pc, #24]	; (8005f70 <vPortFree+0xc0>)
 8005f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f5a:	f7fe fc81 	bl	8004860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20004a70 	.word	0x20004a70
 8005f6c:	20004a60 	.word	0x20004a60
 8005f70:	20004a6c 	.word	0x20004a6c

08005f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f80:	4b27      	ldr	r3, [pc, #156]	; (8006020 <prvHeapInit+0xac>)
 8005f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3307      	adds	r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0307 	bic.w	r3, r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <prvHeapInit+0xac>)
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <prvHeapInit+0xb0>)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fb2:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <prvHeapInit+0xb0>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0307 	bic.w	r3, r3, #7
 8005fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <prvHeapInit+0xb4>)
 8005fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <prvHeapInit+0xb4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fde:	4b12      	ldr	r3, [pc, #72]	; (8006028 <prvHeapInit+0xb4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <prvHeapInit+0xb4>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	4a0a      	ldr	r2, [pc, #40]	; (800602c <prvHeapInit+0xb8>)
 8006002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <prvHeapInit+0xbc>)
 800600a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <prvHeapInit+0xc0>)
 800600e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20000e54 	.word	0x20000e54
 8006024:	20004a54 	.word	0x20004a54
 8006028:	20004a5c 	.word	0x20004a5c
 800602c:	20004a64 	.word	0x20004a64
 8006030:	20004a60 	.word	0x20004a60
 8006034:	20004a70 	.word	0x20004a70

08006038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006040:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <prvInsertBlockIntoFreeList+0xac>)
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e002      	b.n	800604c <prvInsertBlockIntoFreeList+0x14>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d8f7      	bhi.n	8006046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d108      	bne.n	800607a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	441a      	add	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	441a      	add	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d118      	bne.n	80060c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00d      	beq.n	80060b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	441a      	add	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e008      	b.n	80060c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <prvInsertBlockIntoFreeList+0xb0>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e003      	b.n	80060c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d002      	beq.n	80060d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20004a54 	.word	0x20004a54
 80060e8:	20004a5c 	.word	0x20004a5c

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4d0d      	ldr	r5, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2600      	movs	r6, #0
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4d0b      	ldr	r5, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 f8f6 	bl	80062f0 <_init>
 8006104:	1b64      	subs	r4, r4, r5
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2600      	movs	r6, #0
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f855 3b04 	ldr.w	r3, [r5], #4
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f855 3b04 	ldr.w	r3, [r5], #4
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	0800640c 	.word	0x0800640c
 8006128:	0800640c 	.word	0x0800640c
 800612c:	0800640c 	.word	0x0800640c
 8006130:	08006410 	.word	0x08006410

08006134 <__retarget_lock_acquire_recursive>:
 8006134:	4770      	bx	lr

08006136 <__retarget_lock_release_recursive>:
 8006136:	4770      	bx	lr

08006138 <memcpy>:
 8006138:	440a      	add	r2, r1
 800613a:	4291      	cmp	r1, r2
 800613c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006140:	d100      	bne.n	8006144 <memcpy+0xc>
 8006142:	4770      	bx	lr
 8006144:	b510      	push	{r4, lr}
 8006146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800614a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614e:	4291      	cmp	r1, r2
 8006150:	d1f9      	bne.n	8006146 <memcpy+0xe>
 8006152:	bd10      	pop	{r4, pc}

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <cleanup_glue>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	460c      	mov	r4, r1
 8006168:	6809      	ldr	r1, [r1, #0]
 800616a:	4605      	mov	r5, r0
 800616c:	b109      	cbz	r1, 8006172 <cleanup_glue+0xe>
 800616e:	f7ff fff9 	bl	8006164 <cleanup_glue>
 8006172:	4621      	mov	r1, r4
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800617a:	f000 b869 	b.w	8006250 <_free_r>
	...

08006180 <_reclaim_reent>:
 8006180:	4b2c      	ldr	r3, [pc, #176]	; (8006234 <_reclaim_reent+0xb4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4283      	cmp	r3, r0
 8006186:	b570      	push	{r4, r5, r6, lr}
 8006188:	4604      	mov	r4, r0
 800618a:	d051      	beq.n	8006230 <_reclaim_reent+0xb0>
 800618c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800618e:	b143      	cbz	r3, 80061a2 <_reclaim_reent+0x22>
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d14a      	bne.n	800622c <_reclaim_reent+0xac>
 8006196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006198:	6819      	ldr	r1, [r3, #0]
 800619a:	b111      	cbz	r1, 80061a2 <_reclaim_reent+0x22>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f857 	bl	8006250 <_free_r>
 80061a2:	6961      	ldr	r1, [r4, #20]
 80061a4:	b111      	cbz	r1, 80061ac <_reclaim_reent+0x2c>
 80061a6:	4620      	mov	r0, r4
 80061a8:	f000 f852 	bl	8006250 <_free_r>
 80061ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80061ae:	b111      	cbz	r1, 80061b6 <_reclaim_reent+0x36>
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 f84d 	bl	8006250 <_free_r>
 80061b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061b8:	b111      	cbz	r1, 80061c0 <_reclaim_reent+0x40>
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f848 	bl	8006250 <_free_r>
 80061c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80061c2:	b111      	cbz	r1, 80061ca <_reclaim_reent+0x4a>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 f843 	bl	8006250 <_free_r>
 80061ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80061cc:	b111      	cbz	r1, 80061d4 <_reclaim_reent+0x54>
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f83e 	bl	8006250 <_free_r>
 80061d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80061d6:	b111      	cbz	r1, 80061de <_reclaim_reent+0x5e>
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 f839 	bl	8006250 <_free_r>
 80061de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80061e0:	b111      	cbz	r1, 80061e8 <_reclaim_reent+0x68>
 80061e2:	4620      	mov	r0, r4
 80061e4:	f000 f834 	bl	8006250 <_free_r>
 80061e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ea:	b111      	cbz	r1, 80061f2 <_reclaim_reent+0x72>
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f82f 	bl	8006250 <_free_r>
 80061f2:	69a3      	ldr	r3, [r4, #24]
 80061f4:	b1e3      	cbz	r3, 8006230 <_reclaim_reent+0xb0>
 80061f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061f8:	4620      	mov	r0, r4
 80061fa:	4798      	blx	r3
 80061fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061fe:	b1b9      	cbz	r1, 8006230 <_reclaim_reent+0xb0>
 8006200:	4620      	mov	r0, r4
 8006202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006206:	f7ff bfad 	b.w	8006164 <cleanup_glue>
 800620a:	5949      	ldr	r1, [r1, r5]
 800620c:	b941      	cbnz	r1, 8006220 <_reclaim_reent+0xa0>
 800620e:	3504      	adds	r5, #4
 8006210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006212:	2d80      	cmp	r5, #128	; 0x80
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	d1f8      	bne.n	800620a <_reclaim_reent+0x8a>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f819 	bl	8006250 <_free_r>
 800621e:	e7ba      	b.n	8006196 <_reclaim_reent+0x16>
 8006220:	680e      	ldr	r6, [r1, #0]
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f814 	bl	8006250 <_free_r>
 8006228:	4631      	mov	r1, r6
 800622a:	e7ef      	b.n	800620c <_reclaim_reent+0x8c>
 800622c:	2500      	movs	r5, #0
 800622e:	e7ef      	b.n	8006210 <_reclaim_reent+0x90>
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	bf00      	nop
 8006234:	20000024 	.word	0x20000024

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_lock+0x8>)
 800623a:	f7ff bf7b 	b.w	8006134 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	20004bc8 	.word	0x20004bc8

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_unlock+0x8>)
 8006246:	f7ff bf76 	b.w	8006136 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	20004bc8 	.word	0x20004bc8

08006250 <_free_r>:
 8006250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006252:	2900      	cmp	r1, #0
 8006254:	d048      	beq.n	80062e8 <_free_r+0x98>
 8006256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625a:	9001      	str	r0, [sp, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f1a1 0404 	sub.w	r4, r1, #4
 8006262:	bfb8      	it	lt
 8006264:	18e4      	addlt	r4, r4, r3
 8006266:	f7ff ffe7 	bl	8006238 <__malloc_lock>
 800626a:	4a20      	ldr	r2, [pc, #128]	; (80062ec <_free_r+0x9c>)
 800626c:	9801      	ldr	r0, [sp, #4]
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	4615      	mov	r5, r2
 8006272:	b933      	cbnz	r3, 8006282 <_free_r+0x32>
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	b003      	add	sp, #12
 800627a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800627e:	f7ff bfe1 	b.w	8006244 <__malloc_unlock>
 8006282:	42a3      	cmp	r3, r4
 8006284:	d90b      	bls.n	800629e <_free_r+0x4e>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	1862      	adds	r2, r4, r1
 800628a:	4293      	cmp	r3, r2
 800628c:	bf04      	itt	eq
 800628e:	681a      	ldreq	r2, [r3, #0]
 8006290:	685b      	ldreq	r3, [r3, #4]
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	bf04      	itt	eq
 8006296:	1852      	addeq	r2, r2, r1
 8006298:	6022      	streq	r2, [r4, #0]
 800629a:	602c      	str	r4, [r5, #0]
 800629c:	e7ec      	b.n	8006278 <_free_r+0x28>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x58>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x4e>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1855      	adds	r5, r2, r1
 80062ac:	42a5      	cmp	r5, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x78>
 80062b0:	6824      	ldr	r4, [r4, #0]
 80062b2:	4421      	add	r1, r4
 80062b4:	1854      	adds	r4, r2, r1
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1dd      	bne.n	8006278 <_free_r+0x28>
 80062bc:	681c      	ldr	r4, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4421      	add	r1, r4
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	e7d7      	b.n	8006278 <_free_r+0x28>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x80>
 80062ca:	230c      	movs	r3, #12
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	e7d3      	b.n	8006278 <_free_r+0x28>
 80062d0:	6825      	ldr	r5, [r4, #0]
 80062d2:	1961      	adds	r1, r4, r5
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1949      	addeq	r1, r1, r5
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7c7      	b.n	8006278 <_free_r+0x28>
 80062e8:	b003      	add	sp, #12
 80062ea:	bd30      	pop	{r4, r5, pc}
 80062ec:	20004a74 	.word	0x20004a74

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
