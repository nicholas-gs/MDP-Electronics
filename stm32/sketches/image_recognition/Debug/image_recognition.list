
image_recognition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a35c  0800a35c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a364  0800a364  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a36c  0800a36c  0001a36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004e48  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004ec0  20004ec0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210df  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aab  00000000  00000000  00041183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00044c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014a8  00000000  00000000  00046210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ade  00000000  00000000  000476b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bce  00000000  00000000  0004e196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6b10  00000000  00000000  00065d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014c874  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006368  00000000  00000000  0014c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a09c 	.word	0x0800a09c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a09c 	.word	0x0800a09c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef>:
PID leftMotorPID(&PID_input_left, &PID_output_left, &PID_setpoint_left,
		PID_CONS_KP, PID_CONS_KI, PID_CONS_KD, PID_P_ON_E, PID_DIRECT);

// Callback function for when USART DMA transmit is done
void DMATransferComplete(DMA_HandleTypeDef* hdma)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
		// Disable the DMA
		huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef+0x24>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	695a      	ldr	r2, [r3, #20]
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e7a:	615a      	str	r2, [r3, #20]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	20000248 	.word	0x20000248

08000e8c <_ZN16Movement_CommandC1Ev>:
struct Movement_Command
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	805a      	strh	r2, [r3, #2]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	809a      	strh	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_UART_RxCpltCallback>:
//	}
//}

// Callback function when USART receives data from the RPI.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a51      	ldr	r2, [pc, #324]	; (8001000 <HAL_UART_RxCpltCallback+0x150>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 809a 	bne.w	8000ff6 <HAL_UART_RxCpltCallback+0x146>
	{
		bool valid_cmd = false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75fb      	strb	r3, [r7, #23]
		Movement_Command move_msg;
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ffde 	bl	8000e8c <_ZN16Movement_CommandC1Ev>
		char c1 = rx_buffer[0];
 8000ed0:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <HAL_UART_RxCpltCallback+0x154>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	75bb      	strb	r3, [r7, #22]
		char c2 = rx_buffer[1];
 8000ed6:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <HAL_UART_RxCpltCallback+0x154>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	757b      	strb	r3, [r7, #21]
		char d[4];
		memcpy(d, (void*)&rx_buffer[2], 3);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4949      	ldr	r1, [pc, #292]	; (8001008 <HAL_UART_RxCpltCallback+0x158>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 fbad 	bl	8009644 <memcpy>
		d[3] = '\0';
 8000eea:	2300      	movs	r3, #0
 8000eec:	72fb      	strb	r3, [r7, #11]
		if (c1 == 'F')
 8000eee:	7dbb      	ldrb	r3, [r7, #22]
 8000ef0:	2b46      	cmp	r3, #70	; 0x46
 8000ef2:	d135      	bne.n	8000f60 <HAL_UART_RxCpltCallback+0xb0>
		{
			if (c2 == 'W')
 8000ef4:	7d7b      	ldrb	r3, [r7, #21]
 8000ef6:	2b57      	cmp	r3, #87	; 0x57
 8000ef8:	d10e      	bne.n	8000f18 <HAL_UART_RxCpltCallback+0x68>
			{
				move_msg.command = MOVE_FORWARD;
 8000efa:	2301      	movs	r3, #1
 8000efc:	733b      	strb	r3, [r7, #12]
				move_msg.distance_cm = strtol(d, NULL, 10);
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	220a      	movs	r2, #10
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fd2a 	bl	8009960 <strtol>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	81fb      	strh	r3, [r7, #14]
				valid_cmd = true;
 8000f12:	2301      	movs	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	e05b      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'L')
 8000f18:	7d7b      	ldrb	r3, [r7, #21]
 8000f1a:	2b4c      	cmp	r3, #76	; 0x4c
 8000f1c:	d10e      	bne.n	8000f3c <HAL_UART_RxCpltCallback+0x8c>
			{
				move_msg.command = MOVE_FORWARD_LEFT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	220a      	movs	r2, #10
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fd18 	bl	8009960 <strtol>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000f36:	2301      	movs	r3, #1
 8000f38:	75fb      	strb	r3, [r7, #23]
 8000f3a:	e049      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'R')
 8000f3c:	7d7b      	ldrb	r3, [r7, #21]
 8000f3e:	2b52      	cmp	r3, #82	; 0x52
 8000f40:	d146      	bne.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			{
				move_msg.command = MOVE_FORWARD_RIGHT;
 8000f42:	2305      	movs	r3, #5
 8000f44:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fd06 	bl	8009960 <strtol>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	75fb      	strb	r3, [r7, #23]
 8000f5e:	e037      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			}
		}
		else if (c1 == 'B')
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	2b42      	cmp	r3, #66	; 0x42
 8000f64:	d134      	bne.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
		{
			if (c2 == 'W')
 8000f66:	7d7b      	ldrb	r3, [r7, #21]
 8000f68:	2b57      	cmp	r3, #87	; 0x57
 8000f6a:	d10e      	bne.n	8000f8a <HAL_UART_RxCpltCallback+0xda>
			{
				move_msg.command = MOVE_BACKWARD;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	733b      	strb	r3, [r7, #12]
				move_msg.distance_cm = strtol(d, NULL, 10);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	220a      	movs	r2, #10
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f008 fcf1 	bl	8009960 <strtol>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	81fb      	strh	r3, [r7, #14]
				valid_cmd = true;
 8000f84:	2301      	movs	r3, #1
 8000f86:	75fb      	strb	r3, [r7, #23]
 8000f88:	e022      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>

			}
			else if (c2 == 'L')
 8000f8a:	7d7b      	ldrb	r3, [r7, #21]
 8000f8c:	2b4c      	cmp	r3, #76	; 0x4c
 8000f8e:	d10e      	bne.n	8000fae <HAL_UART_RxCpltCallback+0xfe>
			{
				move_msg.command = MOVE_BACKWARD_LEFT;
 8000f90:	2304      	movs	r3, #4
 8000f92:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	220a      	movs	r2, #10
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f008 fcdf 	bl	8009960 <strtol>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75fb      	strb	r3, [r7, #23]
 8000fac:	e010      	b.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'R')
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	2b52      	cmp	r3, #82	; 0x52
 8000fb2:	d10d      	bne.n	8000fd0 <HAL_UART_RxCpltCallback+0x120>
			{
				move_msg.command = MOVE_BACKWARD_RIGHT;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	220a      	movs	r2, #10
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f008 fccd 	bl	8009960 <strtol>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
			}
		}
		if (valid_cmd)
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <HAL_UART_RxCpltCallback+0x13c>
		{
			stm32_status = COMMAND_RECEIVED_STATUS;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_UART_RxCpltCallback+0x15c>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]
			// Put the command message into the queue
			osMessageQueuePut(movement_command_queue, &move_msg, 0U, 0U);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_UART_RxCpltCallback+0x160>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 010c 	add.w	r1, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f005 f9c4 	bl	8006374 <osMessageQueuePut>
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, RPI_TO_STM_MSG_SIZE);
 8000fec:	2205      	movs	r2, #5
 8000fee:	4905      	ldr	r1, [pc, #20]	; (8001004 <HAL_UART_RxCpltCallback+0x154>)
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <HAL_UART_RxCpltCallback+0x150>)
 8000ff2:	f004 f996 	bl	8005322 <HAL_UART_Receive_IT>
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000248 	.word	0x20000248
 8001004:	200000c8 	.word	0x200000c8
 8001008:	200000ca 	.word	0x200000ca
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200000d0 	.word	0x200000d0

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f001 fbca 	bl	80027b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f88e 	bl	800113c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f000 fb74 	bl	800170c <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 8001024:	f000 f9ae 	bl	8001384 <_ZL12MX_TIM4_Initv>
//  MX_TIM1_Init();
  MX_TIM2_Init();
 8001028:	f000 f8f0 	bl	800120c <_ZL12MX_TIM2_Initv>
  MX_TIM8_Init();
 800102c:	f000 fa3a 	bl	80014a4 <_ZL12MX_TIM8_Initv>
  MX_TIM3_Init();
 8001030:	f000 f94a 	bl	80012c8 <_ZL12MX_TIM3_Initv>
  MX_DMA_Init();
 8001034:	f000 fb34 	bl	80016a0 <_ZL11MX_DMA_Initv>
  // IMPORTANT! UART_Init must come after DMA_Init.
  // CubeMX has a bug where the order of function call is reversed!!!!
  MX_USART3_UART_Init();
 8001038:	f000 fb04 	bl	8001644 <_ZL19MX_USART3_UART_Initv>
  // IMPORTANT! ADC1_Init must come after DMA_Init.
  // CubeMX has a bug where the order of function call is reversed!!!!
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  // Init steering PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800103c:	210c      	movs	r1, #12
 800103e:	482a      	ldr	r0, [pc, #168]	; (80010e8 <main+0xd4>)
 8001040:	f003 f87a 	bl	8004138 <HAL_TIM_PWM_Start>

  // Left Motor Encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001044:	213c      	movs	r1, #60	; 0x3c
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <main+0xd8>)
 8001048:	f003 f9e4 	bl	8004414 <HAL_TIM_Encoder_Start>
  // Right Motor Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800104c:	213c      	movs	r1, #60	; 0x3c
 800104e:	4828      	ldr	r0, [pc, #160]	; (80010f0 <main+0xdc>)
 8001050:	f003 f9e0 	bl	8004414 <HAL_TIM_Encoder_Start>

  // Set up the Motors PWM
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	4827      	ldr	r0, [pc, #156]	; (80010f4 <main+0xe0>)
 8001058:	f003 f86e 	bl	8004138 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800105c:	2104      	movs	r1, #4
 800105e:	4825      	ldr	r0, [pc, #148]	; (80010f4 <main+0xe0>)
 8001060:	f003 f86a 	bl	8004138 <HAL_TIM_PWM_Start>

  // Init DMA send data callback
  HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <main+0xe4>)
 8001066:	2100      	movs	r1, #0
 8001068:	4824      	ldr	r0, [pc, #144]	; (80010fc <main+0xe8>)
 800106a:	f001 ffe7 	bl	800303c <HAL_DMA_RegisterCallback>

  // Init the buffer to receive commands from RPI
  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, RPI_TO_STM_MSG_SIZE);
 800106e:	2205      	movs	r2, #5
 8001070:	4923      	ldr	r1, [pc, #140]	; (8001100 <main+0xec>)
 8001072:	4824      	ldr	r0, [pc, #144]	; (8001104 <main+0xf0>)
 8001074:	f004 f955 	bl	8005322 <HAL_UART_Receive_IT>

  // Init interrupts for the timer attached to the ultrasonic sensor echo pin
//  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);

  // We have intialized all the hardware components
  stm32_status = COMMAND_READY_STATUS;
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <main+0xf4>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800107e:	f005 f80f 	bl	80060a0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  movement_command_queue = osMessageQueueNew(10, sizeof(Movement_Command), NULL);
 8001082:	2200      	movs	r2, #0
 8001084:	2106      	movs	r1, #6
 8001086:	200a      	movs	r0, #10
 8001088:	f005 f901 	bl	800628e <osMessageQueueNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <main+0xf8>)
 8001090:	6013      	str	r3, [r2, #0]
  ultrasonic_readings_queue = osMessageQueueNew(10, sizeof(ULTRASONIC_DISTANCE_TYPE), NULL);
 8001092:	2200      	movs	r2, #0
 8001094:	2102      	movs	r1, #2
 8001096:	200a      	movs	r0, #10
 8001098:	f005 f8f9 	bl	800628e <osMessageQueueNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <main+0xfc>)
 80010a0:	6013      	str	r3, [r2, #0]
  infrared_data_queue = osMessageQueueNew(10, sizeof(Infrared_Data), NULL);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2104      	movs	r1, #4
 80010a6:	200a      	movs	r0, #10
 80010a8:	f005 f8f1 	bl	800628e <osMessageQueueNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <main+0x100>)
 80010b0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <main+0x104>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <main+0x108>)
 80010b8:	f005 f83c 	bl	8006134 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <main+0x10c>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of MovementTask */
  MovementTaskHandle = osThreadNew(movement_task, NULL, &MovementTask_attributes);
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <main+0x110>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <main+0x114>)
 80010c8:	f005 f834 	bl	8006134 <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <main+0x118>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of RPITransmitTask */
  RPITransmitTaskHandle = osThreadNew(RPI_Transmit_Task, NULL, &RPITransmitTask_attributes);
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <main+0x11c>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4817      	ldr	r0, [pc, #92]	; (8001134 <main+0x120>)
 80010d8:	f005 f82c 	bl	8006134 <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <main+0x124>)
 80010e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010e2:	f005 f801 	bl	80060e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0xd2>
 80010e8:	200001b8 	.word	0x200001b8
 80010ec:	20000128 	.word	0x20000128
 80010f0:	20000170 	.word	0x20000170
 80010f4:	20000200 	.word	0x20000200
 80010f8:	08000e65 	.word	0x08000e65
 80010fc:	2000028c 	.word	0x2000028c
 8001100:	200000c8 	.word	0x200000c8
 8001104:	20000248 	.word	0x20000248
 8001108:	200000d4 	.word	0x200000d4
 800110c:	200000d0 	.word	0x200000d0
 8001110:	200000dc 	.word	0x200000dc
 8001114:	200000d8 	.word	0x200000d8
 8001118:	0800a13c 	.word	0x0800a13c
 800111c:	08001b9d 	.word	0x08001b9d
 8001120:	2000034c 	.word	0x2000034c
 8001124:	0800a160 	.word	0x0800a160
 8001128:	08001bad 	.word	0x08001bad
 800112c:	20000350 	.word	0x20000350
 8001130:	0800a184 	.word	0x0800a184
 8001134:	08001f1d 	.word	0x08001f1d
 8001138:	20000354 	.word	0x20000354

0800113c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f008 fa88 	bl	8009660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <_Z18SystemClock_Configv+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <_Z18SystemClock_Configv+0xc8>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <_Z18SystemClock_Configv+0xc8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <_Z18SystemClock_Configv+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <_Z18SystemClock_Configv+0xcc>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <_Z18SystemClock_Configv+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa2f 	bl	8003610 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80011c2:	f000 ff5f 	bl	8002084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fc8d 	bl	8003b00 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80011f6:	f000 ff45 	bl	8002084 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fa20 	bl	8009660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 800123e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001242:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001250:	2303      	movs	r3, #3
 8001252:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001258:	2301      	movs	r3, #1
 800125a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001260:	230a      	movs	r3, #10
 8001262:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001270:	230a      	movs	r3, #10
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4812      	ldr	r0, [pc, #72]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 800127c:	f003 f824 	bl	80042c8 <HAL_TIM_Encoder_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001290:	f000 fef8 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <_ZL12MX_TIM2_Initv+0xb8>)
 80012a2:	f003 ff0f 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80012b6:	f000 fee5 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	; 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000128 	.word	0x20000128

080012c8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2224      	movs	r2, #36	; 0x24
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 f9c2 	bl	8009660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <_ZL12MX_TIM3_Initv+0xb8>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800130a:	2303      	movs	r3, #3
 800130c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800131a:	230a      	movs	r3, #10
 800131c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001322:	2301      	movs	r3, #1
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800132a:	230a      	movs	r3, #10
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 8001336:	f002 ffc7 	bl	80042c8 <HAL_TIM_Encoder_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800134a:	f000 fe9b 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <_ZL12MX_TIM3_Initv+0xb4>)
 800135c:	f003 feb2 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001370:	f000 fe88 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3730      	adds	r7, #48	; 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000170 	.word	0x20000170
 8001380:	40000400 	.word	0x40000400

08001384 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013b6:	4a3a      	ldr	r2, [pc, #232]	; (80014a0 <_ZL12MX_TIM4_Initv+0x11c>)
 80013b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320-1;
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013bc:	f240 123f 	movw	r2, #319	; 0x13f
 80013c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b32      	ldr	r3, [pc, #200]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013dc:	482f      	ldr	r0, [pc, #188]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 80013de:	f002 fd91 	bl	8003f04 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf14      	ite	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	2300      	moveq	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 80013f2:	f000 fe47 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001400:	4619      	mov	r1, r3
 8001402:	4826      	ldr	r0, [pc, #152]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 8001404:	f003 fa5e 	bl	80048c4 <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001418:	f000 fe34 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800141c:	481f      	ldr	r0, [pc, #124]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 800141e:	f002 fe31 	bl	8004084 <HAL_TIM_PWM_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001432:	f000 fe27 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	4619      	mov	r1, r3
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 8001446:	f003 fe3d 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf14      	ite	ne
 8001450:	2301      	movne	r3, #1
 8001452:	2300      	moveq	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800145a:	f000 fe13 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	220c      	movs	r2, #12
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 8001476:	f003 f963 	bl	8004740 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf14      	ite	ne
 8001480:	2301      	movne	r3, #1
 8001482:	2300      	moveq	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800148a:	f000 fdfb 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <_ZL12MX_TIM4_Initv+0x118>)
 8001490:	f000 ff98 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200001b8 	.word	0x200001b8
 80014a0:	40000800 	.word	0x40000800

080014a4 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b096      	sub	sp, #88	; 0x58
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 f8bf 	bl	8009660 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014e2:	4b56      	ldr	r3, [pc, #344]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80014e4:	4a56      	ldr	r2, [pc, #344]	; (8001640 <_ZL12MX_TIM8_Initv+0x19c>)
 80014e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80014e8:	4b54      	ldr	r3, [pc, #336]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 80014f4:	4b51      	ldr	r3, [pc, #324]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80014f6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001502:	4b4e      	ldr	r3, [pc, #312]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800150e:	484b      	ldr	r0, [pc, #300]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001510:	f002 fcf8 	bl	8003f04 <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf14      	ite	ne
 800151a:	2301      	movne	r3, #1
 800151c:	2300      	moveq	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8001524:	f000 fdae 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001532:	4619      	mov	r1, r3
 8001534:	4841      	ldr	r0, [pc, #260]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001536:	f003 f9c5 	bl	80048c4 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 800154a:	f000 fd9b 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800154e:	483b      	ldr	r0, [pc, #236]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001550:	f002 fd98 	bl	8004084 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001564:	f000 fd8e 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001578:	f003 fda4 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 800158c:	f000 fd7a 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001590:	2360      	movs	r3, #96	; 0x60
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4821      	ldr	r0, [pc, #132]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80015b6:	f003 f8c3 	bl	8004740 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf14      	ite	ne
 80015c0:	2301      	movne	r3, #1
 80015c2:	2300      	moveq	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 80015ca:	f000 fd5b 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	2204      	movs	r2, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4819      	ldr	r0, [pc, #100]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 80015d8:	f003 f8b2 	bl	8004740 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 80015ec:	f000 fd4a 	bl	8002084 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001608:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 8001614:	f003 fdd2 	bl	80051bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf14      	ite	ne
 800161e:	2301      	movne	r3, #1
 8001620:	2300      	moveq	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 8001628:	f000 fd2c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <_ZL12MX_TIM8_Initv+0x198>)
 800162e:	f000 fec9 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000200 	.word	0x20000200
 8001640:	40010400 	.word	0x40010400

08001644 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 800164a:	4a14      	ldr	r2, [pc, #80]	; (800169c <_ZL19MX_USART3_UART_Initv+0x58>)
 800164c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <_ZL19MX_USART3_UART_Initv+0x54>)
 800167c:	f003 fe04 	bl	8005288 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001690:	f000 fcf8 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000248 	.word	0x20000248
 800169c:	40004800 	.word	0x40004800

080016a0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <_ZL11MX_DMA_Initv+0x68>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	200e      	movs	r0, #14
 80016e4:	f001 f95e 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016e8:	200e      	movs	r0, #14
 80016ea:	f001 f977 	bl	80029dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	2038      	movs	r0, #56	; 0x38
 80016f4:	f001 f956 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f8:	2038      	movs	r0, #56	; 0x38
 80016fa:	f001 f96f 	bl	80029dc <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a36      	ldr	r2, [pc, #216]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <_ZL12MX_GPIO_Initv+0x114>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorA_HBridge_1_Pin|MotorA_HBridge_2_Pin|MotorB_HBridge_1_Pin|MotorB_HBridge_2_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	213c      	movs	r1, #60	; 0x3c
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <_ZL12MX_GPIO_Initv+0x118>)
 80017b4:	f001 ff12 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_Trig_GPIO_Port, Ultrasonic_Trig_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2110      	movs	r1, #16
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <_ZL12MX_GPIO_Initv+0x11c>)
 80017be:	f001 ff0d 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorA_HBridge_1_Pin MotorA_HBridge_2_Pin MotorB_HBridge_1_Pin MotorB_HBridge_2_Pin */
  GPIO_InitStruct.Pin = MotorA_HBridge_1_Pin|MotorA_HBridge_2_Pin|MotorB_HBridge_1_Pin|MotorB_HBridge_2_Pin;
 80017c2:	233c      	movs	r3, #60	; 0x3c
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4812      	ldr	r0, [pc, #72]	; (8001824 <_ZL12MX_GPIO_Initv+0x118>)
 80017da:	f001 fd63 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <_ZL12MX_GPIO_Initv+0x120>)
 80017f8:	f001 fd54 	bl	80032a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_Trig_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Trig_Pin;
 80017fc:	2310      	movs	r3, #16
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ultrasonic_Trig_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <_ZL12MX_GPIO_Initv+0x11c>)
 8001814:	f001 fd46 	bl	80032a4 <HAL_GPIO_Init>

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000

08001830 <_Z17set_motor_forwardv>:

/* USER CODE BEGIN 4 */

// Set the H-Bridge to move the wheels forward
void set_motor_forward(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2104      	movs	r1, #4
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <_Z17set_motor_forwardv+0x30>)
 800183a:	f001 fecf 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2108      	movs	r1, #8
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <_Z17set_motor_forwardv+0x30>)
 8001844:	f001 feca 	bl	80035dc <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	2110      	movs	r1, #16
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <_Z17set_motor_forwardv+0x30>)
 800184e:	f001 fec5 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2120      	movs	r1, #32
 8001856:	4802      	ldr	r0, [pc, #8]	; (8001860 <_Z17set_motor_forwardv+0x30>)
 8001858:	f001 fec0 	bl	80035dc <HAL_GPIO_WritePin>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020000 	.word	0x40020000

08001864 <_Z18set_motor_backwardv>:

// Set the H-Bridge to move the wheels backward
void set_motor_backward(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2104      	movs	r1, #4
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <_Z18set_motor_backwardv+0x30>)
 800186e:	f001 feb5 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2108      	movs	r1, #8
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <_Z18set_motor_backwardv+0x30>)
 8001878:	f001 feb0 	bl	80035dc <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2110      	movs	r1, #16
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <_Z18set_motor_backwardv+0x30>)
 8001882:	f001 feab 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2120      	movs	r1, #32
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <_Z18set_motor_backwardv+0x30>)
 800188c:	f001 fea6 	bl	80035dc <HAL_GPIO_WritePin>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40020000 	.word	0x40020000

08001898 <_Z14set_motor_stopv>:

// Set the H-Bridge to disconnect the wheels from the motor
void set_motor_stop(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2104      	movs	r1, #4
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <_Z14set_motor_stopv+0x30>)
 80018a2:	f001 fe9b 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2108      	movs	r1, #8
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <_Z14set_motor_stopv+0x30>)
 80018ac:	f001 fe96 	bl	80035dc <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2110      	movs	r1, #16
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <_Z14set_motor_stopv+0x30>)
 80018b6:	f001 fe91 	bl	80035dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2120      	movs	r1, #32
 80018be:	4802      	ldr	r0, [pc, #8]	; (80018c8 <_Z14set_motor_stopv+0x30>)
 80018c0:	f001 fe8c 	bl	80035dc <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000

080018cc <_Z20set_steering_forwardv>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

// Turn the steering forward
void set_steering_forward(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = CENTER_STEERING_PWM;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <_Z20set_steering_forwardv+0x1c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	224b      	movs	r2, #75	; 0x4b
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 80018d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018dc:	f004 fcbc 	bl	8006258 <osDelay>
	disconnect_steering();
 80018e0:	f000 f824 	bl	800192c <_Z19disconnect_steeringv>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200001b8 	.word	0x200001b8

080018ec <_Z18set_steering_rightv>:

// Turn the steering right
void set_steering_right(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = EXTREME_RIGHT_STEERING_PWM;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <_Z18set_steering_rightv+0x1c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	225f      	movs	r2, #95	; 0x5f
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 80018f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fc:	f004 fcac 	bl	8006258 <osDelay>
	disconnect_steering();
 8001900:	f000 f814 	bl	800192c <_Z19disconnect_steeringv>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200001b8 	.word	0x200001b8

0800190c <_Z17set_steering_leftv>:

// Turn the steering left
void set_steering_left(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = EXTREME_LEFT_STEERING_PWM;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <_Z17set_steering_leftv+0x1c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2238      	movs	r2, #56	; 0x38
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 8001918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800191c:	f004 fc9c 	bl	8006258 <osDelay>
	disconnect_steering();
 8001920:	f000 f804 	bl	800192c <_Z19disconnect_steeringv>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001b8 	.word	0x200001b8

0800192c <_Z19disconnect_steeringv>:
	osDelay(500);
	disconnect_steering();
}

void disconnect_steering(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <_Z19disconnect_steeringv+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(250);
 8001938:	20fa      	movs	r0, #250	; 0xfa
 800193a:	f004 fc8d 	bl	8006258 <osDelay>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001b8 	.word	0x200001b8

08001948 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>:
// @param count1: The first timer count
// @param count2: The second timer count
// @param count3: Pointer to the timer handle
// @return The number of counts that elapsed between count1 and count2
uint32_t get_encoder_delta(uint32_t count1, uint32_t count2, TIM_HandleTypeDef* hal_tim)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(hal_tim))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b10      	cmp	r3, #16
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00e      	beq.n	800198a <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x42>
	{
		if (count2 <= count1)
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	429a      	cmp	r2, r3
 8001972:	d803      	bhi.n	800197c <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x34>
		{
			return count1 - count2;
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	e014      	b.n	80019a6 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
		else
		{
			return (MOTOR_ENCODER_TIMER_PERIOD - count2) + count1;
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001986:	33ff      	adds	r3, #255	; 0xff
 8001988:	e00d      	b.n	80019a6 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
	}
	else
	{
		if (count2 >= count1)
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	429a      	cmp	r2, r3
 8001990:	d303      	bcc.n	800199a <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x52>
		{
			return count2 - count1;
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	e005      	b.n	80019a6 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
		else
		{
			return (MOTOR_ENCODER_TIMER_PERIOD - count1) + count2;
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80019a4:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	0000      	movs	r0, r0
 80019b4:	0000      	movs	r0, r0
	...

080019b8 <_Z25command_to_encoder_counts16Movement_Command>:
// Takes care of both straight line movement (where both left & right wheel
// encoder counts are equal), as well as turning, where the
// inner and outer wheels encoder counts are different.
// @note: Modifies the PID variables directly.
inline void command_to_encoder_counts(Movement_Command cmd)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	463b      	mov	r3, r7
 80019c0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (cmd.command == MOVE_FORWARD || cmd.command == MOVE_BACKWARD)
 80019c4:	783b      	ldrb	r3, [r7, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d002      	beq.n	80019d0 <_Z25command_to_encoder_counts16Movement_Command+0x18>
 80019ca:	783b      	ldrb	r3, [r7, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d11e      	bne.n	8001a0e <_Z25command_to_encoder_counts16Movement_Command+0x56>
	{
		PID_setpoint_left = (uint32_t)(cmd.distance_cm / DISTANCE_PER_ENCODER_PULSE);
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fda6 	bl	8000524 <__aeabi_i2d>
 80019d8:	a369      	add	r3, pc, #420	; (adr r3, 8001b80 <_Z25command_to_encoder_counts16Movement_Command+0x1c8>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe ff35 	bl	800084c <__aeabi_ddiv>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f89f 	bl	8000b2c <__aeabi_d2uiz>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd87 	bl	8000504 <__aeabi_ui2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4965      	ldr	r1, [pc, #404]	; (8001b90 <_Z25command_to_encoder_counts16Movement_Command+0x1d8>)
 80019fc:	e9c1 2300 	strd	r2, r3, [r1]
		PID_setpoint_right = PID_setpoint_left;
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <_Z25command_to_encoder_counts16Movement_Command+0x1d8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	4963      	ldr	r1, [pc, #396]	; (8001b94 <_Z25command_to_encoder_counts16Movement_Command+0x1dc>)
 8001a08:	e9c1 2300 	strd	r2, r3, [r1]
		return;
 8001a0c:	e0b0      	b.n	8001b70 <_Z25command_to_encoder_counts16Movement_Command+0x1b8>
	}
	else
	{
		uint32_t inner_ticks = (
				(2 * 3.142 * TURNING_INNER_WHEEL_RADIUS) * ((double)cmd.angle_deg / 360.0)
 8001a0e:	88bb      	ldrh	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd77 	bl	8000504 <__aeabi_ui2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <_Z25command_to_encoder_counts16Movement_Command+0x1e0>)
 8001a1c:	f7fe ff16 	bl	800084c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	a353      	add	r3, pc, #332	; (adr r3, 8001b78 <_Z25command_to_encoder_counts16Movement_Command+0x1c0>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fde3 	bl	80005f8 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
			) / DISTANCE_PER_ENCODER_PULSE;
 8001a3a:	a351      	add	r3, pc, #324	; (adr r3, 8001b80 <_Z25command_to_encoder_counts16Movement_Command+0x1c8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe ff04 	bl	800084c <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
		uint32_t inner_ticks = (
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f86e 	bl	8000b2c <__aeabi_d2uiz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	61fb      	str	r3, [r7, #28]
		uint32_t outer_ticks = (
				(2 * 3.142 * TURNING_OUTER_WHEEL_RADIUS) * ((double)cmd.angle_deg / 360.0)
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd54 	bl	8000504 <__aeabi_ui2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <_Z25command_to_encoder_counts16Movement_Command+0x1e0>)
 8001a62:	f7fe fef3 	bl	800084c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	a346      	add	r3, pc, #280	; (adr r3, 8001b88 <_Z25command_to_encoder_counts16Movement_Command+0x1d0>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
			) / DISTANCE_PER_ENCODER_PULSE;
 8001a80:	a33f      	add	r3, pc, #252	; (adr r3, 8001b80 <_Z25command_to_encoder_counts16Movement_Command+0x1c8>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fee1 	bl	800084c <__aeabi_ddiv>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
		uint32_t outer_ticks = (
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f84b 	bl	8000b2c <__aeabi_d2uiz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]

		if (cmd.command == MOVE_FORWARD_LEFT || cmd.command == MOVE_BACKWARD_LEFT)
 8001a9a:	783b      	ldrb	r3, [r7, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d002      	beq.n	8001aa6 <_Z25command_to_encoder_counts16Movement_Command+0xee>
 8001aa0:	783b      	ldrb	r3, [r7, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d12f      	bne.n	8001b06 <_Z25command_to_encoder_counts16Movement_Command+0x14e>
		{
			double tickoffset = ((double)TURNING_LEFT_OFFSET_PER_DEG * (double)cmd.angle_deg) / (double)DISTANCE_PER_ENCODER_PULSE;
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd2b 	bl	8000504 <__aeabi_ui2d>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	a32f      	add	r3, pc, #188	; (adr r3, 8001b80 <_Z25command_to_encoder_counts16Movement_Command+0x1c8>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2302 	strd	r2, r3, [r7, #8]
			PID_setpoint_left = (double)inner_ticks + tickoffset;
 8001ad4:	69f8      	ldr	r0, [r7, #28]
 8001ad6:	f7fe fd15 	bl	8000504 <__aeabi_ui2d>
 8001ada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ade:	f7fe fbd5 	bl	800028c <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	492a      	ldr	r1, [pc, #168]	; (8001b90 <_Z25command_to_encoder_counts16Movement_Command+0x1d8>)
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]
			PID_setpoint_right = (double)outer_ticks + tickoffset;
 8001aec:	69b8      	ldr	r0, [r7, #24]
 8001aee:	f7fe fd09 	bl	8000504 <__aeabi_ui2d>
 8001af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af6:	f7fe fbc9 	bl	800028c <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4925      	ldr	r1, [pc, #148]	; (8001b94 <_Z25command_to_encoder_counts16Movement_Command+0x1dc>)
 8001b00:	e9c1 2300 	strd	r2, r3, [r1]
 8001b04:	e034      	b.n	8001b70 <_Z25command_to_encoder_counts16Movement_Command+0x1b8>
		}
		else if (cmd.command == MOVE_FORWARD_RIGHT || cmd.command == MOVE_BACKWARD_RIGHT)
 8001b06:	783b      	ldrb	r3, [r7, #0]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d002      	beq.n	8001b12 <_Z25command_to_encoder_counts16Movement_Command+0x15a>
 8001b0c:	783b      	ldrb	r3, [r7, #0]
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d12e      	bne.n	8001b70 <_Z25command_to_encoder_counts16Movement_Command+0x1b8>
		{
			double tickoffset = ((double)TURNING_RIGHT_OFFSET_PER_DEG * (double)cmd.angle_deg) / (double)DISTANCE_PER_ENCODER_PULSE;
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fcf5 	bl	8000504 <__aeabi_ui2d>
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	a314      	add	r3, pc, #80	; (adr r3, 8001b80 <_Z25command_to_encoder_counts16Movement_Command+0x1c8>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fe8a 	bl	800084c <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			PID_setpoint_left = (double)outer_ticks + tickoffset;
 8001b40:	69b8      	ldr	r0, [r7, #24]
 8001b42:	f7fe fcdf 	bl	8000504 <__aeabi_ui2d>
 8001b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b4a:	f7fe fb9f 	bl	800028c <__adddf3>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	490f      	ldr	r1, [pc, #60]	; (8001b90 <_Z25command_to_encoder_counts16Movement_Command+0x1d8>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
			PID_setpoint_right = (double)inner_ticks + tickoffset;
 8001b58:	69f8      	ldr	r0, [r7, #28]
 8001b5a:	f7fe fcd3 	bl	8000504 <__aeabi_ui2d>
 8001b5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b62:	f7fe fb93 	bl	800028c <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	490a      	ldr	r1, [pc, #40]	; (8001b94 <_Z25command_to_encoder_counts16Movement_Command+0x1dc>)
 8001b6c:	e9c1 2300 	strd	r2, r3, [r1]
//		{
//			PID_setpoint_left = 0;
//			PID_setpoint_right = 0;
//		}
	}
}
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	6c8b4395 	.word	0x6c8b4395
 8001b7c:	4069ebe7 	.word	0x4069ebe7
 8001b80:	d3bfdc84 	.word	0xd3bfdc84
 8001b84:	3f8b6421 	.word	0x3f8b6421
 8001b88:	ef9db22d 	.word	0xef9db22d
 8001b8c:	40733ea7 	.word	0x40733ea7
 8001b90:	200000b0 	.word	0x200000b0
 8001b94:	20000098 	.word	0x20000098
 8001b98:	40768000 	.word	0x40768000

08001b9c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f004 fb57 	bl	8006258 <osDelay>
 8001baa:	e7fb      	b.n	8001ba4 <_Z16StartDefaultTaskPv+0x8>

08001bac <_Z13movement_taskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_movement_task */
void movement_task(void *argument)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b093      	sub	sp, #76	; 0x4c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	uint32_t 	encoder_A_count1, encoder_A_count2, encoder_A_count_delta,
				encoder_B_count1, encoder_B_count2, encoder_B_count_delta;
	uint32_t 	encoder_A_ticks1, encoder_A_ticks2, encoder_A_ticks_delta,
				encoder_B_ticks1, encoder_B_ticks2, encoder_B_ticks_delta;

	Movement_Command move_cmd;
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f967 	bl	8000e8c <_ZN16Movement_CommandC1Ev>
	bool toMove = false;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// Disconnect the Motor First
	set_motor_stop();
 8001bc4:	f7ff fe68 	bl	8001898 <_Z14set_motor_stopv>

	// Set initial values for count and ticks for both encoders
	encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <_Z13movement_taskPv+0xb0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
	encoder_A_ticks1 = HAL_GetTick();
 8001bd0:	f000 fe24 	bl	800281c <HAL_GetTick>
 8001bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
	encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <_Z13movement_taskPv+0xb4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
	encoder_B_ticks1 = HAL_GetTick();
 8001bde:	f000 fe1d 	bl	800281c <HAL_GetTick>
 8001be2:	63b8      	str	r0, [r7, #56]	; 0x38

	// Start the PID
	rightMotorPID.SetMode(PID_AUTOMATIC);
 8001be4:	2101      	movs	r1, #1
 8001be6:	481f      	ldr	r0, [pc, #124]	; (8001c64 <_Z13movement_taskPv+0xb8>)
 8001be8:	f007 fc65 	bl	80094b6 <_ZN3PID7SetModeEi>
	leftMotorPID.SetMode(PID_AUTOMATIC);
 8001bec:	2101      	movs	r1, #1
 8001bee:	481e      	ldr	r0, [pc, #120]	; (8001c68 <_Z13movement_taskPv+0xbc>)
 8001bf0:	f007 fc61 	bl	80094b6 <_ZN3PID7SetModeEi>

  /* Infinite loop */
  for(;;)
  {
	  if (!toMove)
 8001bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d06b      	beq.n	8001cda <_Z13movement_taskPv+0x12e>
	  {
		  osStatus_t status = osMessageQueueGet(movement_command_queue, &move_cmd, NULL, 0);
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <_Z13movement_taskPv+0xc0>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f107 0108 	add.w	r1, r7, #8
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f004 fc11 	bl	8006434 <osMessageQueueGet>
 8001c12:	6338      	str	r0, [r7, #48]	; 0x30
		  if (status == osOK)
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d15f      	bne.n	8001cda <_Z13movement_taskPv+0x12e>
				  continue;
			  }
#endif
			  // Set H-bridge
			  // Change the H-Bridge settings
			  if (move_cmd.command == MOVE_BACKWARD || move_cmd.command == MOVE_BACKWARD_LEFT
 8001c1a:	7a3b      	ldrb	r3, [r7, #8]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d005      	beq.n	8001c2c <_Z13movement_taskPv+0x80>
 8001c20:	7a3b      	ldrb	r3, [r7, #8]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <_Z13movement_taskPv+0x80>
					  || move_cmd.command == MOVE_BACKWARD_RIGHT)
 8001c26:	7a3b      	ldrb	r3, [r7, #8]
 8001c28:	2b06      	cmp	r3, #6
 8001c2a:	d102      	bne.n	8001c32 <_Z13movement_taskPv+0x86>
			  {
				  set_motor_backward();
 8001c2c:	f7ff fe1a 	bl	8001864 <_Z18set_motor_backwardv>
 8001c30:	e001      	b.n	8001c36 <_Z13movement_taskPv+0x8a>
			  }
			  else
			  {
				  set_motor_forward();
 8001c32:	f7ff fdfd 	bl	8001830 <_Z17set_motor_forwardv>
			  }

			  // Set steering
			  if (move_cmd.command == MOVE_FORWARD || move_cmd.command == MOVE_BACKWARD)
 8001c36:	7a3b      	ldrb	r3, [r7, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <_Z13movement_taskPv+0x96>
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d102      	bne.n	8001c48 <_Z13movement_taskPv+0x9c>
			  {
				  set_steering_forward();
 8001c42:	f7ff fe43 	bl	80018cc <_Z20set_steering_forwardv>
 8001c46:	e015      	b.n	8001c74 <_Z13movement_taskPv+0xc8>
			  }
			  else if (move_cmd.command == MOVE_FORWARD_LEFT || move_cmd.command == MOVE_BACKWARD_LEFT)
 8001c48:	7a3b      	ldrb	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d002      	beq.n	8001c54 <_Z13movement_taskPv+0xa8>
 8001c4e:	7a3b      	ldrb	r3, [r7, #8]
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d10d      	bne.n	8001c70 <_Z13movement_taskPv+0xc4>
			  {
				  set_steering_left();
 8001c54:	f7ff fe5a 	bl	800190c <_Z17set_steering_leftv>
 8001c58:	e00c      	b.n	8001c74 <_Z13movement_taskPv+0xc8>
 8001c5a:	bf00      	nop
 8001c5c:	20000128 	.word	0x20000128
 8001c60:	20000170 	.word	0x20000170
 8001c64:	20000358 	.word	0x20000358
 8001c68:	200003d0 	.word	0x200003d0
 8001c6c:	200000d0 	.word	0x200000d0
			  }
			  else
			  {
				  set_steering_right();
 8001c70:	f7ff fe3c 	bl	80018ec <_Z18set_steering_rightv>
			  }

			  // Calculate the PID set points
			  command_to_encoder_counts(move_cmd);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c7c:	f7ff fe9c 	bl	80019b8 <_Z25command_to_encoder_counts16Movement_Command>

			  // Reset the other PID values
	  		  PID_input_right = 0;
 8001c80:	4998      	ldr	r1, [pc, #608]	; (8001ee4 <_Z13movement_taskPv+0x338>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]
	  		  PID_output_right = 0;
 8001c8e:	4996      	ldr	r1, [pc, #600]	; (8001ee8 <_Z13movement_taskPv+0x33c>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
	  		  PID_input_left = 0;
 8001c9c:	4993      	ldr	r1, [pc, #588]	; (8001eec <_Z13movement_taskPv+0x340>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9c1 2300 	strd	r2, r3, [r1]
	  		  PID_output_left = 0;
 8001caa:	4991      	ldr	r1, [pc, #580]	; (8001ef0 <_Z13movement_taskPv+0x344>)
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]

	  		  // Reset the encoder value
	  	  	  encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001cb8:	4b8e      	ldr	r3, [pc, #568]	; (8001ef4 <_Z13movement_taskPv+0x348>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
	  	  	  encoder_A_ticks1 = HAL_GetTick();
 8001cc0:	f000 fdac 	bl	800281c <HAL_GetTick>
 8001cc4:	63f8      	str	r0, [r7, #60]	; 0x3c
	  	  	  encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001cc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ef8 <_Z13movement_taskPv+0x34c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	643b      	str	r3, [r7, #64]	; 0x40
	  	  	  encoder_B_ticks1 = HAL_GetTick();
 8001cce:	f000 fda5 	bl	800281c <HAL_GetTick>
 8001cd2:	63b8      	str	r0, [r7, #56]	; 0x38

			  toMove = true;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  }
	  }

	  if (toMove)
 8001cda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 80ee 	beq.w	8001ec0 <_Z13movement_taskPv+0x314>
	  {
		  	  stm32_status = COMMAND_EXECUTING_STATUS;
 8001ce4:	4b85      	ldr	r3, [pc, #532]	; (8001efc <_Z13movement_taskPv+0x350>)
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	701a      	strb	r2, [r3, #0]

		  	  encoder_A_count2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <_Z13movement_taskPv+0x348>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  	  encoder_A_ticks2 = HAL_GetTick();
 8001cf2:	f000 fd93 	bl	800281c <HAL_GetTick>
 8001cf6:	62b8      	str	r0, [r7, #40]	; 0x28
		  	  encoder_B_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001cf8:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <_Z13movement_taskPv+0x34c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
		  	  encoder_B_ticks2 = HAL_GetTick();
 8001d00:	f000 fd8c 	bl	800281c <HAL_GetTick>
 8001d04:	6238      	str	r0, [r7, #32]

		  	  // Calculate the ticks delta
		  	  encoder_A_ticks_delta = encoder_A_ticks2 - encoder_A_ticks1;
 8001d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	61fb      	str	r3, [r7, #28]
		  	  encoder_B_ticks_delta = encoder_B_ticks2 - encoder_B_ticks1;
 8001d0e:	6a3a      	ldr	r2, [r7, #32]
 8001d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	61bb      	str	r3, [r7, #24]
		  	  // Calculate the counter delta
		  	  encoder_A_count_delta = get_encoder_delta(encoder_A_count1, encoder_A_count2, &htim2);
 8001d16:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <_Z13movement_taskPv+0x348>)
 8001d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d1c:	f7ff fe14 	bl	8001948 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>
 8001d20:	6178      	str	r0, [r7, #20]
		  	  encoder_B_count_delta = get_encoder_delta(encoder_B_count1, encoder_B_count2, &htim3);
 8001d22:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <_Z13movement_taskPv+0x34c>)
 8001d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d28:	f7ff fe0e 	bl	8001948 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>
 8001d2c:	6138      	str	r0, [r7, #16]

		  	  PID_input_left += ((double)encoder_A_count_delta);
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7fe fbe8 	bl	8000504 <__aeabi_ui2d>
 8001d34:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <_Z13movement_taskPv+0x340>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe faa7 	bl	800028c <__adddf3>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	496a      	ldr	r1, [pc, #424]	; (8001eec <_Z13movement_taskPv+0x340>)
 8001d44:	e9c1 2300 	strd	r2, r3, [r1]
		  	  PID_input_right += ((double)encoder_B_count_delta);
 8001d48:	6938      	ldr	r0, [r7, #16]
 8001d4a:	f7fe fbdb 	bl	8000504 <__aeabi_ui2d>
 8001d4e:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <_Z13movement_taskPv+0x338>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fa9a 	bl	800028c <__adddf3>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4961      	ldr	r1, [pc, #388]	; (8001ee4 <_Z13movement_taskPv+0x338>)
 8001d5e:	e9c1 2300 	strd	r2, r3, [r1]

		  	  leftMotorPID.Compute(encoder_A_ticks_delta);
 8001d62:	69f9      	ldr	r1, [r7, #28]
 8001d64:	4866      	ldr	r0, [pc, #408]	; (8001f00 <_Z13movement_taskPv+0x354>)
 8001d66:	f007 f99b 	bl	80090a0 <_ZN3PID7ComputeEm>
		  	  rightMotorPID.Compute(encoder_B_ticks_delta);
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	4865      	ldr	r0, [pc, #404]	; (8001f04 <_Z13movement_taskPv+0x358>)
 8001d6e:	f007 f997 	bl	80090a0 <_ZN3PID7ComputeEm>

		  	  bool left_complete 	= false;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  	  bool right_complete	= false;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  	  if (PID_setpoint_left - PID_input_left <= 40)
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <_Z13movement_taskPv+0x35c>)
 8001d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <_Z13movement_taskPv+0x340>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fa7d 	bl	8000288 <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	461c      	mov	r4, r3
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <_Z13movement_taskPv+0x360>)
 8001da0:	f7fe fea6 	bl	8000af0 <__aeabi_dcmple>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <_Z13movement_taskPv+0x202>
 8001daa:	2300      	movs	r3, #0
 8001dac:	461c      	mov	r4, r3
 8001dae:	b2e3      	uxtb	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <_Z13movement_taskPv+0x240>
		  	  {
		  		  PID_input_left = 0;
 8001db4:	494d      	ldr	r1, [pc, #308]	; (8001eec <_Z13movement_taskPv+0x340>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9c1 2300 	strd	r2, r3, [r1]
		  		  PID_output_left = 0;
 8001dc2:	494b      	ldr	r1, [pc, #300]	; (8001ef0 <_Z13movement_taskPv+0x344>)
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9c1 2300 	strd	r2, r3, [r1]
		  		  PID_setpoint_left = 0;
 8001dd0:	494d      	ldr	r1, [pc, #308]	; (8001f08 <_Z13movement_taskPv+0x35c>)
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9c1 2300 	strd	r2, r3, [r1]
				  // Stop the motor
				  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)0);
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <_Z13movement_taskPv+0x364>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
				  left_complete = true;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  	  }

		  	  if (PID_setpoint_right - PID_input_right <= 40)
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <_Z13movement_taskPv+0x368>)
 8001dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <_Z13movement_taskPv+0x338>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fa46 	bl	8000288 <__aeabi_dsub>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	461c      	mov	r4, r3
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <_Z13movement_taskPv+0x360>)
 8001e0e:	f7fe fe6f 	bl	8000af0 <__aeabi_dcmple>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <_Z13movement_taskPv+0x270>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	461c      	mov	r4, r3
 8001e1c:	b2e3      	uxtb	r3, r4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01b      	beq.n	8001e5a <_Z13movement_taskPv+0x2ae>
		  	  {
		  		  PID_input_right = 0;
 8001e22:	4930      	ldr	r1, [pc, #192]	; (8001ee4 <_Z13movement_taskPv+0x338>)
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9c1 2300 	strd	r2, r3, [r1]
		  		  PID_output_right = 0;
 8001e30:	492d      	ldr	r1, [pc, #180]	; (8001ee8 <_Z13movement_taskPv+0x33c>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
		  		  PID_setpoint_right = 0;
 8001e3e:	4935      	ldr	r1, [pc, #212]	; (8001f14 <_Z13movement_taskPv+0x368>)
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
				  // Stop the motor
				  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)0);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <_Z13movement_taskPv+0x364>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
				  right_complete = true;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  	  }

		  	  if (!left_complete)
 8001e5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <_Z13movement_taskPv+0x2c6>
		  	  {
//		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)PID_output_left);
		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)1500);
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <_Z13movement_taskPv+0x364>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
		  	  }

		  	  if (!right_complete)
 8001e72:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <_Z13movement_taskPv+0x2de>
		  	  {
//		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)PID_output_right);
		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)1500);
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <_Z13movement_taskPv+0x364>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
		  	  }

		  	  if (left_complete && right_complete)
 8001e8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d016      	beq.n	8001ec0 <_Z13movement_taskPv+0x314>
 8001e92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d012      	beq.n	8001ec0 <_Z13movement_taskPv+0x314>
		  		  // If we are done moving, then set the steering back to forward
//		  		  if (move_cmd.command != MOVE_FORWARD && move_cmd.command != MOVE_BACKWARD)
//		  		  {
//		  			  calibrate_steering_center(move_cmd.command);
//		  		  }
		  		  if (osMessageQueueGetCount(movement_command_queue) == 0)
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <_Z13movement_taskPv+0x36c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fb26 	bl	80064f0 <osMessageQueueGetCount>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <_Z13movement_taskPv+0x30e>
		  		  {
		  			stm32_status = COMMAND_READY_STATUS;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <_Z13movement_taskPv+0x350>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
		  		  }
		  		  toMove = false;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  	  }
	  }

	  // Restart the process again
  	  encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <_Z13movement_taskPv+0x348>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
  	  encoder_A_ticks1 = HAL_GetTick();
 8001ec8:	f000 fca8 	bl	800281c <HAL_GetTick>
 8001ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
  	  encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <_Z13movement_taskPv+0x34c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	643b      	str	r3, [r7, #64]	; 0x40
  	  encoder_B_ticks1 = HAL_GetTick();
 8001ed6:	f000 fca1 	bl	800281c <HAL_GetTick>
 8001eda:	63b8      	str	r0, [r7, #56]	; 0x38

  	  osDelay(50);
 8001edc:	2032      	movs	r0, #50	; 0x32
 8001ede:	f004 f9bb 	bl	8006258 <osDelay>
  }
 8001ee2:	e687      	b.n	8001bf4 <_Z13movement_taskPv+0x48>
 8001ee4:	200000a8 	.word	0x200000a8
 8001ee8:	200000a0 	.word	0x200000a0
 8001eec:	200000c0 	.word	0x200000c0
 8001ef0:	200000b8 	.word	0x200000b8
 8001ef4:	20000128 	.word	0x20000128
 8001ef8:	20000170 	.word	0x20000170
 8001efc:	200000d4 	.word	0x200000d4
 8001f00:	200003d0 	.word	0x200003d0
 8001f04:	20000358 	.word	0x20000358
 8001f08:	200000b0 	.word	0x200000b0
 8001f0c:	40440000 	.word	0x40440000
 8001f10:	20000200 	.word	0x20000200
 8001f14:	20000098 	.word	0x20000098
 8001f18:	200000d0 	.word	0x200000d0

08001f1c <_Z17RPI_Transmit_TaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RPI_Transmit_Task */
void RPI_Transmit_Task(void *argument)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b09a      	sub	sp, #104	; 0x68
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Encode STM32 status
	  sprintf(command_str, "CM%.3hu", (uint16_t)stm32_status);
 8001f24:	4b42      	ldr	r3, [pc, #264]	; (8002030 <_Z17RPI_Transmit_TaskPv+0x114>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f30:	4940      	ldr	r1, [pc, #256]	; (8002034 <_Z17RPI_Transmit_TaskPv+0x118>)
 8001f32:	4618      	mov	r0, r3
 8001f34:	f007 fc70 	bl	8009818 <siprintf>

	  ultrasonic_osStatus = osMessageQueueGet(ultrasonic_readings_queue, &ultrasonic_distance, NULL, 0);
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <_Z17RPI_Transmit_TaskPv+0x11c>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	f004 fa76 	bl	8006434 <osMessageQueueGet>
 8001f48:	65f8      	str	r0, [r7, #92]	; 0x5c
	  if (ultrasonic_osStatus != osOK)
 8001f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <_Z17RPI_Transmit_TaskPv+0x46>
	  {
		  strcpy(ultrasonic_str, "USxxx"); // Copy over null-terminating character as well
 8001f50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <_Z17RPI_Transmit_TaskPv+0x120>)
 8001f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f5a:	6018      	str	r0, [r3, #0]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	8019      	strh	r1, [r3, #0]
 8001f60:	e008      	b.n	8001f74 <_Z17RPI_Transmit_TaskPv+0x58>
	  }
	  else
	  {
		  sprintf(ultrasonic_str, "US%.3hu", ultrasonic_distance);
 8001f62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f66:	461a      	mov	r2, r3
 8001f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f6c:	4934      	ldr	r1, [pc, #208]	; (8002040 <_Z17RPI_Transmit_TaskPv+0x124>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f007 fc52 	bl	8009818 <siprintf>
	  }

	  infrared_osStatus = osMessageQueueGet(infrared_data_queue, &infrared_data, NULL, 0);
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <_Z17RPI_Transmit_TaskPv+0x128>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f004 fa58 	bl	8006434 <osMessageQueueGet>
 8001f84:	65b8      	str	r0, [r7, #88]	; 0x58
	  if (infrared_osStatus != osOK)
 8001f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <_Z17RPI_Transmit_TaskPv+0x7e>
	  {
		  strcpy(infrared_str, "ILxxx,IRxxx"); // Copy over null-terminating character as well
 8001f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f90:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <_Z17RPI_Transmit_TaskPv+0x12c>)
 8001f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f98:	e007      	b.n	8001faa <_Z17RPI_Transmit_TaskPv+0x8e>
	  }
	  else
	  {
		  sprintf(infrared_str, "IL%.3hu,IR%.3hu", infrared_data.left_distance, infrared_data.right_distance);
 8001f9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001fa0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001fa4:	4929      	ldr	r1, [pc, #164]	; (800204c <_Z17RPI_Transmit_TaskPv+0x130>)
 8001fa6:	f007 fc37 	bl	8009818 <siprintf>
	  }

	  // Concat all information into a string
	  memset(transmit_msg, 0, sizeof(transmit_msg));
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2223      	movs	r2, #35	; 0x23
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 fb54 	bl	8009660 <memset>
	  sprintf(transmit_msg, "%s,%s,%s", command_str, ultrasonic_str, infrared_str);
 8001fb8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001fbc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001fc0:	f107 0008 	add.w	r0, r7, #8
 8001fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4920      	ldr	r1, [pc, #128]	; (8002050 <_Z17RPI_Transmit_TaskPv+0x134>)
 8001fce:	f007 fc23 	bl	8009818 <siprintf>
	  strcat(transmit_msg, "\n");
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f8fa 	bl	80001d0 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	4413      	add	r3, r2
 8001fe6:	491b      	ldr	r1, [pc, #108]	; (8002054 <_Z17RPI_Transmit_TaskPv+0x138>)
 8001fe8:	461a      	mov	r2, r3
 8001fea:	460b      	mov	r3, r1
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	8013      	strh	r3, [r2, #0]

	  // Enable the DMA to start a transfer process
	  huart3.Instance->CR3 |= USART_CR3_DMAT;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <_Z17RPI_Transmit_TaskPv+0x13c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <_Z17RPI_Transmit_TaskPv+0x13c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ffe:	615a      	str	r2, [r3, #20]
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 8002000:	f107 0408 	add.w	r4, r7, #8
	  		  		(uint32_t)&huart3.Instance->DR, strlen(transmit_msg) + 1);
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <_Z17RPI_Transmit_TaskPv+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3304      	adds	r3, #4
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 800200a:	461d      	mov	r5, r3
	  		  		(uint32_t)&huart3.Instance->DR, strlen(transmit_msg) + 1);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f8dd 	bl	80001d0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	3301      	adds	r3, #1
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 800201a:	462a      	mov	r2, r5
 800201c:	4621      	mov	r1, r4
 800201e:	480f      	ldr	r0, [pc, #60]	; (800205c <_Z17RPI_Transmit_TaskPv+0x140>)
 8002020:	f000 fd98 	bl	8002b54 <HAL_DMA_Start_IT>

	  osDelay(500);
 8002024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002028:	f004 f916 	bl	8006258 <osDelay>
	  sprintf(command_str, "CM%.3hu", (uint16_t)stm32_status);
 800202c:	e77a      	b.n	8001f24 <_Z17RPI_Transmit_TaskPv+0x8>
 800202e:	bf00      	nop
 8002030:	200000d4 	.word	0x200000d4
 8002034:	0800a0e0 	.word	0x0800a0e0
 8002038:	200000dc 	.word	0x200000dc
 800203c:	0800a0e8 	.word	0x0800a0e8
 8002040:	0800a0f0 	.word	0x0800a0f0
 8002044:	200000d8 	.word	0x200000d8
 8002048:	0800a0f8 	.word	0x0800a0f8
 800204c:	0800a104 	.word	0x0800a104
 8002050:	0800a114 	.word	0x0800a114
 8002054:	0800a120 	.word	0x0800a120
 8002058:	20000248 	.word	0x20000248
 800205c:	2000028c 	.word	0x2000028c

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002072:	f000 fbbf 	bl	80027f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40001000 	.word	0x40001000

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	e7fe      	b.n	800208c <Error_Handler+0x8>
	...

08002090 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af02      	add	r7, sp, #8
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d124      	bne.n	80020ea <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d11f      	bne.n	80020ea <_Z41__static_initialization_and_destruction_0ii+0x5a>
		PID_CONS_KP, PID_CONS_KI, PID_CONS_KD, PID_P_ON_E, PID_DIRECT);
 80020aa:	2300      	movs	r3, #0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80020f8 <_Z41__static_initialization_and_destruction_0ii+0x68>
 80020b6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002100 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80020ba:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8002108 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80020c2:	4915      	ldr	r1, [pc, #84]	; (8002118 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80020c4:	4815      	ldr	r0, [pc, #84]	; (800211c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80020c6:	f006 ffab 	bl	8009020 <_ZN3PIDC1EPVdS1_S1_dddii>
		PID_CONS_KP, PID_CONS_KI, PID_CONS_KD, PID_P_ON_E, PID_DIRECT);
 80020ca:	2300      	movs	r3, #0
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	ed9f 2b09 	vldr	d2, [pc, #36]	; 80020f8 <_Z41__static_initialization_and_destruction_0ii+0x68>
 80020d6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8002100 <_Z41__static_initialization_and_destruction_0ii+0x70>
 80020da:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002108 <_Z41__static_initialization_and_destruction_0ii+0x78>
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80020e0:	4a10      	ldr	r2, [pc, #64]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80020e2:	4911      	ldr	r1, [pc, #68]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80020e4:	4811      	ldr	r0, [pc, #68]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80020e6:	f006 ff9b 	bl	8009020 <_ZN3PIDC1EPVdS1_S1_dddii>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	33333333 	.word	0x33333333
 80020fc:	3fd33333 	.word	0x3fd33333
 8002100:	33333333 	.word	0x33333333
 8002104:	3fc33333 	.word	0x3fc33333
 8002108:	00000000 	.word	0x00000000
 800210c:	3ffc0000 	.word	0x3ffc0000
 8002110:	20000098 	.word	0x20000098
 8002114:	200000a0 	.word	0x200000a0
 8002118:	200000a8 	.word	0x200000a8
 800211c:	20000358 	.word	0x20000358
 8002120:	200000b0 	.word	0x200000b0
 8002124:	200000b8 	.word	0x200000b8
 8002128:	200000c0 	.word	0x200000c0
 800212c:	200003d0 	.word	0x200003d0

08002130 <_GLOBAL__sub_I_PID_setpoint_right>:
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
 8002134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ffa9 	bl	8002090 <_Z41__static_initialization_and_destruction_0ii>
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_MspInit+0x54>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_MspInit+0x54>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_MspInit+0x54>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_MspInit+0x54>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_MspInit+0x54>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_MspInit+0x54>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	210f      	movs	r1, #15
 8002182:	f06f 0001 	mvn.w	r0, #1
 8002186:	f000 fc0d 	bl	80029a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a31      	ldr	r2, [pc, #196]	; (800227c <HAL_TIM_Base_MspInit+0xe4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d135      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021e0:	f043 0310 	orr.w	r3, r3, #16
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin;
 80021f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002204:	2301      	movs	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Ultrasonic_Echo_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	481d      	ldr	r0, [pc, #116]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002210:	f001 f848 	bl	80032a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2105      	movs	r1, #5
 8002218:	201b      	movs	r0, #27
 800221a:	f000 fbc3 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800221e:	201b      	movs	r0, #27
 8002220:	f000 fbdc 	bl	80029dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002224:	e026      	b.n	8002274 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM4)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_TIM_Base_MspInit+0xf0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10e      	bne.n	800224e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6413      	str	r3, [r2, #64]	; 0x40
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]
}
 800224c:	e012      	b.n	8002274 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_TIM_Base_MspInit+0xf4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d10d      	bne.n	8002274 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	6453      	str	r3, [r2, #68]	; 0x44
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	bf00      	nop
 8002276:	3730      	adds	r7, #48	; 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40010000 	.word	0x40010000
 8002280:	40023800 	.word	0x40023800
 8002284:	40021000 	.word	0x40021000
 8002288:	40000800 	.word	0x40000800
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b0:	d14b      	bne.n	800234a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MotorA_Encoder_Signal_2_Pin;
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorA_Encoder_Signal_2_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4825      	ldr	r0, [pc, #148]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x128>)
 8002324:	f000 ffbe 	bl	80032a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorA_Encoder_Signal_1_Pin;
 8002328:	2308      	movs	r3, #8
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorA_Encoder_Signal_1_GPIO_Port, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	481e      	ldr	r0, [pc, #120]	; (80023bc <HAL_TIM_Encoder_MspInit+0x12c>)
 8002344:	f000 ffae 	bl	80032a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002348:	e030      	b.n	80023ac <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d12b      	bne.n	80023ac <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6313      	str	r3, [r2, #48]	; 0x30
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorB_Encoder_Signal_1_Pin|MotorB_Encoder_Signal_2_Pin;
 800238c:	23c0      	movs	r3, #192	; 0xc0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800239c:	2302      	movs	r3, #2
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	4804      	ldr	r0, [pc, #16]	; (80023b8 <HAL_TIM_Encoder_MspInit+0x128>)
 80023a8:	f000 ff7c 	bl	80032a4 <HAL_GPIO_Init>
}
 80023ac:	bf00      	nop
 80023ae:	3730      	adds	r7, #48	; 0x30
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40000400 	.word	0x40000400

080023c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_TIM_MspPostInit+0xb0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11f      	bne.n	8002426 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Steering_PWM_Pin;
 8002402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002414:	2302      	movs	r3, #2
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Steering_PWM_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4817      	ldr	r0, [pc, #92]	; (800247c <HAL_TIM_MspPostInit+0xb8>)
 8002420:	f000 ff40 	bl	80032a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002424:	e022      	b.n	800246c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_TIM_MspPostInit+0xbc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d11d      	bne.n	800246c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_TIM_MspPostInit+0xb4>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorA_PWM_Pin|MotorB_PWM_Pin;
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800245c:	2303      	movs	r3, #3
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4807      	ldr	r0, [pc, #28]	; (8002484 <HAL_TIM_MspPostInit+0xc0>)
 8002468:	f000 ff1c 	bl	80032a4 <HAL_GPIO_Init>
}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40000800 	.word	0x40000800
 8002478:	40023800 	.word	0x40023800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40010400 	.word	0x40010400
 8002484:	40020800 	.word	0x40020800

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a34      	ldr	r2, [pc, #208]	; (8002578 <HAL_UART_MspInit+0xf0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d162      	bne.n	8002570 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a32      	ldr	r2, [pc, #200]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_UART_MspInit+0xf4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STM32_RPI_TX_Pin|STM32_RPI_RX_Pin;
 80024e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f4:	2307      	movs	r3, #7
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <HAL_UART_MspInit+0xf8>)
 8002500:	f000 fed0 	bl	80032a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_UART_MspInit+0x100>)
 8002508:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_UART_MspInit+0xfc>)
 800250c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002510:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_UART_MspInit+0xfc>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002524:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002528:	2200      	movs	r2, #0
 800252a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_UART_MspInit+0xfc>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_UART_MspInit+0xfc>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002544:	480f      	ldr	r0, [pc, #60]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002546:	f000 fa57 	bl	80029f8 <HAL_DMA_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002550:	f7ff fd98 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_UART_MspInit+0xfc>)
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_UART_MspInit+0xfc>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2105      	movs	r1, #5
 8002564:	2027      	movs	r0, #39	; 0x27
 8002566:	f000 fa1d 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800256a:	2027      	movs	r0, #39	; 0x27
 800256c:	f000 fa36 	bl	80029dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002570:	bf00      	nop
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40004800 	.word	0x40004800
 800257c:	40023800 	.word	0x40023800
 8002580:	40020800 	.word	0x40020800
 8002584:	2000028c 	.word	0x2000028c
 8002588:	40026058 	.word	0x40026058

0800258c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800259c:	2200      	movs	r2, #0
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	2036      	movs	r0, #54	; 0x36
 80025a2:	f000 f9ff 	bl	80029a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025a6:	2036      	movs	r0, #54	; 0x36
 80025a8:	f000 fa18 	bl	80029dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_InitTick+0xa0>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_InitTick+0xa0>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6413      	str	r3, [r2, #64]	; 0x40
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_InitTick+0xa0>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025c8:	f107 0210 	add.w	r2, r7, #16
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fc64 	bl	8003ea0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025d8:	f001 fc3a 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80025dc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_InitTick+0xa4>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9b      	lsrs	r3, r3, #18
 80025e8:	3b01      	subs	r3, #1
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_InitTick+0xa8>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <HAL_InitTick+0xac>)
 80025f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_InitTick+0xa8>)
 80025f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_InitTick+0xa8>)
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_InitTick+0xa8>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_InitTick+0xa8>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800260c:	4809      	ldr	r0, [pc, #36]	; (8002634 <HAL_InitTick+0xa8>)
 800260e:	f001 fc79 	bl	8003f04 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <HAL_InitTick+0xa8>)
 800261a:	f001 fcc3 	bl	8003fa4 <HAL_TIM_Base_Start_IT>
 800261e:	4603      	mov	r3, r0
 8002620:	e000      	b.n	8002624 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	431bde83 	.word	0x431bde83
 8002634:	20004e24 	.word	0x20004e24
 8002638:	40001000 	.word	0x40001000

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <DMA1_Stream3_IRQHandler+0x10>)
 800266e:	f000 fb5b 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000028c 	.word	0x2000028c

0800267c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <TIM1_CC_IRQHandler+0x10>)
 8002682:	f001 ff55 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200000e0 	.word	0x200000e0

08002690 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART3_IRQHandler+0x10>)
 8002696:	f002 fe75 	bl	8005384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000248 	.word	0x20000248

080026a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM6_DAC_IRQHandler+0x10>)
 80026aa:	f001 ff41 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20004e24 	.word	0x20004e24

080026b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <DMA2_Stream0_IRQHandler+0x10>)
 80026be:	f000 fb33 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002ec 	.word	0x200002ec

080026cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_sbrk+0x5c>)
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <_sbrk+0x60>)
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <_sbrk+0x64>)
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <_sbrk+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d207      	bcs.n	800270c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026fc:	f006 ff76 	bl	80095ec <__errno>
 8002700:	4603      	mov	r3, r0
 8002702:	220c      	movs	r2, #12
 8002704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <_sbrk+0x64>)
 800271c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20020000 	.word	0x20020000
 800272c:	00000400 	.word	0x00000400
 8002730:	20000448 	.word	0x20000448
 8002734:	20004ec0 	.word	0x20004ec0

08002738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002760:	480d      	ldr	r0, [pc, #52]	; (8002798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002762:	490e      	ldr	r1, [pc, #56]	; (800279c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002778:	4c0b      	ldr	r4, [pc, #44]	; (80027a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002786:	f7ff ffd7 	bl	8002738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278a:	f006 ff35 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278e:	f7fe fc41 	bl	8001014 <main>
  bx  lr    
 8002792:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027a0:	0800a370 	.word	0x0800a370
  ldr r2, =_sbss
 80027a4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027a8:	20004ec0 	.word	0x20004ec0

080027ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC_IRQHandler>
	...

080027b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_Init+0x40>)
 80027ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_Init+0x40>)
 80027c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_Init+0x40>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 f8d8 	bl	800298e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027de:	200f      	movs	r0, #15
 80027e0:	f7ff fed4 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e4:	f7ff fcac 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x20>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_IncTick+0x24>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000008 	.word	0x20000008
 8002818:	20004e6c 	.word	0x20004e6c

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20004e6c 	.word	0x20004e6c

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	; (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	; (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	; (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	; (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff4c 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b6:	f7ff ff61 	bl	800287c <__NVIC_GetPriorityGrouping>
 80029ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f7ff ffb1 	bl	8002928 <NVIC_EncodePriority>
 80029c6:	4602      	mov	r2, r0
 80029c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff80 	bl	80028d4 <__NVIC_SetPriority>
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff54 	bl	8002898 <__NVIC_EnableIRQ>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff ff0a 	bl	800281c <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e099      	b.n	8002b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a34:	e00f      	b.n	8002a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a36:	f7ff fef1 	bl	800281c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d908      	bls.n	8002a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e078      	b.n	8002b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e8      	bne.n	8002a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_DMA_Init+0x158>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d107      	bne.n	8002ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d117      	bne.n	8002b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fb55 	bl	80031ac <DMA_CheckFifoParam>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b16:	2301      	movs	r3, #1
 8002b18:	e016      	b.n	8002b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fb0c 	bl	8003140 <DMA_CalcBaseAndBitshift>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	223f      	movs	r2, #63	; 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	f010803f 	.word	0xf010803f

08002b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA_Start_IT+0x26>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e040      	b.n	8002bfc <HAL_DMA_Start_IT+0xa8>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d12f      	bne.n	8002bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa9e 	bl	80030e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	223f      	movs	r2, #63	; 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0216 	orr.w	r2, r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e005      	b.n	8002bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c12:	f7ff fe03 	bl	800281c <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d008      	beq.n	8002c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e052      	b.n	8002cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0216 	bic.w	r2, r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_DMA_Abort+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c86:	e013      	b.n	8002cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c88:	f7ff fdc8 	bl	800281c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d90c      	bls.n	8002cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e015      	b.n	8002cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e4      	bne.n	8002c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	223f      	movs	r2, #63	; 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00c      	b.n	8002d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2205      	movs	r2, #5
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_DMA_IRQHandler+0x258>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a92      	ldr	r2, [pc, #584]	; (8002f84 <HAL_DMA_IRQHandler+0x25c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2208      	movs	r2, #8
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2204      	movs	r2, #4
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	2210      	movs	r2, #16
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d043      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03c      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	2210      	movs	r2, #16
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d024      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e01f      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 808e 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8086 	beq.w	8002fc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d136      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0216 	bic.w	r2, r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x1da>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0208 	bic.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	223f      	movs	r2, #63	; 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07d      	beq.n	8003032 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
        }
        return;
 8002f3e:	e078      	b.n	8003032 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01c      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d030      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e02b      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d027      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e022      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
 8002f80:	20000000 	.word	0x20000000
 8002f84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d032      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2205      	movs	r2, #5
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d307      	bcc.n	800300e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f2      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x2ca>
 800300c:	e000      	b.n	8003010 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800300e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e000      	b.n	8003034 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003032:	bf00      	nop
    }
  }
}
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop

0800303c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	460b      	mov	r3, r1
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_DMA_RegisterCallback+0x20>
 8003058:	2302      	movs	r3, #2
 800305a:	e03c      	b.n	80030d6 <HAL_DMA_RegisterCallback+0x9a>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d129      	bne.n	80030c4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d829      	bhi.n	80030ca <HAL_DMA_RegisterCallback+0x8e>
 8003076:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_DMA_RegisterCallback+0x40>)
 8003078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307c:	08003095 	.word	0x08003095
 8003080:	0800309d 	.word	0x0800309d
 8003084:	080030a5 	.word	0x080030a5
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030bd 	.word	0x080030bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800309a:	e017      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80030a2:	e013      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80030aa:	e00f      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80030b2:	e00b      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80030ba:	e007      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80030c2:	e003      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
 80030c8:	e000      	b.n	80030cc <HAL_DMA_RegisterCallback+0x90>
      break;
 80030ca:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop

080030e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003100:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d108      	bne.n	8003124 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003122:	e007      	b.n	8003134 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3b10      	subs	r3, #16
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800315a:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <DMA_CalcBaseAndBitshift+0x68>)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d909      	bls.n	8003182 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	1d1a      	adds	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	659a      	str	r2, [r3, #88]	; 0x58
 8003180:	e007      	b.n	8003192 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	aaaaaaab 	.word	0xaaaaaaab
 80031a8:	0800a1c0 	.word	0x0800a1c0

080031ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11f      	bne.n	8003206 <DMA_CheckFifoParam+0x5a>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d856      	bhi.n	800327a <DMA_CheckFifoParam+0xce>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <DMA_CheckFifoParam+0x28>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080031f7 	.word	0x080031f7
 80031dc:	080031e5 	.word	0x080031e5
 80031e0:	0800327b 	.word	0x0800327b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d046      	beq.n	800327e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e043      	b.n	800327e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031fe:	d140      	bne.n	8003282 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003204:	e03d      	b.n	8003282 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320e:	d121      	bne.n	8003254 <DMA_CheckFifoParam+0xa8>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d837      	bhi.n	8003286 <DMA_CheckFifoParam+0xda>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <DMA_CheckFifoParam+0x70>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003233 	.word	0x08003233
 8003224:	0800322d 	.word	0x0800322d
 8003228:	08003245 	.word	0x08003245
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e030      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d025      	beq.n	800328a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003242:	e022      	b.n	800328a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800324c:	d11f      	bne.n	800328e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003252:	e01c      	b.n	800328e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d903      	bls.n	8003262 <DMA_CheckFifoParam+0xb6>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d003      	beq.n	8003268 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003260:	e018      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
      break;
 8003266:	e015      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e00b      	b.n	8003292 <DMA_CheckFifoParam+0xe6>
      break;
 800327a:	bf00      	nop
 800327c:	e00a      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e008      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e006      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;   
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <DMA_CheckFifoParam+0xe8>
      break;
 8003292:	bf00      	nop
    }
  } 
  
  return status; 
 8003294:	7bfb      	ldrb	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e16b      	b.n	8003598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 815a 	bne.w	8003592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d130      	bne.n	8003358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4013      	ands	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0201 	and.w	r2, r3, #1
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d017      	beq.n	8003394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d123      	bne.n	80033e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	220f      	movs	r2, #15
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69b9      	ldr	r1, [r7, #24]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80b4 	beq.w	8003592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a5f      	ldr	r2, [pc, #380]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_GPIO_Init+0x30c>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_GPIO_Init+0x310>)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_GPIO_Init+0x314>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <HAL_GPIO_Init+0x226>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a51      	ldr	r2, [pc, #324]	; (80035bc <HAL_GPIO_Init+0x318>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d025      	beq.n	80034c6 <HAL_GPIO_Init+0x222>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a50      	ldr	r2, [pc, #320]	; (80035c0 <HAL_GPIO_Init+0x31c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01f      	beq.n	80034c2 <HAL_GPIO_Init+0x21e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4f      	ldr	r2, [pc, #316]	; (80035c4 <HAL_GPIO_Init+0x320>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d019      	beq.n	80034be <HAL_GPIO_Init+0x21a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4e      	ldr	r2, [pc, #312]	; (80035c8 <HAL_GPIO_Init+0x324>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x216>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_GPIO_Init+0x328>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00d      	beq.n	80034b6 <HAL_GPIO_Init+0x212>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4c      	ldr	r2, [pc, #304]	; (80035d0 <HAL_GPIO_Init+0x32c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <HAL_GPIO_Init+0x20e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4b      	ldr	r2, [pc, #300]	; (80035d4 <HAL_GPIO_Init+0x330>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_GPIO_Init+0x20a>
 80034aa:	2307      	movs	r3, #7
 80034ac:	e00e      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ae:	2308      	movs	r3, #8
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034b2:	2306      	movs	r3, #6
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x228>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <HAL_GPIO_Init+0x310>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_GPIO_Init+0x334>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350e:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003514:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <HAL_GPIO_Init+0x334>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_GPIO_Init+0x334>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae90 	bls.w	80032c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	; 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40013c00 	.word	0x40013c00

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f8:	e003      	b.n	8003602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	041a      	lsls	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	619a      	str	r2, [r3, #24]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e264      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d075      	beq.n	800371a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362e:	4ba3      	ldr	r3, [pc, #652]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b04      	cmp	r3, #4
 8003638:	d00c      	beq.n	8003654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363a:	4ba0      	ldr	r3, [pc, #640]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003642:	2b08      	cmp	r3, #8
 8003644:	d112      	bne.n	800366c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4b9d      	ldr	r3, [pc, #628]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003652:	d10b      	bne.n	800366c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	4b99      	ldr	r3, [pc, #612]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d05b      	beq.n	8003718 <HAL_RCC_OscConfig+0x108>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d157      	bne.n	8003718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e23f      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x74>
 8003676:	4b91      	ldr	r3, [pc, #580]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a90      	ldr	r2, [pc, #576]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e01d      	b.n	80036c0 <HAL_RCC_OscConfig+0xb0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0x98>
 800368e:	4b8b      	ldr	r3, [pc, #556]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a8a      	ldr	r2, [pc, #552]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b88      	ldr	r3, [pc, #544]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a87      	ldr	r2, [pc, #540]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0xb0>
 80036a8:	4b84      	ldr	r3, [pc, #528]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a83      	ldr	r2, [pc, #524]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b81      	ldr	r3, [pc, #516]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a80      	ldr	r2, [pc, #512]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7ff f8a8 	bl	800281c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7ff f8a4 	bl	800281c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e204      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	4b76      	ldr	r3, [pc, #472]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xc0>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff f894 	bl	800281c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f8:	f7ff f890 	bl	800281c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e1f0      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0xe8>
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d063      	beq.n	80037ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003726:	4b65      	ldr	r3, [pc, #404]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b62      	ldr	r3, [pc, #392]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373a:	2b08      	cmp	r3, #8
 800373c:	d11c      	bne.n	8003778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x152>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e1c4      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b56      	ldr	r3, [pc, #344]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4952      	ldr	r1, [pc, #328]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	e03a      	b.n	80037ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003780:	4b4f      	ldr	r3, [pc, #316]	; (80038c0 <HAL_RCC_OscConfig+0x2b0>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7ff f849 	bl	800281c <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378e:	f7ff f845 	bl	800281c <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e1a5      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	4940      	ldr	r1, [pc, #256]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
 80037c0:	e015      	b.n	80037ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <HAL_RCC_OscConfig+0x2b0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7ff f828 	bl	800281c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d0:	f7ff f824 	bl	800281c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e184      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d030      	beq.n	800385c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_RCC_OscConfig+0x2b4>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7ff f808 	bl	800281c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003810:	f7ff f804 	bl	800281c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e164      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	4b26      	ldr	r3, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x200>
 800382e:	e015      	b.n	800385c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003830:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RCC_OscConfig+0x2b4>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fe fff1 	bl	800281c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383e:	f7fe ffed 	bl	800281c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e14d      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a0 	beq.w	80039aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <HAL_RCC_OscConfig+0x2ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_OscConfig+0x2b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d121      	bne.n	80038ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_RCC_OscConfig+0x2b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <HAL_RCC_OscConfig+0x2b8>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fe ffb3 	bl	800281c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e011      	b.n	80038de <HAL_RCC_OscConfig+0x2ce>
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
 80038c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe ffa6 	bl	800281c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e106      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x4e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0x2f0>
 80038f2:	4b81      	ldr	r3, [pc, #516]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a80      	ldr	r2, [pc, #512]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	e01c      	b.n	800393a <HAL_RCC_OscConfig+0x32a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_OscConfig+0x312>
 8003908:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a77      	ldr	r2, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e00b      	b.n	800393a <HAL_RCC_OscConfig+0x32a>
 8003922:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a74      	ldr	r2, [pc, #464]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a71      	ldr	r2, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe ff6b 	bl	800281c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe ff67 	bl	800281c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0c5      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCC_OscConfig+0x33a>
 800396c:	e014      	b.n	8003998 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396e:	f7fe ff55 	bl	800281c <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe ff51 	bl	800281c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0af      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a55      	ldr	r2, [pc, #340]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 809b 	beq.w	8003aea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b4:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d05c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d141      	bne.n	8003a4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x4ec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe ff25 	bl	800281c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe ff21 	bl	800281c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e081      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	019b      	lsls	r3, r3, #6
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	061b      	lsls	r3, r3, #24
 8003a18:	4937      	ldr	r1, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x4ec>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe fefa 	bl	800281c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fe fef6 	bl	800281c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e056      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x41c>
 8003a4a:	e04e      	b.n	8003aea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x4ec>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fee3 	bl	800281c <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe fedf 	bl	800281c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e03f      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <HAL_RCC_OscConfig+0x44a>
 8003a78:	e037      	b.n	8003aea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e032      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_RCC_OscConfig+0x4e8>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d028      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d121      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d11a      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003abc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d111      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40007000 	.word	0x40007000
 8003af8:	40023800 	.word	0x40023800
 8003afc:	42470060 	.word	0x42470060

08003b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0cc      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d90c      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d044      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d119      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e06f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e067      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4934      	ldr	r1, [pc, #208]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf0:	f7fe fe14 	bl	800281c <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fe fe10 	bl	800281c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e04f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d20c      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 f821 	bl	8003ccc <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fc70 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023c00 	.word	0x40023c00
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	0800a1a8 	.word	0x0800a1a8
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	6079      	str	r1, [r7, #4]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	60f9      	str	r1, [r7, #12]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cde:	2100      	movs	r1, #0
 8003ce0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce2:	4952      	ldr	r1, [pc, #328]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ce4:	6889      	ldr	r1, [r1, #8]
 8003ce6:	f001 010c 	and.w	r1, r1, #12
 8003cea:	2908      	cmp	r1, #8
 8003cec:	d00d      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x3e>
 8003cee:	2908      	cmp	r1, #8
 8003cf0:	f200 8094 	bhi.w	8003e1c <HAL_RCC_GetSysClockFreq+0x150>
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x32>
 8003cf8:	2904      	cmp	r1, #4
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x38>
 8003cfc:	e08e      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cfe:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d00:	60bb      	str	r3, [r7, #8]
       break;
 8003d02:	e08e      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d06:	60bb      	str	r3, [r7, #8]
      break;
 8003d08:	e08b      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d0a:	4948      	ldr	r1, [pc, #288]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d0c:	6849      	ldr	r1, [r1, #4]
 8003d0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d14:	4945      	ldr	r1, [pc, #276]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d16:	6849      	ldr	r1, [r1, #4]
 8003d18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d024      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d20:	4942      	ldr	r1, [pc, #264]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d22:	6849      	ldr	r1, [r1, #4]
 8003d24:	0989      	lsrs	r1, r1, #6
 8003d26:	4608      	mov	r0, r1
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d30:	f04f 0500 	mov.w	r5, #0
 8003d34:	ea00 0204 	and.w	r2, r0, r4
 8003d38:	ea01 0305 	and.w	r3, r1, r5
 8003d3c:	493d      	ldr	r1, [pc, #244]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d3e:	fb01 f003 	mul.w	r0, r1, r3
 8003d42:	2100      	movs	r1, #0
 8003d44:	fb01 f102 	mul.w	r1, r1, r2
 8003d48:	1844      	adds	r4, r0, r1
 8003d4a:	493a      	ldr	r1, [pc, #232]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d4c:	fba2 0101 	umull	r0, r1, r2, r1
 8003d50:	1863      	adds	r3, r4, r1
 8003d52:	4619      	mov	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	f7fc ff06 	bl	8000b6c <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e04a      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	461a      	mov	r2, r3
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	ea02 0400 	and.w	r4, r2, r0
 8003d82:	ea03 0501 	and.w	r5, r3, r1
 8003d86:	4620      	mov	r0, r4
 8003d88:	4629      	mov	r1, r5
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	014b      	lsls	r3, r1, #5
 8003d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d98:	0142      	lsls	r2, r0, #5
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	1b00      	subs	r0, r0, r4
 8003da0:	eb61 0105 	sbc.w	r1, r1, r5
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	018b      	lsls	r3, r1, #6
 8003dae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003db2:	0182      	lsls	r2, r0, #6
 8003db4:	1a12      	subs	r2, r2, r0
 8003db6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	00d9      	lsls	r1, r3, #3
 8003dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dc8:	00d0      	lsls	r0, r2, #3
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	1912      	adds	r2, r2, r4
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	f04f 0100 	mov.w	r1, #0
 8003ddc:	0299      	lsls	r1, r3, #10
 8003dde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003de2:	0290      	lsls	r0, r2, #10
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	f7fc feba 	bl	8000b6c <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	60bb      	str	r3, [r7, #8]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e1e:	60bb      	str	r3, [r7, #8]
      break;
 8003e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e22:	68bb      	ldr	r3, [r7, #8]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	017d7840 	.word	0x017d7840

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000000 	.word	0x20000000

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0a9b      	lsrs	r3, r3, #10
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	0800a1b8 	.word	0x0800a1b8

08003e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e7c:	f7ff ffdc 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0b5b      	lsrs	r3, r3, #13
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	0800a1b8 	.word	0x0800a1b8

08003ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	220f      	movs	r2, #15
 8003eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0203 	and.w	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <HAL_RCC_GetClockConfig+0x5c>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_GetClockConfig+0x5c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_GetClockConfig+0x5c>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_RCC_GetClockConfig+0x60>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	601a      	str	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40023c00 	.word	0x40023c00

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e041      	b.n	8003f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe f934 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fdae 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e04e      	b.n	800405a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d01d      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	; (800406c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <HAL_TIM_Base_Start_IT+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	; (8004078 <HAL_TIM_Base_Start_IT+0xd4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_Base_Start_IT+0xd8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x80>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_TIM_Base_Start_IT+0xdc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b06      	cmp	r3, #6
 8004034:	d010      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0201 	orr.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	e007      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800

08004084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e041      	b.n	800411a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f839 	bl	8004122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fcee 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_TIM_PWM_Start+0x24>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e022      	b.n	80041a2 <HAL_TIM_PWM_Start+0x6a>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d109      	bne.n	8004176 <HAL_TIM_PWM_Start+0x3e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e015      	b.n	80041a2 <HAL_TIM_PWM_Start+0x6a>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d109      	bne.n	8004190 <HAL_TIM_PWM_Start+0x58>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e008      	b.n	80041a2 <HAL_TIM_PWM_Start+0x6a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07c      	b.n	80042a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Start+0x82>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b8:	e013      	b.n	80041e2 <HAL_TIM_PWM_Start+0xaa>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0x92>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	e00b      	b.n	80041e2 <HAL_TIM_PWM_Start+0xaa>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Start+0xa2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d8:	e003      	b.n	80041e2 <HAL_TIM_PWM_Start+0xaa>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2201      	movs	r2, #1
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 ff44 	bl	8005078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <HAL_TIM_PWM_Start+0x174>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIM_PWM_Start+0xcc>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <HAL_TIM_PWM_Start+0x178>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d101      	bne.n	8004208 <HAL_TIM_PWM_Start+0xd0>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_TIM_PWM_Start+0xd2>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a22      	ldr	r2, [pc, #136]	; (80042ac <HAL_TIM_PWM_Start+0x174>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d01d      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_TIM_PWM_Start+0x17c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <HAL_TIM_PWM_Start+0x180>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <HAL_TIM_PWM_Start+0x184>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <HAL_TIM_PWM_Start+0x178>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_TIM_PWM_Start+0x188>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIM_PWM_Start+0x136>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <HAL_TIM_PWM_Start+0x18c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d111      	bne.n	8004292 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d010      	beq.n	80042a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	e007      	b.n	80042a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40010400 	.word	0x40010400
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40001800 	.word	0x40001800

080042c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e097      	b.n	800440c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7fd ffcd 	bl	8002290 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4610      	mov	r0, r2
 800431e:	f000 fbc1 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	4313      	orrs	r3, r2
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004368:	f023 030c 	bic.w	r3, r3, #12
 800436c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	4313      	orrs	r3, r2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	011a      	lsls	r2, r3, #4
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	4313      	orrs	r3, r2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	4313      	orrs	r3, r2
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004424:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800442c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004434:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800443c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800444a:	7b7b      	ldrb	r3, [r7, #13]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e069      	b.n	8004528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004464:	e031      	b.n	80044ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d110      	bne.n	800448e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800446c:	7bbb      	ldrb	r3, [r7, #14]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004472:	7b3b      	ldrb	r3, [r7, #12]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d001      	beq.n	800447c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e055      	b.n	8004528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448c:	e01d      	b.n	80044ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d105      	bne.n	80044a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d102      	bne.n	80044a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044a0:	7b3b      	ldrb	r3, [r7, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e03e      	b.n	8004528 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_TIM_Encoder_Start+0xc4>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d008      	beq.n	80044e8 <HAL_TIM_Encoder_Start+0xd4>
 80044d6:	e00f      	b.n	80044f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fdc9 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 80044e6:	e016      	b.n	8004516 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2201      	movs	r2, #1
 80044ee:	2104      	movs	r1, #4
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fdc1 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 80044f6:	e00e      	b.n	8004516 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fdb9 	bl	8005078 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	2104      	movs	r1, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdb2 	bl	8005078 <TIM_CCxChannelCmd>
      break;
 8004514:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d122      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d11b      	bne.n	800458c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0202 	mvn.w	r2, #2
 800455c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa77 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa69 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa7a 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d122      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d11b      	bne.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0204 	mvn.w	r2, #4
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fa4d 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa3f 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa50 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d122      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d11b      	bne.n	8004634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa23 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa15 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa26 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d122      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b10      	cmp	r3, #16
 800464e:	d11b      	bne.n	8004688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0210 	mvn.w	r2, #16
 8004658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9f9 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004674:	e005      	b.n	8004682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9eb 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f9fc 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0201 	mvn.w	r2, #1
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fcd6 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d10e      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fdca 	bl	8005274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9c1 	bl	8004a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b20      	cmp	r3, #32
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b20      	cmp	r3, #32
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0220 	mvn.w	r2, #32
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fd94 	bl	8005260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800475a:	2302      	movs	r3, #2
 800475c:	e0ae      	b.n	80048bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	f200 809f 	bhi.w	80048ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080048ad 	.word	0x080048ad
 800477c:	080048ad 	.word	0x080048ad
 8004780:	080048ad 	.word	0x080048ad
 8004784:	080047e9 	.word	0x080047e9
 8004788:	080048ad 	.word	0x080048ad
 800478c:	080048ad 	.word	0x080048ad
 8004790:	080048ad 	.word	0x080048ad
 8004794:	0800482b 	.word	0x0800482b
 8004798:	080048ad 	.word	0x080048ad
 800479c:	080048ad 	.word	0x080048ad
 80047a0:	080048ad 	.word	0x080048ad
 80047a4:	0800486b 	.word	0x0800486b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa18 	bl	8004be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6999      	ldr	r1, [r3, #24]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	619a      	str	r2, [r3, #24]
      break;
 80047e6:	e064      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa68 	bl	8004cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6999      	ldr	r1, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
      break;
 8004828:	e043      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fabd 	bl	8004db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f042 0208 	orr.w	r2, r2, #8
 8004844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	61da      	str	r2, [r3, #28]
      break;
 8004868:	e023      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fb11 	bl	8004e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69d9      	ldr	r1, [r3, #28]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	61da      	str	r2, [r3, #28]
      break;
 80048aa:	e002      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
      break;
 80048b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_ConfigClockSource+0x1c>
 80048dc:	2302      	movs	r3, #2
 80048de:	e0b4      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x186>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004918:	d03e      	beq.n	8004998 <HAL_TIM_ConfigClockSource+0xd4>
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491e:	f200 8087 	bhi.w	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004926:	f000 8086 	beq.w	8004a36 <HAL_TIM_ConfigClockSource+0x172>
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	d87f      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b70      	cmp	r3, #112	; 0x70
 8004932:	d01a      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xa6>
 8004934:	2b70      	cmp	r3, #112	; 0x70
 8004936:	d87b      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b60      	cmp	r3, #96	; 0x60
 800493a:	d050      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x11a>
 800493c:	2b60      	cmp	r3, #96	; 0x60
 800493e:	d877      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b50      	cmp	r3, #80	; 0x50
 8004942:	d03c      	beq.n	80049be <HAL_TIM_ConfigClockSource+0xfa>
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d873      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d058      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x13a>
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d86f      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b30      	cmp	r3, #48	; 0x30
 8004952:	d064      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d86b      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b20      	cmp	r3, #32
 800495a:	d060      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 800495c:	2b20      	cmp	r3, #32
 800495e:	d867      	bhi.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05c      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004964:	2b10      	cmp	r3, #16
 8004966:	d05a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	e062      	b.n	8004a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f000 fb5d 	bl	8005038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800498c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	609a      	str	r2, [r3, #8]
      break;
 8004996:	e04f      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f000 fb46 	bl	8005038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ba:	609a      	str	r2, [r3, #8]
      break;
 80049bc:	e03c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 faba 	bl	8004f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2150      	movs	r1, #80	; 0x50
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb13 	bl	8005002 <TIM_ITRx_SetConfig>
      break;
 80049dc:	e02c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f000 fad9 	bl	8004fa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2160      	movs	r1, #96	; 0x60
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fb03 	bl	8005002 <TIM_ITRx_SetConfig>
      break;
 80049fc:	e01c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 fa9a 	bl	8004f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2140      	movs	r1, #64	; 0x40
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 faf3 	bl	8005002 <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e00c      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f000 faea 	bl	8005002 <TIM_ITRx_SetConfig>
      break;
 8004a2e:	e003      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e000      	b.n	8004a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3d      	ldr	r2, [pc, #244]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02b      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d027      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d023      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01f      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d01b      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d017      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <TIM_Base_SetConfig+0x128>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00f      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <TIM_Base_SetConfig+0x134>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a24      	ldr	r2, [pc, #144]	; (8004bdc <TIM_Base_SetConfig+0x138>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <TIM_Base_SetConfig+0x13c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40010400 	.word	0x40010400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800
 8004bd8:	40001800 	.word	0x40001800
 8004bdc:	40001c00 	.word	0x40001c00
 8004be0:	40002000 	.word	0x40002000

08004be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0201 	bic.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <TIM_OC1_SetConfig+0xd8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_OC1_SetConfig+0x64>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <TIM_OC1_SetConfig+0xdc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10c      	bne.n	8004c62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0308 	bic.w	r3, r3, #8
 8004c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <TIM_OC1_SetConfig+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC1_SetConfig+0x8e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a14      	ldr	r2, [pc, #80]	; (8004cc0 <TIM_OC1_SetConfig+0xdc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0320 	bic.w	r3, r3, #32
 8004d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <TIM_OC2_SetConfig+0xe4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC2_SetConfig+0x68>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a21      	ldr	r2, [pc, #132]	; (8004dac <TIM_OC2_SetConfig+0xe8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10d      	bne.n	8004d48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <TIM_OC2_SetConfig+0xe4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC2_SetConfig+0x94>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a16      	ldr	r2, [pc, #88]	; (8004dac <TIM_OC2_SetConfig+0xe8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d113      	bne.n	8004d80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40010400 	.word	0x40010400

08004db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <TIM_OC3_SetConfig+0xe0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC3_SetConfig+0x66>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <TIM_OC3_SetConfig+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d10d      	bne.n	8004e32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <TIM_OC3_SetConfig+0xe0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC3_SetConfig+0x92>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <TIM_OC3_SetConfig+0xe4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d113      	bne.n	8004e6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <TIM_OC4_SetConfig+0xa4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC4_SetConfig+0x68>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <TIM_OC4_SetConfig+0xa8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d109      	bne.n	8004f14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 030a 	bic.w	r3, r3, #10
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0210 	bic.w	r2, r3, #16
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	031b      	lsls	r3, r3, #12
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	f043 0307 	orr.w	r3, r3, #7
 8005024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	431a      	orrs	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4313      	orrs	r3, r2
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2201      	movs	r2, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1a      	ldr	r2, [r3, #32]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	43db      	mvns	r3, r3
 800509a:	401a      	ands	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1a      	ldr	r2, [r3, #32]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	fa01 f303 	lsl.w	r3, r1, r3
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e05a      	b.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d022      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d01d      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d018      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00e      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d004      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10c      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40010400 	.word	0x40010400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40001800 	.word	0x40001800

080051bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e03d      	b.n	8005254 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4313      	orrs	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e03f      	b.n	800531a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd f8ea 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fcdb 	bl	8005c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	4613      	mov	r3, r2
 800532e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b20      	cmp	r3, #32
 800533a:	d11d      	bne.n	8005378 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_UART_Receive_IT+0x26>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e016      	b.n	800537a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_UART_Receive_IT+0x38>
 8005356:	2302      	movs	r3, #2
 8005358:	e00f      	b.n	800537a <HAL_UART_Receive_IT+0x58>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	461a      	mov	r2, r3
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fab6 	bl	80058e0 <UART_Start_Receive_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	e000      	b.n	800537a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b0ba      	sub	sp, #232	; 0xe8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_UART_IRQHandler+0x66>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fb95 	bl	8005b12 <UART_Receive_IT>
      return;
 80053e8:	e256      	b.n	8005898 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80de 	beq.w	80055b0 <HAL_UART_IRQHandler+0x22c>
 80053f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005404:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80d1 	beq.w	80055b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_UART_IRQHandler+0xae>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_UART_IRQHandler+0xd2>
 800543e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f043 0202 	orr.w	r2, r3, #2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_UART_IRQHandler+0xf6>
 8005462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d011      	beq.n	80054aa <HAL_UART_IRQHandler+0x126>
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d105      	bne.n	800549e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0208 	orr.w	r2, r3, #8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 81ed 	beq.w	800588e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_UART_IRQHandler+0x14e>
 80054c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fb20 	bl	8005b12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_UART_IRQHandler+0x17a>
 80054f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d04f      	beq.n	800559e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa28 	bl	8005954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d141      	bne.n	8005596 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800552c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800553e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005542:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800554a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1d9      	bne.n	8005512 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	2b00      	cmp	r3, #0
 8005564:	d013      	beq.n	800558e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <HAL_UART_IRQHandler+0x3dc>)
 800556c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	4618      	mov	r0, r3
 8005574:	f7fd fbb6 	bl	8002ce4 <HAL_DMA_Abort_IT>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00e      	b.n	80055ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f990 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e00a      	b.n	80055ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f98c 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	e006      	b.n	80055ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f988 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055aa:	e170      	b.n	800588e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	bf00      	nop
    return;
 80055ae:	e16e      	b.n	800588e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 814a 	bne.w	800584e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8143 	beq.w	800584e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 813c 	beq.w	800584e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	f040 80b4 	bne.w	8005764 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8140 	beq.w	8005892 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561a:	429a      	cmp	r2, r3
 800561c:	f080 8139 	bcs.w	8005892 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005626:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005632:	f000 8088 	beq.w	8005746 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800564c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800566e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800567a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d9      	bne.n	8005636 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e1      	bne.n	8005682 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e3      	bne.n	80056be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005716:	f023 0310 	bic.w	r3, r3, #16
 800571a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005728:	65ba      	str	r2, [r7, #88]	; 0x58
 800572a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800572e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	4618      	mov	r0, r3
 8005742:	f7fd fa5f 	bl	8002c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574e:	b29b      	uxth	r3, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8b6 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800575c:	e099      	b.n	8005892 <HAL_UART_IRQHandler+0x50e>
 800575e:	bf00      	nop
 8005760:	08005a1b 	.word	0x08005a1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576c:	b29b      	uxth	r3, r3
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 808b 	beq.w	8005896 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8086 	beq.w	8005896 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ae:	647a      	str	r2, [r7, #68]	; 0x44
 80057b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e3      	bne.n	800578a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	623b      	str	r3, [r7, #32]
   return(result);
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057e6:	633a      	str	r2, [r7, #48]	; 0x30
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e3      	bne.n	80057c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	330c      	adds	r3, #12
 800580e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	60fb      	str	r3, [r7, #12]
   return(result);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0310 	bic.w	r3, r3, #16
 800581e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800582c:	61fa      	str	r2, [r7, #28]
 800582e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	617b      	str	r3, [r7, #20]
   return(result);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e3      	bne.n	8005808 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f83e 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800584c:	e023      	b.n	8005896 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_UART_IRQHandler+0x4ea>
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8eb 	bl	8005a42 <UART_Transmit_IT>
    return;
 800586c:	e014      	b.n	8005898 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00e      	beq.n	8005898 <HAL_UART_IRQHandler+0x514>
 800587a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f92b 	bl	8005ae2 <UART_EndTransmit_IT>
    return;
 800588c:	e004      	b.n	8005898 <HAL_UART_IRQHandler+0x514>
    return;
 800588e:	bf00      	nop
 8005890:	e002      	b.n	8005898 <HAL_UART_IRQHandler+0x514>
      return;
 8005892:	bf00      	nop
 8005894:	e000      	b.n	8005898 <HAL_UART_IRQHandler+0x514>
      return;
 8005896:	bf00      	nop
  }
}
 8005898:	37e8      	adds	r7, #232	; 0xe8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop

080058a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	88fa      	ldrh	r2, [r7, #6]
 80058fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2222      	movs	r2, #34	; 0x22
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005924:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0201 	orr.w	r2, r2, #1
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0220 	orr.w	r2, r2, #32
 8005944:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b095      	sub	sp, #84	; 0x54
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800597c:	643a      	str	r2, [r7, #64]	; 0x40
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3314      	adds	r3, #20
 80059ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e5      	bne.n	8005990 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d119      	bne.n	8005a00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60bb      	str	r3, [r7, #8]
   return(result);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	647b      	str	r3, [r7, #68]	; 0x44
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ec:	61ba      	str	r2, [r7, #24]
 80059ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	613b      	str	r3, [r7, #16]
   return(result);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e5      	bne.n	80059cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a0e:	bf00      	nop
 8005a10:	3754      	adds	r7, #84	; 0x54
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff ff3d 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b21      	cmp	r3, #33	; 0x21
 8005a54:	d13e      	bne.n	8005ad4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d114      	bne.n	8005a8a <UART_Transmit_IT+0x48>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d110      	bne.n	8005a8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	1c9a      	adds	r2, r3, #2
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]
 8005a88:	e008      	b.n	8005a9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6211      	str	r1, [r2, #32]
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10f      	bne.n	8005ad0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005abe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ace:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff fecc 	bl	80058a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b08c      	sub	sp, #48	; 0x30
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b22      	cmp	r3, #34	; 0x22
 8005b24:	f040 80ab 	bne.w	8005c7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b30:	d117      	bne.n	8005b62 <UART_Receive_IT+0x50>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d113      	bne.n	8005b62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b60:	e026      	b.n	8005bb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b74:	d007      	beq.n	8005b86 <UART_Receive_IT+0x74>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <UART_Receive_IT+0x82>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	e008      	b.n	8005ba6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d15a      	bne.n	8005c7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0220 	bic.w	r2, r2, #32
 8005bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d135      	bne.n	8005c70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f023 0310 	bic.w	r3, r3, #16
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	623a      	str	r2, [r7, #32]
 8005c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	69f9      	ldr	r1, [r7, #28]
 8005c30:	6a3a      	ldr	r2, [r7, #32]
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d10a      	bne.n	8005c62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fe2d 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
 8005c6e:	e002      	b.n	8005c76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fb f91d 	bl	8000eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	e002      	b.n	8005c80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e000      	b.n	8005c80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3730      	adds	r7, #48	; 0x30
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b09f      	sub	sp, #124	; 0x7c
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	68d9      	ldr	r1, [r3, #12]
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	ea40 0301 	orr.w	r3, r0, r1
 8005ca8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ccc:	f021 010c 	bic.w	r1, r1, #12
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce6:	6999      	ldr	r1, [r3, #24]
 8005ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	ea40 0301 	orr.w	r3, r0, r1
 8005cf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4bc5      	ldr	r3, [pc, #788]	; (800600c <UART_SetConfig+0x384>)
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d004      	beq.n	8005d06 <UART_SetConfig+0x7e>
 8005cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	4bc3      	ldr	r3, [pc, #780]	; (8006010 <UART_SetConfig+0x388>)
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d103      	bne.n	8005d0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d06:	f7fe f8b7 	bl	8003e78 <HAL_RCC_GetPCLK2Freq>
 8005d0a:	6778      	str	r0, [r7, #116]	; 0x74
 8005d0c:	e002      	b.n	8005d14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d0e:	f7fe f89f 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8005d12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1c:	f040 80b6 	bne.w	8005e8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d22:	461c      	mov	r4, r3
 8005d24:	f04f 0500 	mov.w	r5, #0
 8005d28:	4622      	mov	r2, r4
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	1891      	adds	r1, r2, r2
 8005d2e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d30:	415b      	adcs	r3, r3
 8005d32:	647b      	str	r3, [r7, #68]	; 0x44
 8005d34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d38:	1912      	adds	r2, r2, r4
 8005d3a:	eb45 0303 	adc.w	r3, r5, r3
 8005d3e:	f04f 0000 	mov.w	r0, #0
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	00d9      	lsls	r1, r3, #3
 8005d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d4c:	00d0      	lsls	r0, r2, #3
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	1911      	adds	r1, r2, r4
 8005d54:	6639      	str	r1, [r7, #96]	; 0x60
 8005d56:	416b      	adcs	r3, r5
 8005d58:	667b      	str	r3, [r7, #100]	; 0x64
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d74:	f7fa fefa 	bl	8000b6c <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4ba5      	ldr	r3, [pc, #660]	; (8006014 <UART_SetConfig+0x38c>)
 8005d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	011e      	lsls	r6, r3, #4
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	461c      	mov	r4, r3
 8005d8a:	f04f 0500 	mov.w	r5, #0
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	1891      	adds	r1, r2, r2
 8005d94:	6339      	str	r1, [r7, #48]	; 0x30
 8005d96:	415b      	adcs	r3, r3
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d9e:	1912      	adds	r2, r2, r4
 8005da0:	eb45 0303 	adc.w	r3, r5, r3
 8005da4:	f04f 0000 	mov.w	r0, #0
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	00d9      	lsls	r1, r3, #3
 8005dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005db2:	00d0      	lsls	r0, r2, #3
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	1911      	adds	r1, r2, r4
 8005dba:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dbc:	416b      	adcs	r3, r5
 8005dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dda:	f7fa fec7 	bl	8000b6c <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b8c      	ldr	r3, [pc, #560]	; (8006014 <UART_SetConfig+0x38c>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a87      	ldr	r2, [pc, #540]	; (8006014 <UART_SetConfig+0x38c>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e04:	441e      	add	r6, r3
 8005e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f04f 0100 	mov.w	r1, #0
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	1894      	adds	r4, r2, r2
 8005e14:	623c      	str	r4, [r7, #32]
 8005e16:	415b      	adcs	r3, r3
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e1e:	1812      	adds	r2, r2, r0
 8005e20:	eb41 0303 	adc.w	r3, r1, r3
 8005e24:	f04f 0400 	mov.w	r4, #0
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	00dd      	lsls	r5, r3, #3
 8005e2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e32:	00d4      	lsls	r4, r2, #3
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	1814      	adds	r4, r2, r0
 8005e3a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e3c:	414b      	adcs	r3, r1
 8005e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	461a      	mov	r2, r3
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	61b9      	str	r1, [r7, #24]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e5a:	f7fa fe87 	bl	8000b6c <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4b6c      	ldr	r3, [pc, #432]	; (8006014 <UART_SetConfig+0x38c>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	; 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	3332      	adds	r3, #50	; 0x32
 8005e76:	4a67      	ldr	r2, [pc, #412]	; (8006014 <UART_SetConfig+0x38c>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 0207 	and.w	r2, r3, #7
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4432      	add	r2, r6
 8005e88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e8a:	e0b9      	b.n	8006000 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8e:	461c      	mov	r4, r3
 8005e90:	f04f 0500 	mov.w	r5, #0
 8005e94:	4622      	mov	r2, r4
 8005e96:	462b      	mov	r3, r5
 8005e98:	1891      	adds	r1, r2, r2
 8005e9a:	6139      	str	r1, [r7, #16]
 8005e9c:	415b      	adcs	r3, r3
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ea4:	1912      	adds	r2, r2, r4
 8005ea6:	eb45 0303 	adc.w	r3, r5, r3
 8005eaa:	f04f 0000 	mov.w	r0, #0
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	00d9      	lsls	r1, r3, #3
 8005eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eb8:	00d0      	lsls	r0, r2, #3
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	eb12 0804 	adds.w	r8, r2, r4
 8005ec2:	eb43 0905 	adc.w	r9, r3, r5
 8005ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	008b      	lsls	r3, r1, #2
 8005eda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ede:	0082      	lsls	r2, r0, #2
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	f7fa fe42 	bl	8000b6c <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4b49      	ldr	r3, [pc, #292]	; (8006014 <UART_SetConfig+0x38c>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011e      	lsls	r6, r3, #4
 8005ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f04f 0100 	mov.w	r1, #0
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	1894      	adds	r4, r2, r2
 8005f04:	60bc      	str	r4, [r7, #8]
 8005f06:	415b      	adcs	r3, r3
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f0e:	1812      	adds	r2, r2, r0
 8005f10:	eb41 0303 	adc.w	r3, r1, r3
 8005f14:	f04f 0400 	mov.w	r4, #0
 8005f18:	f04f 0500 	mov.w	r5, #0
 8005f1c:	00dd      	lsls	r5, r3, #3
 8005f1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f22:	00d4      	lsls	r4, r2, #3
 8005f24:	4622      	mov	r2, r4
 8005f26:	462b      	mov	r3, r5
 8005f28:	1814      	adds	r4, r2, r0
 8005f2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f2c:	414b      	adcs	r3, r1
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f04f 0100 	mov.w	r1, #0
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	008b      	lsls	r3, r1, #2
 8005f44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f48:	0082      	lsls	r2, r0, #2
 8005f4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f4e:	f7fa fe0d 	bl	8000b6c <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <UART_SetConfig+0x38c>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	2164      	movs	r1, #100	; 0x64
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	3332      	adds	r3, #50	; 0x32
 8005f6a:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <UART_SetConfig+0x38c>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f76:	441e      	add	r6, r3
 8005f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	1894      	adds	r4, r2, r2
 8005f86:	603c      	str	r4, [r7, #0]
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f90:	1812      	adds	r2, r2, r0
 8005f92:	eb41 0303 	adc.w	r3, r1, r3
 8005f96:	f04f 0400 	mov.w	r4, #0
 8005f9a:	f04f 0500 	mov.w	r5, #0
 8005f9e:	00dd      	lsls	r5, r3, #3
 8005fa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fa4:	00d4      	lsls	r4, r2, #3
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	462b      	mov	r3, r5
 8005faa:	eb12 0a00 	adds.w	sl, r2, r0
 8005fae:	eb43 0b01 	adc.w	fp, r3, r1
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	008b      	lsls	r3, r1, #2
 8005fc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fca:	0082      	lsls	r2, r0, #2
 8005fcc:	4650      	mov	r0, sl
 8005fce:	4659      	mov	r1, fp
 8005fd0:	f7fa fdcc 	bl	8000b6c <__aeabi_uldivmod>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4b0e      	ldr	r3, [pc, #56]	; (8006014 <UART_SetConfig+0x38c>)
 8005fda:	fba3 1302 	umull	r1, r3, r3, r2
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2164      	movs	r1, #100	; 0x64
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	3332      	adds	r3, #50	; 0x32
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <UART_SetConfig+0x38c>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4432      	add	r2, r6
 8005ffe:	609a      	str	r2, [r3, #8]
}
 8006000:	bf00      	nop
 8006002:	377c      	adds	r7, #124	; 0x7c
 8006004:	46bd      	mov	sp, r7
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	bf00      	nop
 800600c:	40011000 	.word	0x40011000
 8006010:	40011400 	.word	0x40011400
 8006014:	51eb851f 	.word	0x51eb851f

08006018 <__NVIC_SetPriority>:
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	6039      	str	r1, [r7, #0]
 8006022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006028:	2b00      	cmp	r3, #0
 800602a:	db0a      	blt.n	8006042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	490c      	ldr	r1, [pc, #48]	; (8006064 <__NVIC_SetPriority+0x4c>)
 8006032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006036:	0112      	lsls	r2, r2, #4
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	440b      	add	r3, r1
 800603c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006040:	e00a      	b.n	8006058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	b2da      	uxtb	r2, r3
 8006046:	4908      	ldr	r1, [pc, #32]	; (8006068 <__NVIC_SetPriority+0x50>)
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	3b04      	subs	r3, #4
 8006050:	0112      	lsls	r2, r2, #4
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	440b      	add	r3, r1
 8006056:	761a      	strb	r2, [r3, #24]
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	e000e100 	.word	0xe000e100
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <SysTick_Handler+0x1c>)
 8006072:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006074:	f001 ff6e 	bl	8007f54 <xTaskGetSchedulerState>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d001      	beq.n	8006082 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800607e:	f002 fd53 	bl	8008b28 <xPortSysTickHandler>
  }
}
 8006082:	bf00      	nop
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	e000e010 	.word	0xe000e010

0800608c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006090:	2100      	movs	r1, #0
 8006092:	f06f 0004 	mvn.w	r0, #4
 8006096:	f7ff ffbf 	bl	8006018 <__NVIC_SetPriority>
#endif
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a6:	f3ef 8305 	mrs	r3, IPSR
 80060aa:	603b      	str	r3, [r7, #0]
  return(result);
 80060ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060b2:	f06f 0305 	mvn.w	r3, #5
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	e00c      	b.n	80060d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ba:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <osKernelInitialize+0x44>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <osKernelInitialize+0x44>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e002      	b.n	80060d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060d4:	687b      	ldr	r3, [r7, #4]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000044c 	.word	0x2000044c

080060e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	603b      	str	r3, [r7, #0]
  return(result);
 80060f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osKernelStart+0x1a>
    stat = osErrorISR;
 80060fa:	f06f 0305 	mvn.w	r3, #5
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e010      	b.n	8006124 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <osKernelStart+0x48>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d109      	bne.n	800611e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800610a:	f7ff ffbf 	bl	800608c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <osKernelStart+0x48>)
 8006110:	2202      	movs	r2, #2
 8006112:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006114:	f001 fac2 	bl	800769c <vTaskStartScheduler>
      stat = osOK;
 8006118:	2300      	movs	r3, #0
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e002      	b.n	8006124 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006124:	687b      	ldr	r3, [r7, #4]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	2000044c 	.word	0x2000044c

08006134 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af04      	add	r7, sp, #16
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006144:	f3ef 8305 	mrs	r3, IPSR
 8006148:	617b      	str	r3, [r7, #20]
  return(result);
 800614a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800614c:	2b00      	cmp	r3, #0
 800614e:	d17e      	bne.n	800624e <osThreadNew+0x11a>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d07b      	beq.n	800624e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800615a:	2318      	movs	r3, #24
 800615c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d045      	beq.n	80061fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <osThreadNew+0x48>
        name = attr->name;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <osThreadNew+0x6e>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b38      	cmp	r3, #56	; 0x38
 8006194:	d805      	bhi.n	80061a2 <osThreadNew+0x6e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <osThreadNew+0x72>
        return (NULL);
 80061a2:	2300      	movs	r3, #0
 80061a4:	e054      	b.n	8006250 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00e      	beq.n	80061dc <osThreadNew+0xa8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2bbb      	cmp	r3, #187	; 0xbb
 80061c4:	d90a      	bls.n	80061dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <osThreadNew+0xa8>
        mem = 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e010      	b.n	80061fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10c      	bne.n	80061fe <osThreadNew+0xca>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d108      	bne.n	80061fe <osThreadNew+0xca>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <osThreadNew+0xca>
          mem = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	e001      	b.n	80061fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d110      	bne.n	8006226 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800620c:	9202      	str	r2, [sp, #8]
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f001 f852 	bl	80072c4 <xTaskCreateStatic>
 8006220:	4603      	mov	r3, r0
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e013      	b.n	800624e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d110      	bne.n	800624e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	b29a      	uxth	r2, r3
 8006230:	f107 0310 	add.w	r3, r7, #16
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f001 f89d 	bl	800737e <xTaskCreate>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d001      	beq.n	800624e <osThreadNew+0x11a>
            hTask = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800624e:	693b      	ldr	r3, [r7, #16]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3728      	adds	r7, #40	; 0x28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006260:	f3ef 8305 	mrs	r3, IPSR
 8006264:	60bb      	str	r3, [r7, #8]
  return(result);
 8006266:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <osDelay+0x1c>
    stat = osErrorISR;
 800626c:	f06f 0305 	mvn.w	r3, #5
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e007      	b.n	8006284 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <osDelay+0x2c>
      vTaskDelay(ticks);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f9d8 	bl	8007634 <vTaskDelay>
    }
  }

  return (stat);
 8006284:	68fb      	ldr	r3, [r7, #12]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800628e:	b580      	push	{r7, lr}
 8006290:	b08a      	sub	sp, #40	; 0x28
 8006292:	af02      	add	r7, sp, #8
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800629e:	f3ef 8305 	mrs	r3, IPSR
 80062a2:	613b      	str	r3, [r7, #16]
  return(result);
 80062a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d15f      	bne.n	800636a <osMessageQueueNew+0xdc>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d05c      	beq.n	800636a <osMessageQueueNew+0xdc>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d059      	beq.n	800636a <osMessageQueueNew+0xdc>
    mem = -1;
 80062b6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d029      	beq.n	8006316 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d012      	beq.n	80062f0 <osMessageQueueNew+0x62>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b4f      	cmp	r3, #79	; 0x4f
 80062d0:	d90e      	bls.n	80062f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <osMessageQueueNew+0x62>
        mem = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	e014      	b.n	800631a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <osMessageQueueNew+0x8c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10c      	bne.n	800631a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <osMessageQueueNew+0x8c>
          mem = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	e001      	b.n	800631a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d10b      	bne.n	8006338 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2100      	movs	r1, #0
 800632a:	9100      	str	r1, [sp, #0]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa4e 	bl	80067d0 <xQueueGenericCreateStatic>
 8006334:	61f8      	str	r0, [r7, #28]
 8006336:	e008      	b.n	800634a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d105      	bne.n	800634a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800633e:	2200      	movs	r2, #0
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fabc 	bl	80068c0 <xQueueGenericCreate>
 8006348:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e001      	b.n	8006362 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006362:	6979      	ldr	r1, [r7, #20]
 8006364:	69f8      	ldr	r0, [r7, #28]
 8006366:	f000 ff4f 	bl	8007208 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800636a:	69fb      	ldr	r3, [r7, #28]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800638c:	f3ef 8305 	mrs	r3, IPSR
 8006390:	617b      	str	r3, [r7, #20]
  return(result);
 8006392:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006394:	2b00      	cmp	r3, #0
 8006396:	d028      	beq.n	80063ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <osMessageQueuePut+0x36>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <osMessageQueuePut+0x36>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80063aa:	f06f 0303 	mvn.w	r3, #3
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e038      	b.n	8006424 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80063b6:	f107 0210 	add.w	r2, r7, #16
 80063ba:	2300      	movs	r3, #0
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	69b8      	ldr	r0, [r7, #24]
 80063c0:	f000 fbda 	bl	8006b78 <xQueueGenericSendFromISR>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d003      	beq.n	80063d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80063ca:	f06f 0302 	mvn.w	r3, #2
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e028      	b.n	8006424 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d025      	beq.n	8006424 <osMessageQueuePut+0xb0>
 80063d8:	4b15      	ldr	r3, [pc, #84]	; (8006430 <osMessageQueuePut+0xbc>)
 80063da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	e01c      	b.n	8006424 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <osMessageQueuePut+0x82>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80063f6:	f06f 0303 	mvn.w	r3, #3
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e012      	b.n	8006424 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80063fe:	2300      	movs	r3, #0
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	69b8      	ldr	r0, [r7, #24]
 8006406:	f000 fab9 	bl	800697c <xQueueGenericSend>
 800640a:	4603      	mov	r3, r0
 800640c:	2b01      	cmp	r3, #1
 800640e:	d009      	beq.n	8006424 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006416:	f06f 0301 	mvn.w	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	e002      	b.n	8006424 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800641e:	f06f 0302 	mvn.w	r3, #2
 8006422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006424:	69fb      	ldr	r3, [r7, #28]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3720      	adds	r7, #32
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644a:	f3ef 8305 	mrs	r3, IPSR
 800644e:	617b      	str	r3, [r7, #20]
  return(result);
 8006450:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006452:	2b00      	cmp	r3, #0
 8006454:	d028      	beq.n	80064a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <osMessageQueueGet+0x34>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <osMessageQueueGet+0x34>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006468:	f06f 0303 	mvn.w	r3, #3
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	e037      	b.n	80064e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006474:	f107 0310 	add.w	r3, r7, #16
 8006478:	461a      	mov	r2, r3
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	69b8      	ldr	r0, [r7, #24]
 800647e:	f000 fcf7 	bl	8006e70 <xQueueReceiveFromISR>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d003      	beq.n	8006490 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006488:	f06f 0302 	mvn.w	r3, #2
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e027      	b.n	80064e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d024      	beq.n	80064e0 <osMessageQueueGet+0xac>
 8006496:	4b15      	ldr	r3, [pc, #84]	; (80064ec <osMessageQueueGet+0xb8>)
 8006498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	e01b      	b.n	80064e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <osMessageQueueGet+0x80>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80064b4:	f06f 0303 	mvn.w	r3, #3
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e011      	b.n	80064e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	69b8      	ldr	r0, [r7, #24]
 80064c2:	f000 fbf5 	bl	8006cb0 <xQueueReceive>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d009      	beq.n	80064e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80064d2:	f06f 0301 	mvn.w	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	e002      	b.n	80064e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80064da:	f06f 0302 	mvn.w	r3, #2
 80064de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80064e0:	69fb      	ldr	r3, [r7, #28]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e00e      	b.n	8006526 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006508:	f3ef 8305 	mrs	r3, IPSR
 800650c:	60fb      	str	r3, [r7, #12]
  return(result);
 800650e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006514:	6938      	ldr	r0, [r7, #16]
 8006516:	f000 fd49 	bl	8006fac <uxQueueMessagesWaitingFromISR>
 800651a:	6178      	str	r0, [r7, #20]
 800651c:	e003      	b.n	8006526 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800651e:	6938      	ldr	r0, [r7, #16]
 8006520:	f000 fd26 	bl	8006f70 <uxQueueMessagesWaiting>
 8006524:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006526:	697b      	ldr	r3, [r7, #20]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a07      	ldr	r2, [pc, #28]	; (800655c <vApplicationGetIdleTaskMemory+0x2c>)
 8006540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a06      	ldr	r2, [pc, #24]	; (8006560 <vApplicationGetIdleTaskMemory+0x30>)
 8006546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	601a      	str	r2, [r3, #0]
}
 800654e:	bf00      	nop
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000450 	.word	0x20000450
 8006560:	2000050c 	.word	0x2000050c

08006564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a07      	ldr	r2, [pc, #28]	; (8006590 <vApplicationGetTimerTaskMemory+0x2c>)
 8006574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4a06      	ldr	r2, [pc, #24]	; (8006594 <vApplicationGetTimerTaskMemory+0x30>)
 800657a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	2000070c 	.word	0x2000070c
 8006594:	200007c8 	.word	0x200007c8

08006598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f103 0208 	add.w	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f103 0208 	add.w	r2, r3, #8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f103 0208 	add.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d103      	bne.n	800665a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e00c      	b.n	8006674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3308      	adds	r3, #8
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	e002      	b.n	8006668 <vListInsert+0x2e>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	d2f6      	bcs.n	8006662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
}
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6892      	ldr	r2, [r2, #8]
 80066c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6852      	ldr	r2, [r2, #4]
 80066cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d103      	bne.n	80066e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	1e5a      	subs	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800672a:	f002 f96b 	bl	8008a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	441a      	add	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	3b01      	subs	r3, #1
 800675c:	68f9      	ldr	r1, [r7, #12]
 800675e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	441a      	add	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d114      	bne.n	80067aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3310      	adds	r3, #16
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fa1f 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d012      	beq.n	80067be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006798:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <xQueueGenericReset+0xcc>)
 800679a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	e009      	b.n	80067be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3310      	adds	r3, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fef2 	bl	8006598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3324      	adds	r3, #36	; 0x24
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff feed 	bl	8006598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067be:	f002 f951 	bl	8008a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067c2:	2301      	movs	r3, #1
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <xQueueGenericCreateStatic+0x52>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <xQueueGenericCreateStatic+0x56>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xQueueGenericCreateStatic+0x58>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	623b      	str	r3, [r7, #32]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <xQueueGenericCreateStatic+0x7e>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueGenericCreateStatic+0x82>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueGenericCreateStatic+0x84>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61fb      	str	r3, [r7, #28]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800686e:	2350      	movs	r3, #80	; 0x50
 8006870:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b50      	cmp	r3, #80	; 0x50
 8006876:	d00a      	beq.n	800688e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	61bb      	str	r3, [r7, #24]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800688e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4613      	mov	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f83f 	bl	8006934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3730      	adds	r7, #48	; 0x30
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	613b      	str	r3, [r7, #16]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	fb02 f303 	mul.w	r3, r2, r3
 80068f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3350      	adds	r3, #80	; 0x50
 80068f8:	4618      	mov	r0, r3
 80068fa:	f002 f9a5 	bl	8008c48 <pvPortMalloc>
 80068fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d011      	beq.n	800692a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	3350      	adds	r3, #80	; 0x50
 800690e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006918:	79fa      	ldrb	r2, [r7, #7]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f805 	bl	8006934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800692a:	69bb      	ldr	r3, [r7, #24]
	}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e002      	b.n	8006956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006962:	2101      	movs	r1, #1
 8006964:	69b8      	ldr	r0, [r7, #24]
 8006966:	f7ff fecb 	bl	8006700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	; 0x38
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800698a:	2300      	movs	r3, #0
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xQueueGenericSend+0x32>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <xQueueGenericSend+0x40>
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <xQueueGenericSend+0x44>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <xQueueGenericSend+0x46>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <xQueueGenericSend+0x60>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d103      	bne.n	80069ea <xQueueGenericSend+0x6e>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <xQueueGenericSend+0x72>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericSend+0x74>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xQueueGenericSend+0x8e>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	623b      	str	r3, [r7, #32]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a0a:	f001 faa3 	bl	8007f54 <xTaskGetSchedulerState>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xQueueGenericSend+0x9e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <xQueueGenericSend+0xa2>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueGenericSend+0xa4>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xQueueGenericSend+0xbe>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61fb      	str	r3, [r7, #28]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a3a:	f001 ffe3 	bl	8008a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <xQueueGenericSend+0xd4>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d129      	bne.n	8006aa4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a56:	f000 fac7 	bl	8006fe8 <prvCopyDataToQueue>
 8006a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 f8b1 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d013      	beq.n	8006a9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a74:	4b3f      	ldr	r3, [pc, #252]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	e00a      	b.n	8006a9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a9c:	f001 ffe2 	bl	8008a64 <vPortExitCritical>
				return pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e063      	b.n	8006b6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aaa:	f001 ffdb 	bl	8008a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e05c      	b.n	8006b6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d106      	bne.n	8006ac6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f8eb 	bl	8007c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ac6:	f001 ffcd 	bl	8008a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aca:	f000 fe57 	bl	800777c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ace:	f001 ff99 	bl	8008a04 <vPortEnterCritical>
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ade:	d103      	bne.n	8006ae8 <xQueueGenericSend+0x16c>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aee:	b25b      	sxtb	r3, r3
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSend+0x182>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006afe:	f001 ffb1 	bl	8008a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b02:	1d3a      	adds	r2, r7, #4
 8006b04:	f107 0314 	add.w	r3, r7, #20
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f8da 	bl	8007cc4 <xTaskCheckForTimeOut>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d124      	bne.n	8006b60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b18:	f000 fb5e 	bl	80071d8 <prvIsQueueFull>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d018      	beq.n	8006b54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	3310      	adds	r3, #16
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f800 	bl	8007b30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b32:	f000 fae9 	bl	8007108 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b36:	f000 fe2f 	bl	8007798 <xTaskResumeAll>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f af7c 	bne.w	8006a3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xQueueGenericSend+0x1f8>)
 8006b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	e772      	b.n	8006a3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b56:	f000 fad7 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b5a:	f000 fe1d 	bl	8007798 <xTaskResumeAll>
 8006b5e:	e76c      	b.n	8006a3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b62:	f000 fad1 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b66:	f000 fe17 	bl	8007798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3738      	adds	r7, #56	; 0x38
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b090      	sub	sp, #64	; 0x40
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <xQueueGenericSendFromISR+0x3c>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <xQueueGenericSendFromISR+0x40>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <xQueueGenericSendFromISR+0x42>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d103      	bne.n	8006be2 <xQueueGenericSendFromISR+0x6a>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <xQueueGenericSendFromISR+0x6e>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <xQueueGenericSendFromISR+0x70>
 8006be6:	2300      	movs	r3, #0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	623b      	str	r3, [r7, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	e7fe      	b.n	8006c00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c02:	f001 ffe1 	bl	8008bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c06:	f3ef 8211 	mrs	r2, BASEPRI
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	61fa      	str	r2, [r7, #28]
 8006c1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <xQueueGenericSendFromISR+0xbc>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d12f      	bne.n	8006c94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c4a:	f000 f9cd 	bl	8006fe8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d112      	bne.n	8006c7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d016      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 ffb3 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e007      	b.n	8006c8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c82:	3301      	adds	r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	b25a      	sxtb	r2, r3
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c92:	e001      	b.n	8006c98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ca2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3740      	adds	r7, #64	; 0x40
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08c      	sub	sp, #48	; 0x30
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <xQueueReceive+0x30>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	623b      	str	r3, [r7, #32]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <xQueueReceive+0x3e>
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <xQueueReceive+0x42>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <xQueueReceive+0x44>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <xQueueReceive+0x5e>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	61fb      	str	r3, [r7, #28]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d0e:	f001 f921 	bl	8007f54 <xTaskGetSchedulerState>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <xQueueReceive+0x6e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <xQueueReceive+0x72>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueReceive+0x74>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xQueueReceive+0x8e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	61bb      	str	r3, [r7, #24]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d3e:	f001 fe61 	bl	8008a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01f      	beq.n	8006d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d52:	f000 f9b3 	bl	80070bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	3310      	adds	r3, #16
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 ff30 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d76:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <xQueueReceive+0x1bc>)
 8006d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d86:	f001 fe6d 	bl	8008a64 <vPortExitCritical>
				return pdPASS;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e069      	b.n	8006e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d94:	f001 fe66 	bl	8008a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	e062      	b.n	8006e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da2:	f107 0310 	add.w	r3, r7, #16
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 ff76 	bl	8007c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db0:	f001 fe58 	bl	8008a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db4:	f000 fce2 	bl	800777c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006db8:	f001 fe24 	bl	8008a04 <vPortEnterCritical>
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d103      	bne.n	8006dd2 <xQueueReceive+0x122>
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d103      	bne.n	8006de8 <xQueueReceive+0x138>
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de8:	f001 fe3c 	bl	8008a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dec:	1d3a      	adds	r2, r7, #4
 8006dee:	f107 0310 	add.w	r3, r7, #16
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 ff65 	bl	8007cc4 <xTaskCheckForTimeOut>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d123      	bne.n	8006e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e02:	f000 f9d3 	bl	80071ac <prvIsQueueEmpty>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d017      	beq.n	8006e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4611      	mov	r1, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fe8b 	bl	8007b30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1c:	f000 f974 	bl	8007108 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e20:	f000 fcba 	bl	8007798 <xTaskResumeAll>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d189      	bne.n	8006d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <xQueueReceive+0x1bc>)
 8006e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	e780      	b.n	8006d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3e:	f000 f963 	bl	8007108 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e42:	f000 fca9 	bl	8007798 <xTaskResumeAll>
 8006e46:	e77a      	b.n	8006d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4a:	f000 f95d 	bl	8007108 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e4e:	f000 fca3 	bl	8007798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e54:	f000 f9aa 	bl	80071ac <prvIsQueueEmpty>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f43f af6f 	beq.w	8006d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	e000ed04 	.word	0xe000ed04

08006e70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08e      	sub	sp, #56	; 0x38
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	623b      	str	r3, [r7, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <xQueueReceiveFromISR+0x3a>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <xQueueReceiveFromISR+0x3e>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueReceiveFromISR+0x40>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	61fb      	str	r3, [r7, #28]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eca:	f001 fe7d 	bl	8008bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ece:	f3ef 8211 	mrs	r2, BASEPRI
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61ba      	str	r2, [r7, #24]
 8006ee4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ee6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d02f      	beq.n	8006f56 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f04:	f000 f8da 	bl	80070bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d112      	bne.n	8006f40 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d016      	beq.n	8006f50 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	3310      	adds	r3, #16
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 fe52 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e007      	b.n	8006f50 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f44:	3301      	adds	r3, #1
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	b25a      	sxtb	r2, r3
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
 8006f54:	e001      	b.n	8006f5a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f383 8811 	msr	BASEPRI, r3
}
 8006f64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3738      	adds	r7, #56	; 0x38
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	60bb      	str	r3, [r7, #8]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006f94:	f001 fd36 	bl	8008a04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006f9e:	f001 fd61 	bl	8008a64 <vPortExitCritical>

	return uxReturn;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	60fb      	str	r3, [r7, #12]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006fda:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d14d      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ffbc 	bl	8007f90 <xTaskPriorityDisinherit>
 8007018:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	e043      	b.n	80070aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d119      	bne.n	800705c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6858      	ldr	r0, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	461a      	mov	r2, r3
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	f002 fb06 	bl	8009644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	441a      	add	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d32b      	bcc.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e026      	b.n	80070aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68d8      	ldr	r0, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	461a      	mov	r2, r3
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	f002 faec 	bl	8009644 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	425b      	negs	r3, r3
 8007076:	441a      	add	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d207      	bcs.n	8007098 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	425b      	negs	r3, r3
 8007092:	441a      	add	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d105      	bne.n	80070aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070b2:	697b      	ldr	r3, [r7, #20]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d303      	bcc.n	80070f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68d9      	ldr	r1, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	461a      	mov	r2, r3
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f002 faa2 	bl	8009644 <memcpy>
	}
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007110:	f001 fc78 	bl	8008a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800711a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711c:	e011      	b.n	8007142 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fd50 	bl	8007bd0 <xTaskRemoveFromEventList>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007136:	f000 fe27 	bl	8007d88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dce9      	bgt.n	800711e <prvUnlockQueue+0x16>
 800714a:	e000      	b.n	800714e <prvUnlockQueue+0x46>
					break;
 800714c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	22ff      	movs	r2, #255	; 0xff
 8007152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007156:	f001 fc85 	bl	8008a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800715a:	f001 fc53 	bl	8008a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007164:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007166:	e011      	b.n	800718c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3310      	adds	r3, #16
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fd2b 	bl	8007bd0 <xTaskRemoveFromEventList>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007180:	f000 fe02 	bl	8007d88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	3b01      	subs	r3, #1
 8007188:	b2db      	uxtb	r3, r3
 800718a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800718c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007190:	2b00      	cmp	r3, #0
 8007192:	dce9      	bgt.n	8007168 <prvUnlockQueue+0x60>
 8007194:	e000      	b.n	8007198 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007196:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071a0:	f001 fc60 	bl	8008a64 <vPortExitCritical>
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 fc26 	bl	8008a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f001 fc4b 	bl	8008a64 <vPortExitCritical>

	return xReturn;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071e0:	f001 fc10 	bl	8008a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d102      	bne.n	80071f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e001      	b.n	80071fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071fa:	f001 fc33 	bl	8008a64 <vPortExitCritical>

	return xReturn;
 80071fe:	68fb      	ldr	r3, [r7, #12]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e014      	b.n	8007242 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007218:	4a0f      	ldr	r2, [pc, #60]	; (8007258 <vQueueAddToRegistry+0x50>)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007224:	490c      	ldr	r1, [pc, #48]	; (8007258 <vQueueAddToRegistry+0x50>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800722e:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <vQueueAddToRegistry+0x50>)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800723a:	e006      	b.n	800724a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b07      	cmp	r3, #7
 8007246:	d9e7      	bls.n	8007218 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20004e70 	.word	0x20004e70

0800725c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800726c:	f001 fbca 	bl	8008a04 <vPortEnterCritical>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007276:	b25b      	sxtb	r3, r3
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d103      	bne.n	8007286 <vQueueWaitForMessageRestricted+0x2a>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d103      	bne.n	800729c <vQueueWaitForMessageRestricted+0x40>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800729c:	f001 fbe2 	bl	8008a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fc61 	bl	8007b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072b6:	6978      	ldr	r0, [r7, #20]
 80072b8:	f7ff ff26 	bl	8007108 <prvUnlockQueue>
	}
 80072bc:	bf00      	nop
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08e      	sub	sp, #56	; 0x38
 80072c8:	af04      	add	r7, sp, #16
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	623b      	str	r3, [r7, #32]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xTaskCreateStatic+0x46>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	61fb      	str	r3, [r7, #28]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800730a:	23bc      	movs	r3, #188	; 0xbc
 800730c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2bbc      	cmp	r3, #188	; 0xbc
 8007312:	d00a      	beq.n	800732a <xTaskCreateStatic+0x66>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	61bb      	str	r3, [r7, #24]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800732a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01e      	beq.n	8007370 <xTaskCreateStatic+0xac>
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01b      	beq.n	8007370 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007340:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	2202      	movs	r2, #2
 8007346:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800734a:	2300      	movs	r3, #0
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f850 	bl	8007408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800736a:	f000 f8f3 	bl	8007554 <prvAddNewTaskToReadyList>
 800736e:	e001      	b.n	8007374 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007374:	697b      	ldr	r3, [r7, #20]
	}
 8007376:	4618      	mov	r0, r3
 8007378:	3728      	adds	r7, #40	; 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800737e:	b580      	push	{r7, lr}
 8007380:	b08c      	sub	sp, #48	; 0x30
 8007382:	af04      	add	r7, sp, #16
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fc58 	bl	8008c48 <pvPortMalloc>
 8007398:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00e      	beq.n	80073be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073a0:	20bc      	movs	r0, #188	; 0xbc
 80073a2:	f001 fc51 	bl	8008c48 <pvPortMalloc>
 80073a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
 80073b4:	e005      	b.n	80073c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b6:	6978      	ldr	r0, [r7, #20]
 80073b8:	f001 fd12 	bl	8008de0 <vPortFree>
 80073bc:	e001      	b.n	80073c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d017      	beq.n	80073f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9303      	str	r3, [sp, #12]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f80e 	bl	8007408 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ec:	69f8      	ldr	r0, [r7, #28]
 80073ee:	f000 f8b1 	bl	8007554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073f2:	2301      	movs	r3, #1
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e002      	b.n	80073fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295
 80073fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007400:	4618      	mov	r0, r3
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	461a      	mov	r2, r3
 8007420:	21a5      	movs	r1, #165	; 0xa5
 8007422:	f002 f91d 	bl	8009660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007430:	3b01      	subs	r3, #1
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <prvInitialiseNewTask+0x58>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617b      	str	r3, [r7, #20]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01f      	beq.n	80074a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	e012      	b.n	8007492 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	7819      	ldrb	r1, [r3, #0]
 8007474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	3334      	adds	r3, #52	; 0x34
 800747c:	460a      	mov	r2, r1
 800747e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b0f      	cmp	r3, #15
 8007496:	d9e9      	bls.n	800746c <prvInitialiseNewTask+0x64>
 8007498:	e000      	b.n	800749c <prvInitialiseNewTask+0x94>
			{
				break;
 800749a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074a4:	e003      	b.n	80074ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	2b37      	cmp	r3, #55	; 0x37
 80074b2:	d901      	bls.n	80074b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074b4:	2337      	movs	r3, #55	; 0x37
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2200      	movs	r2, #0
 80074c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	3304      	adds	r3, #4
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff f882 	bl	80065d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	3318      	adds	r3, #24
 80074d8:	4618      	mov	r0, r3
 80074da:	f7ff f87d 	bl	80065d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	3354      	adds	r3, #84	; 0x54
 8007508:	2260      	movs	r2, #96	; 0x60
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f002 f8a7 	bl	8009660 <memset>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <prvInitialiseNewTask+0x140>)
 8007516:	659a      	str	r2, [r3, #88]	; 0x58
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	4a0c      	ldr	r2, [pc, #48]	; (800754c <prvInitialiseNewTask+0x144>)
 800751c:	65da      	str	r2, [r3, #92]	; 0x5c
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	4a0b      	ldr	r2, [pc, #44]	; (8007550 <prvInitialiseNewTask+0x148>)
 8007522:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	69b8      	ldr	r0, [r7, #24]
 800752a:	f001 f941 	bl	80087b0 <pxPortInitialiseStack>
 800752e:	4602      	mov	r2, r0
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007540:	bf00      	nop
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	0800a1e8 	.word	0x0800a1e8
 800754c:	0800a208 	.word	0x0800a208
 8007550:	0800a1c8 	.word	0x0800a1c8

08007554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800755c:	f001 fa52 	bl	8008a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007560:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	4a2c      	ldr	r2, [pc, #176]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 8007568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800756a:	4b2c      	ldr	r3, [pc, #176]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007572:	4a2a      	ldr	r2, [pc, #168]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007578:	4b27      	ldr	r3, [pc, #156]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d110      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007580:	f000 fc26 	bl	8007dd0 <prvInitialiseTaskLists>
 8007584:	e00d      	b.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007586:	4b26      	ldr	r3, [pc, #152]	; (8007620 <prvAddNewTaskToReadyList+0xcc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	429a      	cmp	r2, r3
 800759a:	d802      	bhi.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800759c:	4a1f      	ldr	r2, [pc, #124]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075a2:	4b20      	ldr	r3, [pc, #128]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075ac:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <prvAddNewTaskToReadyList+0xd4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <prvAddNewTaskToReadyList+0x74>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a18      	ldr	r2, [pc, #96]	; (8007628 <prvAddNewTaskToReadyList+0xd4>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a15      	ldr	r2, [pc, #84]	; (800762c <prvAddNewTaskToReadyList+0xd8>)
 80075d6:	441a      	add	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7ff f807 	bl	80065f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075e4:	f001 fa3e 	bl	8008a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <prvAddNewTaskToReadyList+0xcc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d207      	bcs.n	800760e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <prvAddNewTaskToReadyList+0xdc>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	2000109c 	.word	0x2000109c
 800761c:	20000bc8 	.word	0x20000bc8
 8007620:	200010a8 	.word	0x200010a8
 8007624:	200010b8 	.word	0x200010b8
 8007628:	200010a4 	.word	0x200010a4
 800762c:	20000bcc 	.word	0x20000bcc
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d017      	beq.n	8007676 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <vTaskDelay+0x60>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <vTaskDelay+0x30>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60bb      	str	r3, [r7, #8]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007664:	f000 f88a 	bl	800777c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007668:	2100      	movs	r1, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fcfe 	bl	800806c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007670:	f000 f892 	bl	8007798 <xTaskResumeAll>
 8007674:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d107      	bne.n	800768c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <vTaskDelay+0x64>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200010c4 	.word	0x200010c4
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076aa:	463a      	mov	r2, r7
 80076ac:	1d39      	adds	r1, r7, #4
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe ff3c 	bl	8006530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	9202      	str	r2, [sp, #8]
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	2300      	movs	r3, #0
 80076c8:	460a      	mov	r2, r1
 80076ca:	4924      	ldr	r1, [pc, #144]	; (800775c <vTaskStartScheduler+0xc0>)
 80076cc:	4824      	ldr	r0, [pc, #144]	; (8007760 <vTaskStartScheduler+0xc4>)
 80076ce:	f7ff fdf9 	bl	80072c4 <xTaskCreateStatic>
 80076d2:	4603      	mov	r3, r0
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <vTaskStartScheduler+0xc8>)
 80076d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076d8:	4b22      	ldr	r3, [pc, #136]	; (8007764 <vTaskStartScheduler+0xc8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e001      	b.n	80076ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d102      	bne.n	80076f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076f0:	f000 fd10 	bl	8008114 <xTimerCreateTimerTask>
 80076f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d11b      	bne.n	8007734 <vTaskStartScheduler+0x98>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	613b      	str	r3, [r7, #16]
}
 800770e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007710:	4b15      	ldr	r3, [pc, #84]	; (8007768 <vTaskStartScheduler+0xcc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3354      	adds	r3, #84	; 0x54
 8007716:	4a15      	ldr	r2, [pc, #84]	; (800776c <vTaskStartScheduler+0xd0>)
 8007718:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <vTaskStartScheduler+0xd4>)
 800771c:	f04f 32ff 	mov.w	r2, #4294967295
 8007720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <vTaskStartScheduler+0xd8>)
 8007724:	2201      	movs	r2, #1
 8007726:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <vTaskStartScheduler+0xdc>)
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800772e:	f001 f8c7 	bl	80088c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007732:	e00e      	b.n	8007752 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d10a      	bne.n	8007752 <vTaskStartScheduler+0xb6>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60fb      	str	r3, [r7, #12]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <vTaskStartScheduler+0xb4>
}
 8007752:	bf00      	nop
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	0800a124 	.word	0x0800a124
 8007760:	08007da1 	.word	0x08007da1
 8007764:	200010c0 	.word	0x200010c0
 8007768:	20000bc8 	.word	0x20000bc8
 800776c:	20000010 	.word	0x20000010
 8007770:	200010bc 	.word	0x200010bc
 8007774:	200010a8 	.word	0x200010a8
 8007778:	200010a0 	.word	0x200010a0

0800777c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <vTaskSuspendAll+0x18>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3301      	adds	r3, #1
 8007786:	4a03      	ldr	r2, [pc, #12]	; (8007794 <vTaskSuspendAll+0x18>)
 8007788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800778a:	bf00      	nop
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	200010c4 	.word	0x200010c4

08007798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077a6:	4b42      	ldr	r3, [pc, #264]	; (80078b0 <xTaskResumeAll+0x118>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	603b      	str	r3, [r7, #0]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077c4:	f001 f91e 	bl	8008a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c8:	4b39      	ldr	r3, [pc, #228]	; (80078b0 <xTaskResumeAll+0x118>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	4a38      	ldr	r2, [pc, #224]	; (80078b0 <xTaskResumeAll+0x118>)
 80077d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d2:	4b37      	ldr	r3, [pc, #220]	; (80078b0 <xTaskResumeAll+0x118>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d162      	bne.n	80078a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077da:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <xTaskResumeAll+0x11c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d05e      	beq.n	80078a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e2:	e02f      	b.n	8007844 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e4:	4b34      	ldr	r3, [pc, #208]	; (80078b8 <xTaskResumeAll+0x120>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3318      	adds	r3, #24
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe ff5b 	bl	80066ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe ff56 	bl	80066ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	4b2d      	ldr	r3, [pc, #180]	; (80078bc <xTaskResumeAll+0x124>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d903      	bls.n	8007814 <xTaskResumeAll+0x7c>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	4a2a      	ldr	r2, [pc, #168]	; (80078bc <xTaskResumeAll+0x124>)
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4a27      	ldr	r2, [pc, #156]	; (80078c0 <xTaskResumeAll+0x128>)
 8007822:	441a      	add	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f7fe fee1 	bl	80065f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <xTaskResumeAll+0x12c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800783e:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <xTaskResumeAll+0x130>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007844:	4b1c      	ldr	r3, [pc, #112]	; (80078b8 <xTaskResumeAll+0x120>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1cb      	bne.n	80077e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007852:	f000 fb5f 	bl	8007f14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007856:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <xTaskResumeAll+0x134>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d010      	beq.n	8007884 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007862:	f000 f847 	bl	80078f4 <xTaskIncrementTick>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <xTaskResumeAll+0x130>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3b01      	subs	r3, #1
 8007876:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f1      	bne.n	8007862 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <xTaskResumeAll+0x134>)
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <xTaskResumeAll+0x130>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <xTaskResumeAll+0x138>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a0:	f001 f8e0 	bl	8008a64 <vPortExitCritical>

	return xAlreadyYielded;
 80078a4:	68bb      	ldr	r3, [r7, #8]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200010c4 	.word	0x200010c4
 80078b4:	2000109c 	.word	0x2000109c
 80078b8:	2000105c 	.word	0x2000105c
 80078bc:	200010a4 	.word	0x200010a4
 80078c0:	20000bcc 	.word	0x20000bcc
 80078c4:	20000bc8 	.word	0x20000bc8
 80078c8:	200010b0 	.word	0x200010b0
 80078cc:	200010ac 	.word	0x200010ac
 80078d0:	e000ed04 	.word	0xe000ed04

080078d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <xTaskGetTickCount+0x1c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078e0:	687b      	ldr	r3, [r7, #4]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	200010a0 	.word	0x200010a0

080078f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fe:	4b4f      	ldr	r3, [pc, #316]	; (8007a3c <xTaskIncrementTick+0x148>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 808f 	bne.w	8007a26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007908:	4b4d      	ldr	r3, [pc, #308]	; (8007a40 <xTaskIncrementTick+0x14c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007910:	4a4b      	ldr	r2, [pc, #300]	; (8007a40 <xTaskIncrementTick+0x14c>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d120      	bne.n	800795e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800791c:	4b49      	ldr	r3, [pc, #292]	; (8007a44 <xTaskIncrementTick+0x150>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <xTaskIncrementTick+0x48>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xTaskIncrementTick+0x46>
 800793c:	4b41      	ldr	r3, [pc, #260]	; (8007a44 <xTaskIncrementTick+0x150>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	4b41      	ldr	r3, [pc, #260]	; (8007a48 <xTaskIncrementTick+0x154>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a3f      	ldr	r2, [pc, #252]	; (8007a44 <xTaskIncrementTick+0x150>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <xTaskIncrementTick+0x154>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4b3e      	ldr	r3, [pc, #248]	; (8007a4c <xTaskIncrementTick+0x158>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	4a3d      	ldr	r2, [pc, #244]	; (8007a4c <xTaskIncrementTick+0x158>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	f000 fadb 	bl	8007f14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800795e:	4b3c      	ldr	r3, [pc, #240]	; (8007a50 <xTaskIncrementTick+0x15c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d349      	bcc.n	80079fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007968:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <xTaskIncrementTick+0x150>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <xTaskIncrementTick+0x15c>)
 8007974:	f04f 32ff 	mov.w	r2, #4294967295
 8007978:	601a      	str	r2, [r3, #0]
					break;
 800797a:	e03f      	b.n	80079fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800797c:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <xTaskIncrementTick+0x150>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d203      	bcs.n	800799c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007994:	4a2e      	ldr	r2, [pc, #184]	; (8007a50 <xTaskIncrementTick+0x15c>)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800799a:	e02f      	b.n	80079fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	3304      	adds	r3, #4
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fe83 	bl	80066ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	3318      	adds	r3, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fe7a 	bl	80066ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079bc:	4b25      	ldr	r3, [pc, #148]	; (8007a54 <xTaskIncrementTick+0x160>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <xTaskIncrementTick+0xd8>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <xTaskIncrementTick+0x160>)
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <xTaskIncrementTick+0x164>)
 80079da:	441a      	add	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f7fe fe05 	bl	80065f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <xTaskIncrementTick+0x168>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3b8      	bcc.n	8007968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fa:	e7b5      	b.n	8007968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079fc:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <xTaskIncrementTick+0x168>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	4915      	ldr	r1, [pc, #84]	; (8007a58 <xTaskIncrementTick+0x164>)
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d901      	bls.n	8007a18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <xTaskIncrementTick+0x16c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e004      	b.n	8007a30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <xTaskIncrementTick+0x170>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	4a0d      	ldr	r2, [pc, #52]	; (8007a64 <xTaskIncrementTick+0x170>)
 8007a2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a30:	697b      	ldr	r3, [r7, #20]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200010c4 	.word	0x200010c4
 8007a40:	200010a0 	.word	0x200010a0
 8007a44:	20001054 	.word	0x20001054
 8007a48:	20001058 	.word	0x20001058
 8007a4c:	200010b4 	.word	0x200010b4
 8007a50:	200010bc 	.word	0x200010bc
 8007a54:	200010a4 	.word	0x200010a4
 8007a58:	20000bcc 	.word	0x20000bcc
 8007a5c:	20000bc8 	.word	0x20000bc8
 8007a60:	200010b0 	.word	0x200010b0
 8007a64:	200010ac 	.word	0x200010ac

08007a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a6e:	4b2a      	ldr	r3, [pc, #168]	; (8007b18 <vTaskSwitchContext+0xb0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a76:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <vTaskSwitchContext+0xb4>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a7c:	e046      	b.n	8007b0c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a7e:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <vTaskSwitchContext+0xb4>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a84:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <vTaskSwitchContext+0xb8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	e010      	b.n	8007aae <vTaskSwitchContext+0x46>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vTaskSwitchContext+0x3e>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	491d      	ldr	r1, [pc, #116]	; (8007b24 <vTaskSwitchContext+0xbc>)
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0e4      	beq.n	8007a8c <vTaskSwitchContext+0x24>
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4a15      	ldr	r2, [pc, #84]	; (8007b24 <vTaskSwitchContext+0xbc>)
 8007ace:	4413      	add	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	605a      	str	r2, [r3, #4]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d104      	bne.n	8007af2 <vTaskSwitchContext+0x8a>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	605a      	str	r2, [r3, #4]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <vTaskSwitchContext+0xc0>)
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4a08      	ldr	r2, [pc, #32]	; (8007b20 <vTaskSwitchContext+0xb8>)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b02:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <vTaskSwitchContext+0xc0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3354      	adds	r3, #84	; 0x54
 8007b08:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <vTaskSwitchContext+0xc4>)
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	200010c4 	.word	0x200010c4
 8007b1c:	200010b0 	.word	0x200010b0
 8007b20:	200010a4 	.word	0x200010a4
 8007b24:	20000bcc 	.word	0x20000bcc
 8007b28:	20000bc8 	.word	0x20000bc8
 8007b2c:	20000010 	.word	0x20000010

08007b30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	60fb      	str	r3, [r7, #12]
}
 8007b52:	bf00      	nop
 8007b54:	e7fe      	b.n	8007b54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <vTaskPlaceOnEventList+0x44>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fe fd6b 	bl	800663a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b64:	2101      	movs	r1, #1
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f000 fa80 	bl	800806c <prvAddCurrentTaskToDelayedList>
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000bc8 	.word	0x20000bc8

08007b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	617b      	str	r3, [r7, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3318      	adds	r3, #24
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7fe fd22 	bl	80065f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	f000 fa55 	bl	800806c <prvAddCurrentTaskToDelayedList>
	}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000bc8 	.word	0x20000bc8

08007bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3318      	adds	r3, #24
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fd53 	bl	80066ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c06:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <xTaskRemoveFromEventList+0xb0>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d11d      	bne.n	8007c4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fd4a 	bl	80066ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1c:	4b19      	ldr	r3, [pc, #100]	; (8007c84 <xTaskRemoveFromEventList+0xb4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d903      	bls.n	8007c2c <xTaskRemoveFromEventList+0x5c>
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c28:	4a16      	ldr	r2, [pc, #88]	; (8007c84 <xTaskRemoveFromEventList+0xb4>)
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4a13      	ldr	r2, [pc, #76]	; (8007c88 <xTaskRemoveFromEventList+0xb8>)
 8007c3a:	441a      	add	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f7fe fcd5 	bl	80065f2 <vListInsertEnd>
 8007c48:	e005      	b.n	8007c56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3318      	adds	r3, #24
 8007c4e:	4619      	mov	r1, r3
 8007c50:	480e      	ldr	r0, [pc, #56]	; (8007c8c <xTaskRemoveFromEventList+0xbc>)
 8007c52:	f7fe fcce 	bl	80065f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <xTaskRemoveFromEventList+0xc0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d905      	bls.n	8007c70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <xTaskRemoveFromEventList+0xc4>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e001      	b.n	8007c74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c74:	697b      	ldr	r3, [r7, #20]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	200010c4 	.word	0x200010c4
 8007c84:	200010a4 	.word	0x200010a4
 8007c88:	20000bcc 	.word	0x20000bcc
 8007c8c:	2000105c 	.word	0x2000105c
 8007c90:	20000bc8 	.word	0x20000bc8
 8007c94:	200010b0 	.word	0x200010b0

08007c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <vTaskInternalSetTimeOutState+0x24>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <vTaskInternalSetTimeOutState+0x28>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	200010b4 	.word	0x200010b4
 8007cc0:	200010a0 	.word	0x200010a0

08007cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	613b      	str	r3, [r7, #16]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	60fb      	str	r3, [r7, #12]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d06:	f000 fe7d 	bl	8008a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <xTaskCheckForTimeOut+0xbc>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d102      	bne.n	8007d2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e023      	b.n	8007d72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <xTaskCheckForTimeOut+0xc0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d007      	beq.n	8007d46 <xTaskCheckForTimeOut+0x82>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d302      	bcc.n	8007d46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d40:	2301      	movs	r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
 8007d44:	e015      	b.n	8007d72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d20b      	bcs.n	8007d68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	1ad2      	subs	r2, r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff ff9b 	bl	8007c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	e004      	b.n	8007d72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d72:	f000 fe77 	bl	8008a64 <vPortExitCritical>

	return xReturn;
 8007d76:	69fb      	ldr	r3, [r7, #28]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3720      	adds	r7, #32
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	200010a0 	.word	0x200010a0
 8007d84:	200010b4 	.word	0x200010b4

08007d88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d8c:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <vTaskMissedYield+0x14>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
}
 8007d92:	bf00      	nop
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	200010b0 	.word	0x200010b0

08007da0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007da8:	f000 f852 	bl	8007e50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <prvIdleTask+0x28>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d9f9      	bls.n	8007da8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <prvIdleTask+0x2c>)
 8007db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dba:	601a      	str	r2, [r3, #0]
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dc4:	e7f0      	b.n	8007da8 <prvIdleTask+0x8>
 8007dc6:	bf00      	nop
 8007dc8:	20000bcc 	.word	0x20000bcc
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	e00c      	b.n	8007df6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <prvInitialiseTaskLists+0x60>)
 8007de8:	4413      	add	r3, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fbd4 	bl	8006598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3301      	adds	r3, #1
 8007df4:	607b      	str	r3, [r7, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b37      	cmp	r3, #55	; 0x37
 8007dfa:	d9ef      	bls.n	8007ddc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dfc:	480d      	ldr	r0, [pc, #52]	; (8007e34 <prvInitialiseTaskLists+0x64>)
 8007dfe:	f7fe fbcb 	bl	8006598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e02:	480d      	ldr	r0, [pc, #52]	; (8007e38 <prvInitialiseTaskLists+0x68>)
 8007e04:	f7fe fbc8 	bl	8006598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e08:	480c      	ldr	r0, [pc, #48]	; (8007e3c <prvInitialiseTaskLists+0x6c>)
 8007e0a:	f7fe fbc5 	bl	8006598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e0e:	480c      	ldr	r0, [pc, #48]	; (8007e40 <prvInitialiseTaskLists+0x70>)
 8007e10:	f7fe fbc2 	bl	8006598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e14:	480b      	ldr	r0, [pc, #44]	; (8007e44 <prvInitialiseTaskLists+0x74>)
 8007e16:	f7fe fbbf 	bl	8006598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <prvInitialiseTaskLists+0x78>)
 8007e1c:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <prvInitialiseTaskLists+0x64>)
 8007e1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <prvInitialiseTaskLists+0x7c>)
 8007e22:	4a05      	ldr	r2, [pc, #20]	; (8007e38 <prvInitialiseTaskLists+0x68>)
 8007e24:	601a      	str	r2, [r3, #0]
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000bcc 	.word	0x20000bcc
 8007e34:	2000102c 	.word	0x2000102c
 8007e38:	20001040 	.word	0x20001040
 8007e3c:	2000105c 	.word	0x2000105c
 8007e40:	20001070 	.word	0x20001070
 8007e44:	20001088 	.word	0x20001088
 8007e48:	20001054 	.word	0x20001054
 8007e4c:	20001058 	.word	0x20001058

08007e50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e56:	e019      	b.n	8007e8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e58:	f000 fdd4 	bl	8008a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <prvCheckTasksWaitingTermination+0x50>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fc1f 	bl	80066ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <prvCheckTasksWaitingTermination+0x54>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <prvCheckTasksWaitingTermination+0x54>)
 8007e76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <prvCheckTasksWaitingTermination+0x58>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <prvCheckTasksWaitingTermination+0x58>)
 8007e80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e82:	f000 fdef 	bl	8008a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f810 	bl	8007eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e8c:	4b06      	ldr	r3, [pc, #24]	; (8007ea8 <prvCheckTasksWaitingTermination+0x58>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e1      	bne.n	8007e58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20001070 	.word	0x20001070
 8007ea4:	2000109c 	.word	0x2000109c
 8007ea8:	20001084 	.word	0x20001084

08007eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3354      	adds	r3, #84	; 0x54
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fc41 	bl	8009740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 ff87 	bl	8008de0 <vPortFree>
				vPortFree( pxTCB );
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 ff84 	bl	8008de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ed8:	e018      	b.n	8007f0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d103      	bne.n	8007eec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 ff7b 	bl	8008de0 <vPortFree>
	}
 8007eea:	e00f      	b.n	8007f0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d00a      	beq.n	8007f0c <prvDeleteTCB+0x60>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60fb      	str	r3, [r7, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <prvDeleteTCB+0x5e>
	}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <prvResetNextTaskUnblockTime+0x38>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <prvResetNextTaskUnblockTime+0x3c>)
 8007f26:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f2c:	e008      	b.n	8007f40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2e:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <prvResetNextTaskUnblockTime+0x38>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <prvResetNextTaskUnblockTime+0x3c>)
 8007f3e:	6013      	str	r3, [r2, #0]
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	20001054 	.word	0x20001054
 8007f50:	200010bc 	.word	0x200010bc

08007f54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <xTaskGetSchedulerState+0x34>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f62:	2301      	movs	r3, #1
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	e008      	b.n	8007f7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f68:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <xTaskGetSchedulerState+0x38>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f70:	2302      	movs	r3, #2
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	e001      	b.n	8007f7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f7a:	687b      	ldr	r3, [r7, #4]
	}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	200010a8 	.word	0x200010a8
 8007f8c:	200010c4 	.word	0x200010c4

08007f90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d056      	beq.n	8008054 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fa6:	4b2e      	ldr	r3, [pc, #184]	; (8008060 <xTaskPriorityDisinherit+0xd0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d00a      	beq.n	8007fc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60bb      	str	r3, [r7, #8]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe8:	1e5a      	subs	r2, r3, #1
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d02c      	beq.n	8008054 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d128      	bne.n	8008054 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	3304      	adds	r3, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fb50 	bl	80066ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <xTaskPriorityDisinherit+0xd4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d903      	bls.n	8008034 <xTaskPriorityDisinherit+0xa4>
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <xTaskPriorityDisinherit+0xd4>)
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4a09      	ldr	r2, [pc, #36]	; (8008068 <xTaskPriorityDisinherit+0xd8>)
 8008042:	441a      	add	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f7fe fad1 	bl	80065f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008050:	2301      	movs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008054:	697b      	ldr	r3, [r7, #20]
	}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000bc8 	.word	0x20000bc8
 8008064:	200010a4 	.word	0x200010a4
 8008068:	20000bcc 	.word	0x20000bcc

0800806c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008076:	4b21      	ldr	r3, [pc, #132]	; (80080fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800807c:	4b20      	ldr	r3, [pc, #128]	; (8008100 <prvAddCurrentTaskToDelayedList+0x94>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3304      	adds	r3, #4
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fb12 	bl	80066ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d10a      	bne.n	80080a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <prvAddCurrentTaskToDelayedList+0x94>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4819      	ldr	r0, [pc, #100]	; (8008104 <prvAddCurrentTaskToDelayedList+0x98>)
 80080a0:	f7fe faa7 	bl	80065f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080a4:	e026      	b.n	80080f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080ae:	4b14      	ldr	r3, [pc, #80]	; (8008100 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d209      	bcs.n	80080d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <prvAddCurrentTaskToDelayedList+0x94>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7fe fab5 	bl	800663a <vListInsert>
}
 80080d0:	e010      	b.n	80080f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080d2:	4b0e      	ldr	r3, [pc, #56]	; (800810c <prvAddCurrentTaskToDelayedList+0xa0>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3304      	adds	r3, #4
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f7fe faab 	bl	800663a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080e4:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d202      	bcs.n	80080f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080ee:	4a08      	ldr	r2, [pc, #32]	; (8008110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	6013      	str	r3, [r2, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200010a0 	.word	0x200010a0
 8008100:	20000bc8 	.word	0x20000bc8
 8008104:	20001088 	.word	0x20001088
 8008108:	20001058 	.word	0x20001058
 800810c:	20001054 	.word	0x20001054
 8008110:	200010bc 	.word	0x200010bc

08008114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800811e:	f000 fb07 	bl	8008730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008122:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <xTimerCreateTimerTask+0x80>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d021      	beq.n	800816e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008132:	1d3a      	adds	r2, r7, #4
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	f107 030c 	add.w	r3, r7, #12
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fa11 	bl	8006564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	9202      	str	r2, [sp, #8]
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	2302      	movs	r3, #2
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	460a      	mov	r2, r1
 8008154:	4910      	ldr	r1, [pc, #64]	; (8008198 <xTimerCreateTimerTask+0x84>)
 8008156:	4811      	ldr	r0, [pc, #68]	; (800819c <xTimerCreateTimerTask+0x88>)
 8008158:	f7ff f8b4 	bl	80072c4 <xTaskCreateStatic>
 800815c:	4603      	mov	r3, r0
 800815e:	4a10      	ldr	r2, [pc, #64]	; (80081a0 <xTimerCreateTimerTask+0x8c>)
 8008160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <xTimerCreateTimerTask+0x8c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800816a:	2301      	movs	r3, #1
 800816c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	613b      	str	r3, [r7, #16]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800818a:	697b      	ldr	r3, [r7, #20]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	200010f8 	.word	0x200010f8
 8008198:	0800a12c 	.word	0x0800a12c
 800819c:	080082d9 	.word	0x080082d9
 80081a0:	200010fc 	.word	0x200010fc

080081a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	623b      	str	r3, [r7, #32]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081d2:	4b1a      	ldr	r3, [pc, #104]	; (800823c <xTimerGenericCommand+0x98>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02a      	beq.n	8008230 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b05      	cmp	r3, #5
 80081ea:	dc18      	bgt.n	800821e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081ec:	f7ff feb2 	bl	8007f54 <xTaskGetSchedulerState>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d109      	bne.n	800820a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <xTimerGenericCommand+0x98>)
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f107 0110 	add.w	r1, r7, #16
 80081fe:	2300      	movs	r3, #0
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	f7fe fbbb 	bl	800697c <xQueueGenericSend>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24
 8008208:	e012      	b.n	8008230 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800820a:	4b0c      	ldr	r3, [pc, #48]	; (800823c <xTimerGenericCommand+0x98>)
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f107 0110 	add.w	r1, r7, #16
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	f7fe fbb1 	bl	800697c <xQueueGenericSend>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24
 800821c:	e008      	b.n	8008230 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <xTimerGenericCommand+0x98>)
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f107 0110 	add.w	r1, r7, #16
 8008226:	2300      	movs	r3, #0
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	f7fe fca5 	bl	8006b78 <xQueueGenericSendFromISR>
 800822e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200010f8 	.word	0x200010f8

08008240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800824a:	4b22      	ldr	r3, [pc, #136]	; (80082d4 <prvProcessExpiredTimer+0x94>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	3304      	adds	r3, #4
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fa27 	bl	80066ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d022      	beq.n	80082b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	699a      	ldr	r2, [r3, #24]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	18d1      	adds	r1, r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	6978      	ldr	r0, [r7, #20]
 800827a:	f000 f8d1 	bl	8008420 <prvInsertTimerInActiveList>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01f      	beq.n	80082c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2300      	movs	r3, #0
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	2100      	movs	r1, #0
 800828e:	6978      	ldr	r0, [r7, #20]
 8008290:	f7ff ff88 	bl	80081a4 <xTimerGenericCommand>
 8008294:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d113      	bne.n	80082c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	60fb      	str	r3, [r7, #12]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	6978      	ldr	r0, [r7, #20]
 80082ca:	4798      	blx	r3
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200010f0 	.word	0x200010f0

080082d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082e0:	f107 0308 	add.w	r3, r7, #8
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f857 	bl	8008398 <prvGetNextExpireTime>
 80082ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4619      	mov	r1, r3
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 f803 	bl	80082fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082f6:	f000 f8d5 	bl	80084a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082fa:	e7f1      	b.n	80082e0 <prvTimerTask+0x8>

080082fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008306:	f7ff fa39 	bl	800777c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800830a:	f107 0308 	add.w	r3, r7, #8
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f866 	bl	80083e0 <prvSampleTimeNow>
 8008314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d130      	bne.n	800837e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <prvProcessTimerOrBlockTask+0x3c>
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	429a      	cmp	r2, r3
 8008328:	d806      	bhi.n	8008338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800832a:	f7ff fa35 	bl	8007798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff ff85 	bl	8008240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008336:	e024      	b.n	8008382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <prvProcessTimerOrBlockTask+0x90>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <prvProcessTimerOrBlockTask+0x50>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <prvProcessTimerOrBlockTask+0x52>
 800834c:	2300      	movs	r3, #0
 800834e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <prvProcessTimerOrBlockTask+0x94>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4619      	mov	r1, r3
 800835e:	f7fe ff7d 	bl	800725c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008362:	f7ff fa19 	bl	8007798 <xTaskResumeAll>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <prvProcessTimerOrBlockTask+0x98>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
}
 800837c:	e001      	b.n	8008382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800837e:	f7ff fa0b 	bl	8007798 <xTaskResumeAll>
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200010f4 	.word	0x200010f4
 8008390:	200010f8 	.word	0x200010f8
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083a0:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <prvGetNextExpireTime+0x44>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <prvGetNextExpireTime+0x16>
 80083aa:	2201      	movs	r2, #1
 80083ac:	e000      	b.n	80083b0 <prvGetNextExpireTime+0x18>
 80083ae:	2200      	movs	r2, #0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d105      	bne.n	80083c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083bc:	4b07      	ldr	r3, [pc, #28]	; (80083dc <prvGetNextExpireTime+0x44>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e001      	b.n	80083cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083cc:	68fb      	ldr	r3, [r7, #12]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	200010f0 	.word	0x200010f0

080083e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083e8:	f7ff fa74 	bl	80078d4 <xTaskGetTickCount>
 80083ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <prvSampleTimeNow+0x3c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d205      	bcs.n	8008404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083f8:	f000 f936 	bl	8008668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e002      	b.n	800840a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800840a:	4a04      	ldr	r2, [pc, #16]	; (800841c <prvSampleTimeNow+0x3c>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20001100 	.word	0x20001100

08008420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
 800842c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d812      	bhi.n	800846c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	429a      	cmp	r2, r3
 8008452:	d302      	bcc.n	800845a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e01b      	b.n	8008492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800845a:	4b10      	ldr	r3, [pc, #64]	; (800849c <prvInsertTimerInActiveList+0x7c>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe f8e8 	bl	800663a <vListInsert>
 800846a:	e012      	b.n	8008492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d206      	bcs.n	8008482 <prvInsertTimerInActiveList+0x62>
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d302      	bcc.n	8008482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	e007      	b.n	8008492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <prvInsertTimerInActiveList+0x80>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7fe f8d4 	bl	800663a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008492:	697b      	ldr	r3, [r7, #20]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200010f4 	.word	0x200010f4
 80084a0:	200010f0 	.word	0x200010f0

080084a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084aa:	e0ca      	b.n	8008642 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da18      	bge.n	80084e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084b2:	1d3b      	adds	r3, r7, #4
 80084b4:	3304      	adds	r3, #4
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	61fb      	str	r3, [r7, #28]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084da:	6850      	ldr	r0, [r2, #4]
 80084dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084de:	6892      	ldr	r2, [r2, #8]
 80084e0:	4611      	mov	r1, r2
 80084e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f2c0 80aa 	blt.w	8008640 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	3304      	adds	r3, #4
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe f8d5 	bl	80066ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008502:	463b      	mov	r3, r7
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff ff6b 	bl	80083e0 <prvSampleTimeNow>
 800850a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b09      	cmp	r3, #9
 8008510:	f200 8097 	bhi.w	8008642 <prvProcessReceivedCommands+0x19e>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <prvProcessReceivedCommands+0x78>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008545 	.word	0x08008545
 8008520:	08008545 	.word	0x08008545
 8008524:	08008545 	.word	0x08008545
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085cd 	.word	0x080085cd
 8008530:	08008617 	.word	0x08008617
 8008534:	08008545 	.word	0x08008545
 8008538:	08008545 	.word	0x08008545
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085cd 	.word	0x080085cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	b2da      	uxtb	r2, r3
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	18d1      	adds	r1, r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008564:	f7ff ff5c 	bl	8008420 <prvInsertTimerInActiveList>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d069      	beq.n	8008642 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05e      	beq.n	8008642 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	441a      	add	r2, r3
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	2100      	movs	r1, #0
 8008594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008596:	f7ff fe05 	bl	80081a4 <xTimerGenericCommand>
 800859a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d14f      	bne.n	8008642 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	61bb      	str	r3, [r7, #24]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085be:	f023 0301 	bic.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085ca:	e03a      	b.n	8008642 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d2:	f043 0301 	orr.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	617b      	str	r3, [r7, #20]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	18d1      	adds	r1, r2, r3
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008610:	f7ff ff06 	bl	8008420 <prvInsertTimerInActiveList>
					break;
 8008614:	e015      	b.n	8008642 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008626:	f000 fbdb 	bl	8008de0 <vPortFree>
 800862a:	e00a      	b.n	8008642 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800863e:	e000      	b.n	8008642 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008640:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008642:	4b08      	ldr	r3, [pc, #32]	; (8008664 <prvProcessReceivedCommands+0x1c0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	1d39      	adds	r1, r7, #4
 8008648:	2200      	movs	r2, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fb30 	bl	8006cb0 <xQueueReceive>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af2a 	bne.w	80084ac <prvProcessReceivedCommands+0x8>
	}
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	3730      	adds	r7, #48	; 0x30
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200010f8 	.word	0x200010f8

08008668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800866e:	e048      	b.n	8008702 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008670:	4b2d      	ldr	r3, [pc, #180]	; (8008728 <prvSwitchTimerLists+0xc0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867a:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <prvSwitchTimerLists+0xc0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe f80f 	bl	80066ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d02e      	beq.n	8008702 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d90e      	bls.n	80086d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086c2:	4b19      	ldr	r3, [pc, #100]	; (8008728 <prvSwitchTimerLists+0xc0>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fd ffb4 	bl	800663a <vListInsert>
 80086d2:	e016      	b.n	8008702 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086d4:	2300      	movs	r3, #0
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2300      	movs	r3, #0
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	2100      	movs	r1, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fd60 	bl	80081a4 <xTimerGenericCommand>
 80086e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	603b      	str	r3, [r7, #0]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <prvSwitchTimerLists+0xc0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1b1      	bne.n	8008670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <prvSwitchTimerLists+0xc0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008712:	4b06      	ldr	r3, [pc, #24]	; (800872c <prvSwitchTimerLists+0xc4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a04      	ldr	r2, [pc, #16]	; (8008728 <prvSwitchTimerLists+0xc0>)
 8008718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800871a:	4a04      	ldr	r2, [pc, #16]	; (800872c <prvSwitchTimerLists+0xc4>)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6013      	str	r3, [r2, #0]
}
 8008720:	bf00      	nop
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200010f0 	.word	0x200010f0
 800872c:	200010f4 	.word	0x200010f4

08008730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008736:	f000 f965 	bl	8008a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800873a:	4b15      	ldr	r3, [pc, #84]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d120      	bne.n	8008784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008742:	4814      	ldr	r0, [pc, #80]	; (8008794 <prvCheckForValidListAndQueue+0x64>)
 8008744:	f7fd ff28 	bl	8006598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008748:	4813      	ldr	r0, [pc, #76]	; (8008798 <prvCheckForValidListAndQueue+0x68>)
 800874a:	f7fd ff25 	bl	8006598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800874e:	4b13      	ldr	r3, [pc, #76]	; (800879c <prvCheckForValidListAndQueue+0x6c>)
 8008750:	4a10      	ldr	r2, [pc, #64]	; (8008794 <prvCheckForValidListAndQueue+0x64>)
 8008752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <prvCheckForValidListAndQueue+0x70>)
 8008756:	4a10      	ldr	r2, [pc, #64]	; (8008798 <prvCheckForValidListAndQueue+0x68>)
 8008758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800875a:	2300      	movs	r3, #0
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <prvCheckForValidListAndQueue+0x74>)
 8008760:	4a11      	ldr	r2, [pc, #68]	; (80087a8 <prvCheckForValidListAndQueue+0x78>)
 8008762:	2110      	movs	r1, #16
 8008764:	200a      	movs	r0, #10
 8008766:	f7fe f833 	bl	80067d0 <xQueueGenericCreateStatic>
 800876a:	4603      	mov	r3, r0
 800876c:	4a08      	ldr	r2, [pc, #32]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800876e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008778:	4b05      	ldr	r3, [pc, #20]	; (8008790 <prvCheckForValidListAndQueue+0x60>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	490b      	ldr	r1, [pc, #44]	; (80087ac <prvCheckForValidListAndQueue+0x7c>)
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fd42 	bl	8007208 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008784:	f000 f96e 	bl	8008a64 <vPortExitCritical>
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	200010f8 	.word	0x200010f8
 8008794:	200010c8 	.word	0x200010c8
 8008798:	200010dc 	.word	0x200010dc
 800879c:	200010f0 	.word	0x200010f0
 80087a0:	200010f4 	.word	0x200010f4
 80087a4:	200011a4 	.word	0x200011a4
 80087a8:	20001104 	.word	0x20001104
 80087ac:	0800a134 	.word	0x0800a134

080087b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3b04      	subs	r3, #4
 80087c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3b04      	subs	r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f023 0201 	bic.w	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3b04      	subs	r3, #4
 80087de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087e0:	4a0c      	ldr	r2, [pc, #48]	; (8008814 <pxPortInitialiseStack+0x64>)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3b14      	subs	r3, #20
 80087ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3b04      	subs	r3, #4
 80087f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f06f 0202 	mvn.w	r2, #2
 80087fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3b20      	subs	r3, #32
 8008804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008806:	68fb      	ldr	r3, [r7, #12]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	08008819 	.word	0x08008819

08008818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <prvTaskExitError+0x54>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882a:	d00a      	beq.n	8008842 <prvTaskExitError+0x2a>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60fb      	str	r3, [r7, #12]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <prvTaskExitError+0x28>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60bb      	str	r3, [r7, #8]
}
 8008854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008856:	bf00      	nop
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0fc      	beq.n	8008858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000000c 	.word	0x2000000c

08008870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <pxCurrentTCBConst2>)
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	f380 8809 	msr	PSP, r0
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8811 	msr	BASEPRI, r0
 800888a:	4770      	bx	lr
 800888c:	f3af 8000 	nop.w

08008890 <pxCurrentTCBConst2>:
 8008890:	20000bc8 	.word	0x20000bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008898:	4808      	ldr	r0, [pc, #32]	; (80088bc <prvPortStartFirstTask+0x24>)
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	6800      	ldr	r0, [r0, #0]
 800889e:	f380 8808 	msr	MSP, r0
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8814 	msr	CONTROL, r0
 80088aa:	b662      	cpsie	i
 80088ac:	b661      	cpsie	f
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	df00      	svc	0
 80088b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ba:	bf00      	nop
 80088bc:	e000ed08 	.word	0xe000ed08

080088c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088c6:	4b46      	ldr	r3, [pc, #280]	; (80089e0 <xPortStartScheduler+0x120>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a46      	ldr	r2, [pc, #280]	; (80089e4 <xPortStartScheduler+0x124>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10a      	bne.n	80088e6 <xPortStartScheduler+0x26>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088e6:	4b3e      	ldr	r3, [pc, #248]	; (80089e0 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <xPortStartScheduler+0x128>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x46>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60fb      	str	r3, [r7, #12]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008906:	4b39      	ldr	r3, [pc, #228]	; (80089ec <xPortStartScheduler+0x12c>)
 8008908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008928:	b2da      	uxtb	r2, r3
 800892a:	4b31      	ldr	r3, [pc, #196]	; (80089f0 <xPortStartScheduler+0x130>)
 800892c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800892e:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <xPortStartScheduler+0x134>)
 8008930:	2207      	movs	r2, #7
 8008932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008934:	e009      	b.n	800894a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008936:	4b2f      	ldr	r3, [pc, #188]	; (80089f4 <xPortStartScheduler+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3b01      	subs	r3, #1
 800893c:	4a2d      	ldr	r2, [pc, #180]	; (80089f4 <xPortStartScheduler+0x134>)
 800893e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d0ef      	beq.n	8008936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008956:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1c3 0307 	rsb	r3, r3, #7
 800895e:	2b04      	cmp	r3, #4
 8008960:	d00a      	beq.n	8008978 <xPortStartScheduler+0xb8>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60bb      	str	r3, [r7, #8]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008978:	4b1e      	ldr	r3, [pc, #120]	; (80089f4 <xPortStartScheduler+0x134>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	4a1d      	ldr	r2, [pc, #116]	; (80089f4 <xPortStartScheduler+0x134>)
 8008980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008982:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <xPortStartScheduler+0x134>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800898a:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <xPortStartScheduler+0x134>)
 800898c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008996:	4b18      	ldr	r3, [pc, #96]	; (80089f8 <xPortStartScheduler+0x138>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <xPortStartScheduler+0x138>)
 800899c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <xPortStartScheduler+0x138>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <xPortStartScheduler+0x138>)
 80089a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089ae:	f000 f8dd 	bl	8008b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089b2:	4b12      	ldr	r3, [pc, #72]	; (80089fc <xPortStartScheduler+0x13c>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089b8:	f000 f8fc 	bl	8008bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <xPortStartScheduler+0x140>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0f      	ldr	r2, [pc, #60]	; (8008a00 <xPortStartScheduler+0x140>)
 80089c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089c8:	f7ff ff66 	bl	8008898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089cc:	f7ff f84c 	bl	8007a68 <vTaskSwitchContext>
	prvTaskExitError();
 80089d0:	f7ff ff22 	bl	8008818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	e000ed00 	.word	0xe000ed00
 80089e4:	410fc271 	.word	0x410fc271
 80089e8:	410fc270 	.word	0x410fc270
 80089ec:	e000e400 	.word	0xe000e400
 80089f0:	200011f4 	.word	0x200011f4
 80089f4:	200011f8 	.word	0x200011f8
 80089f8:	e000ed20 	.word	0xe000ed20
 80089fc:	2000000c 	.word	0x2000000c
 8008a00:	e000ef34 	.word	0xe000ef34

08008a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	607b      	str	r3, [r7, #4]
}
 8008a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	4a0d      	ldr	r2, [pc, #52]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <vPortEnterCritical+0x58>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d10f      	bne.n	8008a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <vPortEnterCritical+0x5c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	603b      	str	r3, [r7, #0]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <vPortEnterCritical+0x4a>
	}
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	2000000c 	.word	0x2000000c
 8008a60:	e000ed04 	.word	0xe000ed04

08008a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a6a:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <vPortExitCritical+0x24>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	4a09      	ldr	r2, [pc, #36]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a92:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <vPortExitCritical+0x50>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <vPortExitCritical+0x42>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f383 8811 	msr	BASEPRI, r3
}
 8008aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	2000000c 	.word	0x2000000c
	...

08008ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ac0:	f3ef 8009 	mrs	r0, PSP
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <pxCurrentTCBConst>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	f01e 0f10 	tst.w	lr, #16
 8008ad0:	bf08      	it	eq
 8008ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	6010      	str	r0, [r2, #0]
 8008adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ae4:	f380 8811 	msr	BASEPRI, r0
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f7fe ffba 	bl	8007a68 <vTaskSwitchContext>
 8008af4:	f04f 0000 	mov.w	r0, #0
 8008af8:	f380 8811 	msr	BASEPRI, r0
 8008afc:	bc09      	pop	{r0, r3}
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	6808      	ldr	r0, [r1, #0]
 8008b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b06:	f01e 0f10 	tst.w	lr, #16
 8008b0a:	bf08      	it	eq
 8008b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b10:	f380 8809 	msr	PSP, r0
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	f3af 8000 	nop.w

08008b20 <pxCurrentTCBConst>:
 8008b20:	20000bc8 	.word	0x20000bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop

08008b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b42:	f7fe fed7 	bl	80078f4 <xTaskIncrementTick>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d003      	beq.n	8008b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <xPortSysTickHandler+0x40>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
}
 8008b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b76:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <vPortSetupTimerInterrupt+0x38>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <vPortSetupTimerInterrupt+0x3c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <vPortSetupTimerInterrupt+0x40>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	099b      	lsrs	r3, r3, #6
 8008b88:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <vPortSetupTimerInterrupt+0x44>)
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b8e:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <vPortSetupTimerInterrupt+0x34>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	e000e010 	.word	0xe000e010
 8008ba4:	e000e018 	.word	0xe000e018
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	10624dd3 	.word	0x10624dd3
 8008bb0:	e000e014 	.word	0xe000e014

08008bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bc4 <vPortEnableVFP+0x10>
 8008bb8:	6801      	ldr	r1, [r0, #0]
 8008bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bbe:	6001      	str	r1, [r0, #0]
 8008bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bc2:	bf00      	nop
 8008bc4:	e000ed88 	.word	0xe000ed88

08008bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bce:	f3ef 8305 	mrs	r3, IPSR
 8008bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b0f      	cmp	r3, #15
 8008bd8:	d914      	bls.n	8008c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <vPortValidateInterruptPriority+0x70>)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008be4:	4b15      	ldr	r3, [pc, #84]	; (8008c3c <vPortValidateInterruptPriority+0x74>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	7afa      	ldrb	r2, [r7, #11]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d20a      	bcs.n	8008c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	607b      	str	r3, [r7, #4]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <vPortValidateInterruptPriority+0x78>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c0c:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <vPortValidateInterruptPriority+0x7c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d90a      	bls.n	8008c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	603b      	str	r3, [r7, #0]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <vPortValidateInterruptPriority+0x60>
	}
 8008c2a:	bf00      	nop
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	e000e3f0 	.word	0xe000e3f0
 8008c3c:	200011f4 	.word	0x200011f4
 8008c40:	e000ed0c 	.word	0xe000ed0c
 8008c44:	200011f8 	.word	0x200011f8

08008c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	; 0x28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c50:	2300      	movs	r3, #0
 8008c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c54:	f7fe fd92 	bl	800777c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c58:	4b5b      	ldr	r3, [pc, #364]	; (8008dc8 <pvPortMalloc+0x180>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c60:	f000 f920 	bl	8008ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c64:	4b59      	ldr	r3, [pc, #356]	; (8008dcc <pvPortMalloc+0x184>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8093 	bne.w	8008d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01d      	beq.n	8008cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c78:	2208      	movs	r2, #8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f003 0307 	and.w	r3, r3, #7
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d014      	beq.n	8008cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f023 0307 	bic.w	r3, r3, #7
 8008c90:	3308      	adds	r3, #8
 8008c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	617b      	str	r3, [r7, #20]
}
 8008cb0:	bf00      	nop
 8008cb2:	e7fe      	b.n	8008cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d06e      	beq.n	8008d98 <pvPortMalloc+0x150>
 8008cba:	4b45      	ldr	r3, [pc, #276]	; (8008dd0 <pvPortMalloc+0x188>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d869      	bhi.n	8008d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cc4:	4b43      	ldr	r3, [pc, #268]	; (8008dd4 <pvPortMalloc+0x18c>)
 8008cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cc8:	4b42      	ldr	r3, [pc, #264]	; (8008dd4 <pvPortMalloc+0x18c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cce:	e004      	b.n	8008cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <pvPortMalloc+0xa4>
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1f1      	bne.n	8008cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cec:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <pvPortMalloc+0x180>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d050      	beq.n	8008d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	2308      	movs	r3, #8
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d91f      	bls.n	8008d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <pvPortMalloc+0xf8>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	613b      	str	r3, [r7, #16]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d52:	69b8      	ldr	r0, [r7, #24]
 8008d54:	f000 f908 	bl	8008f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d58:	4b1d      	ldr	r3, [pc, #116]	; (8008dd0 <pvPortMalloc+0x188>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	4a1b      	ldr	r2, [pc, #108]	; (8008dd0 <pvPortMalloc+0x188>)
 8008d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d66:	4b1a      	ldr	r3, [pc, #104]	; (8008dd0 <pvPortMalloc+0x188>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <pvPortMalloc+0x190>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d203      	bcs.n	8008d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d72:	4b17      	ldr	r3, [pc, #92]	; (8008dd0 <pvPortMalloc+0x188>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a18      	ldr	r2, [pc, #96]	; (8008dd8 <pvPortMalloc+0x190>)
 8008d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <pvPortMalloc+0x184>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d8e:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <pvPortMalloc+0x194>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3301      	adds	r3, #1
 8008d94:	4a11      	ldr	r2, [pc, #68]	; (8008ddc <pvPortMalloc+0x194>)
 8008d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d98:	f7fe fcfe 	bl	8007798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <pvPortMalloc+0x174>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	60fb      	str	r3, [r7, #12]
}
 8008db8:	bf00      	nop
 8008dba:	e7fe      	b.n	8008dba <pvPortMalloc+0x172>
	return pvReturn;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3728      	adds	r7, #40	; 0x28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20004e04 	.word	0x20004e04
 8008dcc:	20004e18 	.word	0x20004e18
 8008dd0:	20004e08 	.word	0x20004e08
 8008dd4:	20004dfc 	.word	0x20004dfc
 8008dd8:	20004e0c 	.word	0x20004e0c
 8008ddc:	20004e10 	.word	0x20004e10

08008de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d04d      	beq.n	8008e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008df2:	2308      	movs	r3, #8
 8008df4:	425b      	negs	r3, r3
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4413      	add	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <vPortFree+0xb8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <vPortFree+0x44>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <vPortFree+0x62>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	60bb      	str	r3, [r7, #8]
}
 8008e3e:	bf00      	nop
 8008e40:	e7fe      	b.n	8008e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <vPortFree+0xb8>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01e      	beq.n	8008e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d11a      	bne.n	8008e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <vPortFree+0xb8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	43db      	mvns	r3, r3
 8008e62:	401a      	ands	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e68:	f7fe fc88 	bl	800777c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <vPortFree+0xbc>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4413      	add	r3, r2
 8008e76:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <vPortFree+0xbc>)
 8008e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e7a:	6938      	ldr	r0, [r7, #16]
 8008e7c:	f000 f874 	bl	8008f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <vPortFree+0xc0>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <vPortFree+0xc0>)
 8008e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e8a:	f7fe fc85 	bl	8007798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e8e:	bf00      	nop
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20004e18 	.word	0x20004e18
 8008e9c:	20004e08 	.word	0x20004e08
 8008ea0:	20004e14 	.word	0x20004e14

08008ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008eb0:	4b27      	ldr	r3, [pc, #156]	; (8008f50 <prvHeapInit+0xac>)
 8008eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3307      	adds	r3, #7
 8008ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0307 	bic.w	r3, r3, #7
 8008eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	4a1f      	ldr	r2, [pc, #124]	; (8008f50 <prvHeapInit+0xac>)
 8008ed4:	4413      	add	r3, r2
 8008ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008edc:	4a1d      	ldr	r2, [pc, #116]	; (8008f54 <prvHeapInit+0xb0>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ee2:	4b1c      	ldr	r3, [pc, #112]	; (8008f54 <prvHeapInit+0xb0>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	4413      	add	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ef0:	2208      	movs	r2, #8
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f023 0307 	bic.w	r3, r3, #7
 8008efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a15      	ldr	r2, [pc, #84]	; (8008f58 <prvHeapInit+0xb4>)
 8008f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f06:	4b14      	ldr	r3, [pc, #80]	; (8008f58 <prvHeapInit+0xb4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <prvHeapInit+0xb4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <prvHeapInit+0xb4>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <prvHeapInit+0xb8>)
 8008f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <prvHeapInit+0xbc>)
 8008f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <prvHeapInit+0xc0>)
 8008f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f42:	601a      	str	r2, [r3, #0]
}
 8008f44:	bf00      	nop
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	200011fc 	.word	0x200011fc
 8008f54:	20004dfc 	.word	0x20004dfc
 8008f58:	20004e04 	.word	0x20004e04
 8008f5c:	20004e0c 	.word	0x20004e0c
 8008f60:	20004e08 	.word	0x20004e08
 8008f64:	20004e18 	.word	0x20004e18

08008f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f70:	4b28      	ldr	r3, [pc, #160]	; (8009014 <prvInsertBlockIntoFreeList+0xac>)
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e002      	b.n	8008f7c <prvInsertBlockIntoFreeList+0x14>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d8f7      	bhi.n	8008f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d108      	bne.n	8008faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	441a      	add	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d118      	bne.n	8008ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <prvInsertBlockIntoFreeList+0xb0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d00d      	beq.n	8008fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e008      	b.n	8008ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e003      	b.n	8008ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d002      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20004dfc 	.word	0x20004dfc
 8009018:	20004e04 	.word	0x20004e04
 800901c:	00000000 	.word	0x00000000

08009020 <_ZN3PIDC1EPVdS1_S1_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(volatile double* Input, volatile double* Output, volatile double* Setpoint,
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6278      	str	r0, [r7, #36]	; 0x24
 8009028:	6239      	str	r1, [r7, #32]
 800902a:	61fa      	str	r2, [r7, #28]
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	ed87 0b04 	vstr	d0, [r7, #16]
 8009032:	ed87 1b02 	vstr	d1, [r7, #8]
 8009036:	ed87 2b00 	vstr	d2, [r7]
        double Kp, double Ki, double Kd, int POn,
		int ControllerDirection)
{
    myOutput = Output;
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	63da      	str	r2, [r3, #60]	; 0x3c
    myInput = Input;
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	6a3a      	ldr	r2, [r7, #32]
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
    mySetpoint = Setpoint;
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	641a      	str	r2, [r3, #64]	; 0x40
    inAuto = false;
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    PID::SetOutputLimits(1500, 2250);
 8009054:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8009090 <_ZN3PIDC1EPVdS1_S1_dddii+0x70>
 8009058:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8009098 <_ZN3PIDC1EPVdS1_S1_dddii+0x78>
 800905c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800905e:	f000 f9af 	bl	80093c0 <_ZN3PID15SetOutputLimitsEdd>
//    PID::SetOutputLimits(1000, 3000);

    SampleTime = 10;							//default Controller Sample Time is 0.1 seconds
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	220a      	movs	r2, #10
 8009066:	659a      	str	r2, [r3, #88]	; 0x58

    PID::SetControllerDirection(ControllerDirection);
 8009068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800906a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800906c:	f000 fa7e 	bl	800956c <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
 8009070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009072:	ed97 2b00 	vldr	d2, [r7]
 8009076:	ed97 1b02 	vldr	d1, [r7, #8]
 800907a:	ed97 0b04 	vldr	d0, [r7, #16]
 800907e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009080:	f000 f8f8 	bl	8009274 <_ZN3PID10SetTuningsEdddi>

}
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	4618      	mov	r0, r3
 8009088:	3728      	adds	r7, #40	; 0x28
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	00000000 	.word	0x00000000
 8009094:	40a19400 	.word	0x40a19400
 8009098:	00000000 	.word	0x00000000
 800909c:	40977000 	.word	0x40977000

080090a0 <_ZN3PID7ComputeEm>:
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed.  returns true when the output is computed,
 *   false when nothing has been done.
 **********************************************************************************/
bool PID::Compute(unsigned long timeChange)
{
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
   if(!inAuto) return false;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80090b0:	f083 0301 	eor.w	r3, r3, #1
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <_ZN3PID7ComputeEm+0x1e>
 80090ba:	2300      	movs	r3, #0
 80090bc:	e0d5      	b.n	800926a <_ZN3PID7ComputeEm+0x1ca>
//    unsigned long now = millis();
//   unsigned long timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	f0c0 80cf 	bcc.w	8009268 <_ZN3PID7ComputeEm+0x1c8>
   {
      /*Compute all the working error variables*/
      double input = *myInput;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double error = *mySetpoint - input;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80090de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e2:	f7f7 f8d1 	bl	8000288 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
      double dInput = (input - lastInput);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80090f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80090f8:	f7f7 f8c6 	bl	8000288 <__aeabi_dsub>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	e9c7 2302 	strd	r2, r3, [r7, #8]
      outputSum+= (ki * error);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8009110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009114:	f7f7 fa70 	bl	80005f8 <__aeabi_dmul>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	4620      	mov	r0, r4
 800911e:	4629      	mov	r1, r5
 8009120:	f7f7 f8b4 	bl	800028c <__adddf3>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Measurement, if P_ON_M is specified*/
      if(!pOnE) outputSum-= kp * dInput;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8009134:	f083 0301 	eor.w	r3, r3, #1
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	d014      	beq.n	8009168 <_ZN3PID7ComputeEm+0xc8>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800914a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4620      	mov	r0, r4
 8009158:	4629      	mov	r1, r5
 800915a:	f7f7 f895 	bl	8000288 <__aeabi_dsub>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      if(outputSum > outMax) outputSum= outMax;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009174:	f7f7 fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <_ZN3PID7ComputeEm+0xec>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 800918a:	e010      	b.n	80091ae <_ZN3PID7ComputeEm+0x10e>
      else if(outputSum < outMin) outputSum= outMin;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <_ZN3PID7ComputeEm+0x10e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

      /*Add Proportional on Error, if P_ON_E is specified*/
	   double output;
      if(pOnE) output = kp * error;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <_ZN3PID7ComputeEm+0x130>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80091be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80091c2:	f7f7 fa19 	bl	80005f8 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80091ce:	e005      	b.n	80091dc <_ZN3PID7ComputeEm+0x13c>
      else output = 0;
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	e9c7 2308 	strd	r2, r3, [r7, #32]

      /*Compute Rest of PID Output*/
      output += outputSum - kd * dInput;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80091e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091ec:	f7f7 fa04 	bl	80005f8 <__aeabi_dmul>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 f846 	bl	8000288 <__aeabi_dsub>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009204:	f7f7 f842 	bl	800028c <__adddf3>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	    if(output > outMax) output = outMax;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009216:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800921a:	f7f7 fc7d 	bl	8000b18 <__aeabi_dcmpgt>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <_ZN3PID7ComputeEm+0x190>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800922a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800922e:	e00e      	b.n	800924e <_ZN3PID7ComputeEm+0x1ae>
      else if(output < outMin) output = outMin;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800923a:	f7f7 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <_ZN3PID7ComputeEm+0x1ae>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800924a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	    *myOutput = output;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009256:	e9c1 2300 	strd	r2, r3, [r1]

      /*Remember some variables for next time*/
      lastInput = input;
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009260:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
//      lastTime = now;
	    return true;
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <_ZN3PID7ComputeEm+0x1ca>
   }
   else return false;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009274 <_ZN3PID10SetTuningsEdddi>:
 * This function allows the controller's dynamic performance to be adjusted.
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	61f8      	str	r0, [r7, #28]
 800927c:	ed87 0b04 	vstr	d0, [r7, #16]
 8009280:	ed87 1b02 	vstr	d1, [r7, #8]
 8009284:	ed87 2b00 	vstr	d2, [r7]
 8009288:	61b9      	str	r1, [r7, #24]
   if (Kp<0 || Ki<0 || Kd<0) return;
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009296:	f7f7 fc21 	bl	8000adc <__aeabi_dcmplt>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 8089 	bne.w	80093b4 <_ZN3PID10SetTuningsEdddi+0x140>
 80092a2:	f04f 0200 	mov.w	r2, #0
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092ae:	f7f7 fc15 	bl	8000adc <__aeabi_dcmplt>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d17d      	bne.n	80093b4 <_ZN3PID10SetTuningsEdddi+0x140>
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092c4:	f7f7 fc0a 	bl	8000adc <__aeabi_dcmplt>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d172      	bne.n	80093b4 <_ZN3PID10SetTuningsEdddi+0x140>

   pOn = POn;
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	635a      	str	r2, [r3, #52]	; 0x34
   pOnE = POn == PID_P_ON_E;
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	bf0c      	ite	eq
 80092da:	2301      	moveq	r3, #1
 80092dc:	2300      	movne	r3, #0
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
 80092e6:	69f9      	ldr	r1, [r7, #28]
 80092e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092ec:	e9c1 2300 	strd	r2, r3, [r1]
 80092f0:	69f9      	ldr	r1, [r7, #28]
 80092f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80092fa:	69f9      	ldr	r1, [r7, #28]
 80092fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009300:	e9c1 2304 	strd	r2, r3, [r1, #16]

   double SampleTimeInSec = ((double)SampleTime)/1000;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009308:	4618      	mov	r0, r3
 800930a:	f7f7 f8fb 	bl	8000504 <__aeabi_ui2d>
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	4b2a      	ldr	r3, [pc, #168]	; (80093bc <_ZN3PID10SetTuningsEdddi+0x148>)
 8009314:	f7f7 fa9a 	bl	800084c <__aeabi_ddiv>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   kp = Kp;
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009326:	e9c1 2306 	strd	r2, r3, [r1, #24]
   ki = Ki * SampleTimeInSec;
 800932a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800932e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	69f9      	ldr	r1, [r7, #28]
 800933c:	e9c1 2308 	strd	r2, r3, [r1, #32]
   kd = Kd / SampleTimeInSec;
 8009340:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009348:	f7f7 fa80 	bl	800084c <__aeabi_ddiv>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  if(controllerDirection == PID_REVERSE)
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935a:	2b01      	cmp	r3, #1
 800935c:	d12b      	bne.n	80093b6 <_ZN3PID10SetTuningsEdddi+0x142>
   {
      kp = (0 - kp);
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009364:	f04f 0000 	mov.w	r0, #0
 8009368:	f04f 0100 	mov.w	r1, #0
 800936c:	f7f6 ff8c 	bl	8000288 <__aeabi_dsub>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	69f9      	ldr	r1, [r7, #28]
 8009376:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009380:	f04f 0000 	mov.w	r0, #0
 8009384:	f04f 0100 	mov.w	r1, #0
 8009388:	f7f6 ff7e 	bl	8000288 <__aeabi_dsub>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	69f9      	ldr	r1, [r7, #28]
 8009392:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800939c:	f04f 0000 	mov.w	r0, #0
 80093a0:	f04f 0100 	mov.w	r1, #0
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	69f9      	ldr	r1, [r7, #28]
 80093ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 80093b2:	e000      	b.n	80093b6 <_ZN3PID10SetTuningsEdddi+0x142>
   if (Kp<0 || Ki<0 || Kd<0) return;
 80093b4:	bf00      	nop
   }
}
 80093b6:	3728      	adds	r7, #40	; 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	408f4000 	.word	0x408f4000

080093c0 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6178      	str	r0, [r7, #20]
 80093c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80093cc:	ed87 1b00 	vstr	d1, [r7]
   if(Min >= Max) return;
 80093d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093d8:	f7f7 fb94 	bl	8000b04 <__aeabi_dcmpge>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d165      	bne.n	80094ae <_ZN3PID15SetOutputLimitsEdd+0xee>
   outMin = Min;
 80093e2:	6979      	ldr	r1, [r7, #20]
 80093e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
   outMax = Max;
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

   if(inAuto)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d057      	beq.n	80094b0 <_ZN3PID15SetOutputLimitsEdd+0xf0>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800940e:	2401      	movs	r4, #1
 8009410:	f7f7 fb82 	bl	8000b18 <__aeabi_dcmpgt>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <_ZN3PID15SetOutputLimitsEdd+0x5e>
 800941a:	2300      	movs	r3, #0
 800941c:	461c      	mov	r4, r3
 800941e:	b2e3      	uxtb	r3, r4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <_ZN3PID15SetOutputLimitsEdd+0x74>
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800942e:	e9c1 2300 	strd	r2, r3, [r1]
 8009432:	e018      	b.n	8009466 <_ZN3PID15SetOutputLimitsEdd+0xa6>
	   else if(*myOutput < outMin) *myOutput = outMin;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009442:	2401      	movs	r4, #1
 8009444:	f7f7 fb4a 	bl	8000adc <__aeabi_dcmplt>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <_ZN3PID15SetOutputLimitsEdd+0x92>
 800944e:	2300      	movs	r3, #0
 8009450:	461c      	mov	r4, r3
 8009452:	b2e3      	uxtb	r3, r4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d006      	beq.n	8009466 <_ZN3PID15SetOutputLimitsEdd+0xa6>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009462:	e9c1 2300 	strd	r2, r3, [r1]

	   if(outputSum > outMax) outputSum= outMax;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009472:	f7f7 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <_ZN3PID15SetOutputLimitsEdd+0xca>
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009482:	6979      	ldr	r1, [r7, #20]
 8009484:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8009488:	e012      	b.n	80094b0 <_ZN3PID15SetOutputLimitsEdd+0xf0>
	   else if(outputSum < outMin) outputSum= outMin;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8009496:	f7f7 fb21 	bl	8000adc <__aeabi_dcmplt>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <_ZN3PID15SetOutputLimitsEdd+0xf0>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80094a6:	6979      	ldr	r1, [r7, #20]
 80094a8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 80094ac:	e000      	b.n	80094b0 <_ZN3PID15SetOutputLimitsEdd+0xf0>
   if(Min >= Max) return;
 80094ae:	bf00      	nop
   }
}
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd90      	pop	{r4, r7, pc}

080094b6 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
    bool newAuto = (Mode == PID_AUTOMATIC);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	bf0c      	ite	eq
 80094c6:	2301      	moveq	r3, #1
 80094c8:	2300      	movne	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
    if(newAuto && !inAuto)
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <_ZN3PID7SetModeEi+0x32>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80094d8:	f083 0301 	eor.w	r3, r3, #1
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <_ZN3PID7SetModeEi+0x32>
    {  /*we just went from manual to auto*/
        PID::Initialize();
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f808 	bl	80094f8 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	7bfa      	ldrb	r2, [r7, #15]
 80094ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
   outputSum = *myOutput;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   lastInput = *myInput;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
   if(outputSum > outMax) outputSum = outMax;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009528:	f7f7 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d006      	beq.n	8009540 <_ZN3PID10InitializeEv+0x48>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   else if(outputSum < outMin) outputSum = outMin;
}
 800953e:	e011      	b.n	8009564 <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800954c:	f7f7 fac6 	bl	8000adc <__aeabi_dcmplt>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d100      	bne.n	8009558 <_ZN3PID10InitializeEv+0x60>
}
 8009556:	e005      	b.n	8009564 <_ZN3PID10InitializeEv+0x6c>
   else if(outputSum < outMin) outputSum = outMin;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
   if(inAuto && Direction !=controllerDirection)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800957c:	2b00      	cmp	r3, #0
 800957e:	d02e      	beq.n	80095de <_ZN3PID22SetControllerDirectionEi+0x72>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d029      	beq.n	80095de <_ZN3PID22SetControllerDirectionEi+0x72>
   {
	  kp = (0 - kp);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009590:	f04f 0000 	mov.w	r0, #0
 8009594:	f04f 0100 	mov.w	r1, #0
 8009598:	f7f6 fe76 	bl	8000288 <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      ki = (0 - ki);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095ac:	f04f 0000 	mov.w	r0, #0
 80095b0:	f04f 0100 	mov.w	r1, #0
 80095b4:	f7f6 fe68 	bl	8000288 <__aeabi_dsub>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	e9c1 2308 	strd	r2, r3, [r1, #32]
      kd = (0 - kd);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80095c8:	f04f 0000 	mov.w	r0, #0
 80095cc:	f04f 0100 	mov.w	r1, #0
 80095d0:	f7f6 fe5a 	bl	8000288 <__aeabi_dsub>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   }
   controllerDirection = Direction;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <__errno>:
 80095ec:	4b01      	ldr	r3, [pc, #4]	; (80095f4 <__errno+0x8>)
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000010 	.word	0x20000010

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	; (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	; (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	; (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	; (800963c <__libc_init_array+0x44>)
 800960c:	f000 fd46 	bl	800a09c <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	0800a364 	.word	0x0800a364
 8009634:	0800a364 	.word	0x0800a364
 8009638:	0800a364 	.word	0x0800a364
 800963c:	0800a36c 	.word	0x0800a36c

08009640 <__retarget_lock_acquire_recursive>:
 8009640:	4770      	bx	lr

08009642 <__retarget_lock_release_recursive>:
 8009642:	4770      	bx	lr

08009644 <memcpy>:
 8009644:	440a      	add	r2, r1
 8009646:	4291      	cmp	r1, r2
 8009648:	f100 33ff 	add.w	r3, r0, #4294967295
 800964c:	d100      	bne.n	8009650 <memcpy+0xc>
 800964e:	4770      	bx	lr
 8009650:	b510      	push	{r4, lr}
 8009652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800965a:	4291      	cmp	r1, r2
 800965c:	d1f9      	bne.n	8009652 <memcpy+0xe>
 800965e:	bd10      	pop	{r4, pc}

08009660 <memset>:
 8009660:	4402      	add	r2, r0
 8009662:	4603      	mov	r3, r0
 8009664:	4293      	cmp	r3, r2
 8009666:	d100      	bne.n	800966a <memset+0xa>
 8009668:	4770      	bx	lr
 800966a:	f803 1b01 	strb.w	r1, [r3], #1
 800966e:	e7f9      	b.n	8009664 <memset+0x4>

08009670 <_malloc_r>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	1ccd      	adds	r5, r1, #3
 8009674:	f025 0503 	bic.w	r5, r5, #3
 8009678:	3508      	adds	r5, #8
 800967a:	2d0c      	cmp	r5, #12
 800967c:	bf38      	it	cc
 800967e:	250c      	movcc	r5, #12
 8009680:	2d00      	cmp	r5, #0
 8009682:	4606      	mov	r6, r0
 8009684:	db01      	blt.n	800968a <_malloc_r+0x1a>
 8009686:	42a9      	cmp	r1, r5
 8009688:	d903      	bls.n	8009692 <_malloc_r+0x22>
 800968a:	230c      	movs	r3, #12
 800968c:	6033      	str	r3, [r6, #0]
 800968e:	2000      	movs	r0, #0
 8009690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009692:	f000 f96f 	bl	8009974 <__malloc_lock>
 8009696:	4921      	ldr	r1, [pc, #132]	; (800971c <_malloc_r+0xac>)
 8009698:	680a      	ldr	r2, [r1, #0]
 800969a:	4614      	mov	r4, r2
 800969c:	b99c      	cbnz	r4, 80096c6 <_malloc_r+0x56>
 800969e:	4f20      	ldr	r7, [pc, #128]	; (8009720 <_malloc_r+0xb0>)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	b923      	cbnz	r3, 80096ae <_malloc_r+0x3e>
 80096a4:	4621      	mov	r1, r4
 80096a6:	4630      	mov	r0, r6
 80096a8:	f000 f8a6 	bl	80097f8 <_sbrk_r>
 80096ac:	6038      	str	r0, [r7, #0]
 80096ae:	4629      	mov	r1, r5
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f8a1 	bl	80097f8 <_sbrk_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d123      	bne.n	8009702 <_malloc_r+0x92>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 f95e 	bl	8009980 <__malloc_unlock>
 80096c4:	e7e3      	b.n	800968e <_malloc_r+0x1e>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	1b5b      	subs	r3, r3, r5
 80096ca:	d417      	bmi.n	80096fc <_malloc_r+0x8c>
 80096cc:	2b0b      	cmp	r3, #11
 80096ce:	d903      	bls.n	80096d8 <_malloc_r+0x68>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	441c      	add	r4, r3
 80096d4:	6025      	str	r5, [r4, #0]
 80096d6:	e004      	b.n	80096e2 <_malloc_r+0x72>
 80096d8:	6863      	ldr	r3, [r4, #4]
 80096da:	42a2      	cmp	r2, r4
 80096dc:	bf0c      	ite	eq
 80096de:	600b      	streq	r3, [r1, #0]
 80096e0:	6053      	strne	r3, [r2, #4]
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 f94c 	bl	8009980 <__malloc_unlock>
 80096e8:	f104 000b 	add.w	r0, r4, #11
 80096ec:	1d23      	adds	r3, r4, #4
 80096ee:	f020 0007 	bic.w	r0, r0, #7
 80096f2:	1ac2      	subs	r2, r0, r3
 80096f4:	d0cc      	beq.n	8009690 <_malloc_r+0x20>
 80096f6:	1a1b      	subs	r3, r3, r0
 80096f8:	50a3      	str	r3, [r4, r2]
 80096fa:	e7c9      	b.n	8009690 <_malloc_r+0x20>
 80096fc:	4622      	mov	r2, r4
 80096fe:	6864      	ldr	r4, [r4, #4]
 8009700:	e7cc      	b.n	800969c <_malloc_r+0x2c>
 8009702:	1cc4      	adds	r4, r0, #3
 8009704:	f024 0403 	bic.w	r4, r4, #3
 8009708:	42a0      	cmp	r0, r4
 800970a:	d0e3      	beq.n	80096d4 <_malloc_r+0x64>
 800970c:	1a21      	subs	r1, r4, r0
 800970e:	4630      	mov	r0, r6
 8009710:	f000 f872 	bl	80097f8 <_sbrk_r>
 8009714:	3001      	adds	r0, #1
 8009716:	d1dd      	bne.n	80096d4 <_malloc_r+0x64>
 8009718:	e7cf      	b.n	80096ba <_malloc_r+0x4a>
 800971a:	bf00      	nop
 800971c:	20004e1c 	.word	0x20004e1c
 8009720:	20004e20 	.word	0x20004e20

08009724 <cleanup_glue>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	460c      	mov	r4, r1
 8009728:	6809      	ldr	r1, [r1, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	b109      	cbz	r1, 8009732 <cleanup_glue+0xe>
 800972e:	f7ff fff9 	bl	8009724 <cleanup_glue>
 8009732:	4621      	mov	r1, r4
 8009734:	4628      	mov	r0, r5
 8009736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800973a:	f000 b927 	b.w	800998c <_free_r>
	...

08009740 <_reclaim_reent>:
 8009740:	4b2c      	ldr	r3, [pc, #176]	; (80097f4 <_reclaim_reent+0xb4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4283      	cmp	r3, r0
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	4604      	mov	r4, r0
 800974a:	d051      	beq.n	80097f0 <_reclaim_reent+0xb0>
 800974c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800974e:	b143      	cbz	r3, 8009762 <_reclaim_reent+0x22>
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d14a      	bne.n	80097ec <_reclaim_reent+0xac>
 8009756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009758:	6819      	ldr	r1, [r3, #0]
 800975a:	b111      	cbz	r1, 8009762 <_reclaim_reent+0x22>
 800975c:	4620      	mov	r0, r4
 800975e:	f000 f915 	bl	800998c <_free_r>
 8009762:	6961      	ldr	r1, [r4, #20]
 8009764:	b111      	cbz	r1, 800976c <_reclaim_reent+0x2c>
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f910 	bl	800998c <_free_r>
 800976c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800976e:	b111      	cbz	r1, 8009776 <_reclaim_reent+0x36>
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f90b 	bl	800998c <_free_r>
 8009776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009778:	b111      	cbz	r1, 8009780 <_reclaim_reent+0x40>
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f906 	bl	800998c <_free_r>
 8009780:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009782:	b111      	cbz	r1, 800978a <_reclaim_reent+0x4a>
 8009784:	4620      	mov	r0, r4
 8009786:	f000 f901 	bl	800998c <_free_r>
 800978a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800978c:	b111      	cbz	r1, 8009794 <_reclaim_reent+0x54>
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f8fc 	bl	800998c <_free_r>
 8009794:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009796:	b111      	cbz	r1, 800979e <_reclaim_reent+0x5e>
 8009798:	4620      	mov	r0, r4
 800979a:	f000 f8f7 	bl	800998c <_free_r>
 800979e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80097a0:	b111      	cbz	r1, 80097a8 <_reclaim_reent+0x68>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f8f2 	bl	800998c <_free_r>
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	b111      	cbz	r1, 80097b2 <_reclaim_reent+0x72>
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 f8ed 	bl	800998c <_free_r>
 80097b2:	69a3      	ldr	r3, [r4, #24]
 80097b4:	b1e3      	cbz	r3, 80097f0 <_reclaim_reent+0xb0>
 80097b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80097b8:	4620      	mov	r0, r4
 80097ba:	4798      	blx	r3
 80097bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80097be:	b1b9      	cbz	r1, 80097f0 <_reclaim_reent+0xb0>
 80097c0:	4620      	mov	r0, r4
 80097c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097c6:	f7ff bfad 	b.w	8009724 <cleanup_glue>
 80097ca:	5949      	ldr	r1, [r1, r5]
 80097cc:	b941      	cbnz	r1, 80097e0 <_reclaim_reent+0xa0>
 80097ce:	3504      	adds	r5, #4
 80097d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d2:	2d80      	cmp	r5, #128	; 0x80
 80097d4:	68d9      	ldr	r1, [r3, #12]
 80097d6:	d1f8      	bne.n	80097ca <_reclaim_reent+0x8a>
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f8d7 	bl	800998c <_free_r>
 80097de:	e7ba      	b.n	8009756 <_reclaim_reent+0x16>
 80097e0:	680e      	ldr	r6, [r1, #0]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f8d2 	bl	800998c <_free_r>
 80097e8:	4631      	mov	r1, r6
 80097ea:	e7ef      	b.n	80097cc <_reclaim_reent+0x8c>
 80097ec:	2500      	movs	r5, #0
 80097ee:	e7ef      	b.n	80097d0 <_reclaim_reent+0x90>
 80097f0:	bd70      	pop	{r4, r5, r6, pc}
 80097f2:	bf00      	nop
 80097f4:	20000010 	.word	0x20000010

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 ff62 	bl	80026cc <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20004ebc 	.word	0x20004ebc

08009818 <siprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b500      	push	{lr}
 800981c:	b09c      	sub	sp, #112	; 0x70
 800981e:	ab1d      	add	r3, sp, #116	; 0x74
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	9006      	str	r0, [sp, #24]
 8009824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <siprintf+0x38>)
 800982a:	9107      	str	r1, [sp, #28]
 800982c:	9104      	str	r1, [sp, #16]
 800982e:	4909      	ldr	r1, [pc, #36]	; (8009854 <siprintf+0x3c>)
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	a902      	add	r1, sp, #8
 800983c:	f000 f952 	bl	8009ae4 <_svfiprintf_r>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	b01c      	add	sp, #112	; 0x70
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	20000010 	.word	0x20000010
 8009854:	ffff0208 	.word	0xffff0208

08009858 <_strtol_l.isra.0>:
 8009858:	2b01      	cmp	r3, #1
 800985a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985e:	d001      	beq.n	8009864 <_strtol_l.isra.0+0xc>
 8009860:	2b24      	cmp	r3, #36	; 0x24
 8009862:	d906      	bls.n	8009872 <_strtol_l.isra.0+0x1a>
 8009864:	f7ff fec2 	bl	80095ec <__errno>
 8009868:	2316      	movs	r3, #22
 800986a:	6003      	str	r3, [r0, #0]
 800986c:	2000      	movs	r0, #0
 800986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009872:	4f3a      	ldr	r7, [pc, #232]	; (800995c <_strtol_l.isra.0+0x104>)
 8009874:	468e      	mov	lr, r1
 8009876:	4676      	mov	r6, lr
 8009878:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800987c:	5de5      	ldrb	r5, [r4, r7]
 800987e:	f015 0508 	ands.w	r5, r5, #8
 8009882:	d1f8      	bne.n	8009876 <_strtol_l.isra.0+0x1e>
 8009884:	2c2d      	cmp	r4, #45	; 0x2d
 8009886:	d134      	bne.n	80098f2 <_strtol_l.isra.0+0x9a>
 8009888:	f89e 4000 	ldrb.w	r4, [lr]
 800988c:	f04f 0801 	mov.w	r8, #1
 8009890:	f106 0e02 	add.w	lr, r6, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d05c      	beq.n	8009952 <_strtol_l.isra.0+0xfa>
 8009898:	2b10      	cmp	r3, #16
 800989a:	d10c      	bne.n	80098b6 <_strtol_l.isra.0+0x5e>
 800989c:	2c30      	cmp	r4, #48	; 0x30
 800989e:	d10a      	bne.n	80098b6 <_strtol_l.isra.0+0x5e>
 80098a0:	f89e 4000 	ldrb.w	r4, [lr]
 80098a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80098a8:	2c58      	cmp	r4, #88	; 0x58
 80098aa:	d14d      	bne.n	8009948 <_strtol_l.isra.0+0xf0>
 80098ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80098b0:	2310      	movs	r3, #16
 80098b2:	f10e 0e02 	add.w	lr, lr, #2
 80098b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80098ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80098be:	2600      	movs	r6, #0
 80098c0:	fbbc f9f3 	udiv	r9, ip, r3
 80098c4:	4635      	mov	r5, r6
 80098c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80098ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80098ce:	2f09      	cmp	r7, #9
 80098d0:	d818      	bhi.n	8009904 <_strtol_l.isra.0+0xac>
 80098d2:	463c      	mov	r4, r7
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	dd24      	ble.n	8009922 <_strtol_l.isra.0+0xca>
 80098d8:	2e00      	cmp	r6, #0
 80098da:	db1f      	blt.n	800991c <_strtol_l.isra.0+0xc4>
 80098dc:	45a9      	cmp	r9, r5
 80098de:	d31d      	bcc.n	800991c <_strtol_l.isra.0+0xc4>
 80098e0:	d101      	bne.n	80098e6 <_strtol_l.isra.0+0x8e>
 80098e2:	45a2      	cmp	sl, r4
 80098e4:	db1a      	blt.n	800991c <_strtol_l.isra.0+0xc4>
 80098e6:	fb05 4503 	mla	r5, r5, r3, r4
 80098ea:	2601      	movs	r6, #1
 80098ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80098f0:	e7eb      	b.n	80098ca <_strtol_l.isra.0+0x72>
 80098f2:	2c2b      	cmp	r4, #43	; 0x2b
 80098f4:	bf08      	it	eq
 80098f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80098fa:	46a8      	mov	r8, r5
 80098fc:	bf08      	it	eq
 80098fe:	f106 0e02 	addeq.w	lr, r6, #2
 8009902:	e7c7      	b.n	8009894 <_strtol_l.isra.0+0x3c>
 8009904:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009908:	2f19      	cmp	r7, #25
 800990a:	d801      	bhi.n	8009910 <_strtol_l.isra.0+0xb8>
 800990c:	3c37      	subs	r4, #55	; 0x37
 800990e:	e7e1      	b.n	80098d4 <_strtol_l.isra.0+0x7c>
 8009910:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009914:	2f19      	cmp	r7, #25
 8009916:	d804      	bhi.n	8009922 <_strtol_l.isra.0+0xca>
 8009918:	3c57      	subs	r4, #87	; 0x57
 800991a:	e7db      	b.n	80098d4 <_strtol_l.isra.0+0x7c>
 800991c:	f04f 36ff 	mov.w	r6, #4294967295
 8009920:	e7e4      	b.n	80098ec <_strtol_l.isra.0+0x94>
 8009922:	2e00      	cmp	r6, #0
 8009924:	da05      	bge.n	8009932 <_strtol_l.isra.0+0xda>
 8009926:	2322      	movs	r3, #34	; 0x22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	4665      	mov	r5, ip
 800992c:	b942      	cbnz	r2, 8009940 <_strtol_l.isra.0+0xe8>
 800992e:	4628      	mov	r0, r5
 8009930:	e79d      	b.n	800986e <_strtol_l.isra.0+0x16>
 8009932:	f1b8 0f00 	cmp.w	r8, #0
 8009936:	d000      	beq.n	800993a <_strtol_l.isra.0+0xe2>
 8009938:	426d      	negs	r5, r5
 800993a:	2a00      	cmp	r2, #0
 800993c:	d0f7      	beq.n	800992e <_strtol_l.isra.0+0xd6>
 800993e:	b10e      	cbz	r6, 8009944 <_strtol_l.isra.0+0xec>
 8009940:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	e7f2      	b.n	800992e <_strtol_l.isra.0+0xd6>
 8009948:	2430      	movs	r4, #48	; 0x30
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1b3      	bne.n	80098b6 <_strtol_l.isra.0+0x5e>
 800994e:	2308      	movs	r3, #8
 8009950:	e7b1      	b.n	80098b6 <_strtol_l.isra.0+0x5e>
 8009952:	2c30      	cmp	r4, #48	; 0x30
 8009954:	d0a4      	beq.n	80098a0 <_strtol_l.isra.0+0x48>
 8009956:	230a      	movs	r3, #10
 8009958:	e7ad      	b.n	80098b6 <_strtol_l.isra.0+0x5e>
 800995a:	bf00      	nop
 800995c:	0800a229 	.word	0x0800a229

08009960 <strtol>:
 8009960:	4613      	mov	r3, r2
 8009962:	460a      	mov	r2, r1
 8009964:	4601      	mov	r1, r0
 8009966:	4802      	ldr	r0, [pc, #8]	; (8009970 <strtol+0x10>)
 8009968:	6800      	ldr	r0, [r0, #0]
 800996a:	f7ff bf75 	b.w	8009858 <_strtol_l.isra.0>
 800996e:	bf00      	nop
 8009970:	20000010 	.word	0x20000010

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_lock+0x8>)
 8009976:	f7ff be63 	b.w	8009640 <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20004eb4 	.word	0x20004eb4

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_unlock+0x8>)
 8009982:	f7ff be5e 	b.w	8009642 <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20004eb4 	.word	0x20004eb4

0800998c <_free_r>:
 800998c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800998e:	2900      	cmp	r1, #0
 8009990:	d048      	beq.n	8009a24 <_free_r+0x98>
 8009992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009996:	9001      	str	r0, [sp, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f1a1 0404 	sub.w	r4, r1, #4
 800999e:	bfb8      	it	lt
 80099a0:	18e4      	addlt	r4, r4, r3
 80099a2:	f7ff ffe7 	bl	8009974 <__malloc_lock>
 80099a6:	4a20      	ldr	r2, [pc, #128]	; (8009a28 <_free_r+0x9c>)
 80099a8:	9801      	ldr	r0, [sp, #4]
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	4615      	mov	r5, r2
 80099ae:	b933      	cbnz	r3, 80099be <_free_r+0x32>
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	6014      	str	r4, [r2, #0]
 80099b4:	b003      	add	sp, #12
 80099b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ba:	f7ff bfe1 	b.w	8009980 <__malloc_unlock>
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d90b      	bls.n	80099da <_free_r+0x4e>
 80099c2:	6821      	ldr	r1, [r4, #0]
 80099c4:	1862      	adds	r2, r4, r1
 80099c6:	4293      	cmp	r3, r2
 80099c8:	bf04      	itt	eq
 80099ca:	681a      	ldreq	r2, [r3, #0]
 80099cc:	685b      	ldreq	r3, [r3, #4]
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	bf04      	itt	eq
 80099d2:	1852      	addeq	r2, r2, r1
 80099d4:	6022      	streq	r2, [r4, #0]
 80099d6:	602c      	str	r4, [r5, #0]
 80099d8:	e7ec      	b.n	80099b4 <_free_r+0x28>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x58>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x4e>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1855      	adds	r5, r2, r1
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x78>
 80099ec:	6824      	ldr	r4, [r4, #0]
 80099ee:	4421      	add	r1, r4
 80099f0:	1854      	adds	r4, r2, r1
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1dd      	bne.n	80099b4 <_free_r+0x28>
 80099f8:	681c      	ldr	r4, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	4421      	add	r1, r4
 8009a00:	6011      	str	r1, [r2, #0]
 8009a02:	e7d7      	b.n	80099b4 <_free_r+0x28>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x80>
 8009a06:	230c      	movs	r3, #12
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	e7d3      	b.n	80099b4 <_free_r+0x28>
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1961      	adds	r1, r4, r5
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1949      	addeq	r1, r1, r5
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7c7      	b.n	80099b4 <_free_r+0x28>
 8009a24:	b003      	add	sp, #12
 8009a26:	bd30      	pop	{r4, r5, pc}
 8009a28:	20004e1c 	.word	0x20004e1c

08009a2c <__ssputs_r>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	429e      	cmp	r6, r3
 8009a34:	4682      	mov	sl, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4690      	mov	r8, r2
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	d838      	bhi.n	8009ab0 <__ssputs_r+0x84>
 8009a3e:	898a      	ldrh	r2, [r1, #12]
 8009a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a44:	d032      	beq.n	8009aac <__ssputs_r+0x80>
 8009a46:	6825      	ldr	r5, [r4, #0]
 8009a48:	6909      	ldr	r1, [r1, #16]
 8009a4a:	eba5 0901 	sub.w	r9, r5, r1
 8009a4e:	6965      	ldr	r5, [r4, #20]
 8009a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a58:	3301      	adds	r3, #1
 8009a5a:	444b      	add	r3, r9
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d531      	bpl.n	8009acc <__ssputs_r+0xa0>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff fe01 	bl	8009670 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b950      	cbnz	r0, 8009a88 <__ssputs_r+0x5c>
 8009a72:	230c      	movs	r3, #12
 8009a74:	f8ca 3000 	str.w	r3, [sl]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	6921      	ldr	r1, [r4, #16]
 8009a8a:	464a      	mov	r2, r9
 8009a8c:	f7ff fdda 	bl	8009644 <memcpy>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	6126      	str	r6, [r4, #16]
 8009a9e:	6165      	str	r5, [r4, #20]
 8009aa0:	444e      	add	r6, r9
 8009aa2:	eba5 0509 	sub.w	r5, r5, r9
 8009aa6:	6026      	str	r6, [r4, #0]
 8009aa8:	60a5      	str	r5, [r4, #8]
 8009aaa:	463e      	mov	r6, r7
 8009aac:	42be      	cmp	r6, r7
 8009aae:	d900      	bls.n	8009ab2 <__ssputs_r+0x86>
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	f000 faa8 	bl	800a00c <memmove>
 8009abc:	68a3      	ldr	r3, [r4, #8]
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	1b9b      	subs	r3, r3, r6
 8009ac2:	4432      	add	r2, r6
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	6022      	str	r2, [r4, #0]
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e7db      	b.n	8009a84 <__ssputs_r+0x58>
 8009acc:	462a      	mov	r2, r5
 8009ace:	f000 fab7 	bl	800a040 <_realloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1e1      	bne.n	8009a9c <__ssputs_r+0x70>
 8009ad8:	6921      	ldr	r1, [r4, #16]
 8009ada:	4650      	mov	r0, sl
 8009adc:	f7ff ff56 	bl	800998c <_free_r>
 8009ae0:	e7c7      	b.n	8009a72 <__ssputs_r+0x46>
	...

08009ae4 <_svfiprintf_r>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4698      	mov	r8, r3
 8009aea:	898b      	ldrh	r3, [r1, #12]
 8009aec:	061b      	lsls	r3, r3, #24
 8009aee:	b09d      	sub	sp, #116	; 0x74
 8009af0:	4607      	mov	r7, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	d50e      	bpl.n	8009b16 <_svfiprintf_r+0x32>
 8009af8:	690b      	ldr	r3, [r1, #16]
 8009afa:	b963      	cbnz	r3, 8009b16 <_svfiprintf_r+0x32>
 8009afc:	2140      	movs	r1, #64	; 0x40
 8009afe:	f7ff fdb7 	bl	8009670 <_malloc_r>
 8009b02:	6028      	str	r0, [r5, #0]
 8009b04:	6128      	str	r0, [r5, #16]
 8009b06:	b920      	cbnz	r0, 8009b12 <_svfiprintf_r+0x2e>
 8009b08:	230c      	movs	r3, #12
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e0d1      	b.n	8009cb6 <_svfiprintf_r+0x1d2>
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	616b      	str	r3, [r5, #20]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b24:	2330      	movs	r3, #48	; 0x30
 8009b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cd0 <_svfiprintf_r+0x1ec>
 8009b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2e:	f04f 0901 	mov.w	r9, #1
 8009b32:	4623      	mov	r3, r4
 8009b34:	469a      	mov	sl, r3
 8009b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3a:	b10a      	cbz	r2, 8009b40 <_svfiprintf_r+0x5c>
 8009b3c:	2a25      	cmp	r2, #37	; 0x25
 8009b3e:	d1f9      	bne.n	8009b34 <_svfiprintf_r+0x50>
 8009b40:	ebba 0b04 	subs.w	fp, sl, r4
 8009b44:	d00b      	beq.n	8009b5e <_svfiprintf_r+0x7a>
 8009b46:	465b      	mov	r3, fp
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ff6d 	bl	8009a2c <__ssputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80aa 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5a:	445a      	add	r2, fp
 8009b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80a2 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	f10a 0a01 	add.w	sl, sl, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b80:	4654      	mov	r4, sl
 8009b82:	2205      	movs	r2, #5
 8009b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b88:	4851      	ldr	r0, [pc, #324]	; (8009cd0 <_svfiprintf_r+0x1ec>)
 8009b8a:	f7f6 fb29 	bl	80001e0 <memchr>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	b9d8      	cbnz	r0, 8009bca <_svfiprintf_r+0xe6>
 8009b92:	06d0      	lsls	r0, r2, #27
 8009b94:	bf44      	itt	mi
 8009b96:	2320      	movmi	r3, #32
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9c:	0711      	lsls	r1, r2, #28
 8009b9e:	bf44      	itt	mi
 8009ba0:	232b      	movmi	r3, #43	; 0x2b
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bac:	d015      	beq.n	8009bda <_svfiprintf_r+0xf6>
 8009bae:	9a07      	ldr	r2, [sp, #28]
 8009bb0:	4654      	mov	r4, sl
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f04f 0c0a 	mov.w	ip, #10
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bbe:	3b30      	subs	r3, #48	; 0x30
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d94e      	bls.n	8009c62 <_svfiprintf_r+0x17e>
 8009bc4:	b1b0      	cbz	r0, 8009bf4 <_svfiprintf_r+0x110>
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	e014      	b.n	8009bf4 <_svfiprintf_r+0x110>
 8009bca:	eba0 0308 	sub.w	r3, r0, r8
 8009bce:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	46a2      	mov	sl, r4
 8009bd8:	e7d2      	b.n	8009b80 <_svfiprintf_r+0x9c>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d19      	adds	r1, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfbb      	ittet	lt
 8009be6:	425b      	neglt	r3, r3
 8009be8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bec:	9307      	strge	r3, [sp, #28]
 8009bee:	9307      	strlt	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	9204      	strlt	r2, [sp, #16]
 8009bf4:	7823      	ldrb	r3, [r4, #0]
 8009bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf8:	d10c      	bne.n	8009c14 <_svfiprintf_r+0x130>
 8009bfa:	7863      	ldrb	r3, [r4, #1]
 8009bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfe:	d135      	bne.n	8009c6c <_svfiprintf_r+0x188>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	1d1a      	adds	r2, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	9203      	str	r2, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c10:	3402      	adds	r4, #2
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ce0 <_svfiprintf_r+0x1fc>
 8009c18:	7821      	ldrb	r1, [r4, #0]
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	f7f6 fadf 	bl	80001e0 <memchr>
 8009c22:	b140      	cbz	r0, 8009c36 <_svfiprintf_r+0x152>
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	eba0 000a 	sub.w	r0, r0, sl
 8009c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	4303      	orrs	r3, r0
 8009c32:	3401      	adds	r4, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4826      	ldr	r0, [pc, #152]	; (8009cd4 <_svfiprintf_r+0x1f0>)
 8009c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c40:	2206      	movs	r2, #6
 8009c42:	f7f6 facd 	bl	80001e0 <memchr>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d038      	beq.n	8009cbc <_svfiprintf_r+0x1d8>
 8009c4a:	4b23      	ldr	r3, [pc, #140]	; (8009cd8 <_svfiprintf_r+0x1f4>)
 8009c4c:	bb1b      	cbnz	r3, 8009c96 <_svfiprintf_r+0x1b2>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3307      	adds	r3, #7
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	3308      	adds	r3, #8
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5c:	4433      	add	r3, r6
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	e767      	b.n	8009b32 <_svfiprintf_r+0x4e>
 8009c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c66:	460c      	mov	r4, r1
 8009c68:	2001      	movs	r0, #1
 8009c6a:	e7a5      	b.n	8009bb8 <_svfiprintf_r+0xd4>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	3401      	adds	r4, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7e:	3a30      	subs	r2, #48	; 0x30
 8009c80:	2a09      	cmp	r2, #9
 8009c82:	d903      	bls.n	8009c8c <_svfiprintf_r+0x1a8>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c5      	beq.n	8009c14 <_svfiprintf_r+0x130>
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	e7c3      	b.n	8009c14 <_svfiprintf_r+0x130>
 8009c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c90:	4604      	mov	r4, r0
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f0      	b.n	8009c78 <_svfiprintf_r+0x194>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f3af 8000 	nop.w
 8009ca6:	1c42      	adds	r2, r0, #1
 8009ca8:	4606      	mov	r6, r0
 8009caa:	d1d6      	bne.n	8009c5a <_svfiprintf_r+0x176>
 8009cac:	89ab      	ldrh	r3, [r5, #12]
 8009cae:	065b      	lsls	r3, r3, #25
 8009cb0:	f53f af2c 	bmi.w	8009b0c <_svfiprintf_r+0x28>
 8009cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb6:	b01d      	add	sp, #116	; 0x74
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f000 f87a 	bl	8009dc0 <_printf_i>
 8009ccc:	e7eb      	b.n	8009ca6 <_svfiprintf_r+0x1c2>
 8009cce:	bf00      	nop
 8009cd0:	0800a329 	.word	0x0800a329
 8009cd4:	0800a333 	.word	0x0800a333
 8009cd8:	00000000 	.word	0x00000000
 8009cdc:	08009a2d 	.word	0x08009a2d
 8009ce0:	0800a32f 	.word	0x0800a32f

08009ce4 <_printf_common>:
 8009ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce8:	4616      	mov	r6, r2
 8009cea:	4699      	mov	r9, r3
 8009cec:	688a      	ldr	r2, [r1, #8]
 8009cee:	690b      	ldr	r3, [r1, #16]
 8009cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	bfb8      	it	lt
 8009cf8:	4613      	movlt	r3, r2
 8009cfa:	6033      	str	r3, [r6, #0]
 8009cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d00:	4607      	mov	r7, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	b10a      	cbz	r2, 8009d0a <_printf_common+0x26>
 8009d06:	3301      	adds	r3, #1
 8009d08:	6033      	str	r3, [r6, #0]
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	0699      	lsls	r1, r3, #26
 8009d0e:	bf42      	ittt	mi
 8009d10:	6833      	ldrmi	r3, [r6, #0]
 8009d12:	3302      	addmi	r3, #2
 8009d14:	6033      	strmi	r3, [r6, #0]
 8009d16:	6825      	ldr	r5, [r4, #0]
 8009d18:	f015 0506 	ands.w	r5, r5, #6
 8009d1c:	d106      	bne.n	8009d2c <_printf_common+0x48>
 8009d1e:	f104 0a19 	add.w	sl, r4, #25
 8009d22:	68e3      	ldr	r3, [r4, #12]
 8009d24:	6832      	ldr	r2, [r6, #0]
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	42ab      	cmp	r3, r5
 8009d2a:	dc26      	bgt.n	8009d7a <_printf_common+0x96>
 8009d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d30:	1e13      	subs	r3, r2, #0
 8009d32:	6822      	ldr	r2, [r4, #0]
 8009d34:	bf18      	it	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	0692      	lsls	r2, r2, #26
 8009d3a:	d42b      	bmi.n	8009d94 <_printf_common+0xb0>
 8009d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d40:	4649      	mov	r1, r9
 8009d42:	4638      	mov	r0, r7
 8009d44:	47c0      	blx	r8
 8009d46:	3001      	adds	r0, #1
 8009d48:	d01e      	beq.n	8009d88 <_printf_common+0xa4>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	68e5      	ldr	r5, [r4, #12]
 8009d4e:	6832      	ldr	r2, [r6, #0]
 8009d50:	f003 0306 	and.w	r3, r3, #6
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	bf08      	it	eq
 8009d58:	1aad      	subeq	r5, r5, r2
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	6922      	ldr	r2, [r4, #16]
 8009d5e:	bf0c      	ite	eq
 8009d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d64:	2500      	movne	r5, #0
 8009d66:	4293      	cmp	r3, r2
 8009d68:	bfc4      	itt	gt
 8009d6a:	1a9b      	subgt	r3, r3, r2
 8009d6c:	18ed      	addgt	r5, r5, r3
 8009d6e:	2600      	movs	r6, #0
 8009d70:	341a      	adds	r4, #26
 8009d72:	42b5      	cmp	r5, r6
 8009d74:	d11a      	bne.n	8009dac <_printf_common+0xc8>
 8009d76:	2000      	movs	r0, #0
 8009d78:	e008      	b.n	8009d8c <_printf_common+0xa8>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	4649      	mov	r1, r9
 8009d80:	4638      	mov	r0, r7
 8009d82:	47c0      	blx	r8
 8009d84:	3001      	adds	r0, #1
 8009d86:	d103      	bne.n	8009d90 <_printf_common+0xac>
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d90:	3501      	adds	r5, #1
 8009d92:	e7c6      	b.n	8009d22 <_printf_common+0x3e>
 8009d94:	18e1      	adds	r1, r4, r3
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	2030      	movs	r0, #48	; 0x30
 8009d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d9e:	4422      	add	r2, r4
 8009da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009da8:	3302      	adds	r3, #2
 8009daa:	e7c7      	b.n	8009d3c <_printf_common+0x58>
 8009dac:	2301      	movs	r3, #1
 8009dae:	4622      	mov	r2, r4
 8009db0:	4649      	mov	r1, r9
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c0      	blx	r8
 8009db6:	3001      	adds	r0, #1
 8009db8:	d0e6      	beq.n	8009d88 <_printf_common+0xa4>
 8009dba:	3601      	adds	r6, #1
 8009dbc:	e7d9      	b.n	8009d72 <_printf_common+0x8e>
	...

08009dc0 <_printf_i>:
 8009dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	4691      	mov	r9, r2
 8009dc8:	7e27      	ldrb	r7, [r4, #24]
 8009dca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dcc:	2f78      	cmp	r7, #120	; 0x78
 8009dce:	4680      	mov	r8, r0
 8009dd0:	469a      	mov	sl, r3
 8009dd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd6:	d807      	bhi.n	8009de8 <_printf_i+0x28>
 8009dd8:	2f62      	cmp	r7, #98	; 0x62
 8009dda:	d80a      	bhi.n	8009df2 <_printf_i+0x32>
 8009ddc:	2f00      	cmp	r7, #0
 8009dde:	f000 80d8 	beq.w	8009f92 <_printf_i+0x1d2>
 8009de2:	2f58      	cmp	r7, #88	; 0x58
 8009de4:	f000 80a3 	beq.w	8009f2e <_printf_i+0x16e>
 8009de8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009df0:	e03a      	b.n	8009e68 <_printf_i+0xa8>
 8009df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009df6:	2b15      	cmp	r3, #21
 8009df8:	d8f6      	bhi.n	8009de8 <_printf_i+0x28>
 8009dfa:	a001      	add	r0, pc, #4	; (adr r0, 8009e00 <_printf_i+0x40>)
 8009dfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e00:	08009e59 	.word	0x08009e59
 8009e04:	08009e6d 	.word	0x08009e6d
 8009e08:	08009de9 	.word	0x08009de9
 8009e0c:	08009de9 	.word	0x08009de9
 8009e10:	08009de9 	.word	0x08009de9
 8009e14:	08009de9 	.word	0x08009de9
 8009e18:	08009e6d 	.word	0x08009e6d
 8009e1c:	08009de9 	.word	0x08009de9
 8009e20:	08009de9 	.word	0x08009de9
 8009e24:	08009de9 	.word	0x08009de9
 8009e28:	08009de9 	.word	0x08009de9
 8009e2c:	08009f79 	.word	0x08009f79
 8009e30:	08009e9d 	.word	0x08009e9d
 8009e34:	08009f5b 	.word	0x08009f5b
 8009e38:	08009de9 	.word	0x08009de9
 8009e3c:	08009de9 	.word	0x08009de9
 8009e40:	08009f9b 	.word	0x08009f9b
 8009e44:	08009de9 	.word	0x08009de9
 8009e48:	08009e9d 	.word	0x08009e9d
 8009e4c:	08009de9 	.word	0x08009de9
 8009e50:	08009de9 	.word	0x08009de9
 8009e54:	08009f63 	.word	0x08009f63
 8009e58:	680b      	ldr	r3, [r1, #0]
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	600a      	str	r2, [r1, #0]
 8009e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e0a3      	b.n	8009fb4 <_printf_i+0x1f4>
 8009e6c:	6825      	ldr	r5, [r4, #0]
 8009e6e:	6808      	ldr	r0, [r1, #0]
 8009e70:	062e      	lsls	r6, r5, #24
 8009e72:	f100 0304 	add.w	r3, r0, #4
 8009e76:	d50a      	bpl.n	8009e8e <_printf_i+0xce>
 8009e78:	6805      	ldr	r5, [r0, #0]
 8009e7a:	600b      	str	r3, [r1, #0]
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	da03      	bge.n	8009e88 <_printf_i+0xc8>
 8009e80:	232d      	movs	r3, #45	; 0x2d
 8009e82:	426d      	negs	r5, r5
 8009e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e88:	485e      	ldr	r0, [pc, #376]	; (800a004 <_printf_i+0x244>)
 8009e8a:	230a      	movs	r3, #10
 8009e8c:	e019      	b.n	8009ec2 <_printf_i+0x102>
 8009e8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e92:	6805      	ldr	r5, [r0, #0]
 8009e94:	600b      	str	r3, [r1, #0]
 8009e96:	bf18      	it	ne
 8009e98:	b22d      	sxthne	r5, r5
 8009e9a:	e7ef      	b.n	8009e7c <_printf_i+0xbc>
 8009e9c:	680b      	ldr	r3, [r1, #0]
 8009e9e:	6825      	ldr	r5, [r4, #0]
 8009ea0:	1d18      	adds	r0, r3, #4
 8009ea2:	6008      	str	r0, [r1, #0]
 8009ea4:	0628      	lsls	r0, r5, #24
 8009ea6:	d501      	bpl.n	8009eac <_printf_i+0xec>
 8009ea8:	681d      	ldr	r5, [r3, #0]
 8009eaa:	e002      	b.n	8009eb2 <_printf_i+0xf2>
 8009eac:	0669      	lsls	r1, r5, #25
 8009eae:	d5fb      	bpl.n	8009ea8 <_printf_i+0xe8>
 8009eb0:	881d      	ldrh	r5, [r3, #0]
 8009eb2:	4854      	ldr	r0, [pc, #336]	; (800a004 <_printf_i+0x244>)
 8009eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8009eb6:	bf0c      	ite	eq
 8009eb8:	2308      	moveq	r3, #8
 8009eba:	230a      	movne	r3, #10
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ec2:	6866      	ldr	r6, [r4, #4]
 8009ec4:	60a6      	str	r6, [r4, #8]
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	bfa2      	ittt	ge
 8009eca:	6821      	ldrge	r1, [r4, #0]
 8009ecc:	f021 0104 	bicge.w	r1, r1, #4
 8009ed0:	6021      	strge	r1, [r4, #0]
 8009ed2:	b90d      	cbnz	r5, 8009ed8 <_printf_i+0x118>
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	d04d      	beq.n	8009f74 <_printf_i+0x1b4>
 8009ed8:	4616      	mov	r6, r2
 8009eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ede:	fb03 5711 	mls	r7, r3, r1, r5
 8009ee2:	5dc7      	ldrb	r7, [r0, r7]
 8009ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ee8:	462f      	mov	r7, r5
 8009eea:	42bb      	cmp	r3, r7
 8009eec:	460d      	mov	r5, r1
 8009eee:	d9f4      	bls.n	8009eda <_printf_i+0x11a>
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d10b      	bne.n	8009f0c <_printf_i+0x14c>
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	07df      	lsls	r7, r3, #31
 8009ef8:	d508      	bpl.n	8009f0c <_printf_i+0x14c>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	4299      	cmp	r1, r3
 8009f00:	bfde      	ittt	le
 8009f02:	2330      	movle	r3, #48	; 0x30
 8009f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f0c:	1b92      	subs	r2, r2, r6
 8009f0e:	6122      	str	r2, [r4, #16]
 8009f10:	f8cd a000 	str.w	sl, [sp]
 8009f14:	464b      	mov	r3, r9
 8009f16:	aa03      	add	r2, sp, #12
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff fee2 	bl	8009ce4 <_printf_common>
 8009f20:	3001      	adds	r0, #1
 8009f22:	d14c      	bne.n	8009fbe <_printf_i+0x1fe>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	b004      	add	sp, #16
 8009f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2e:	4835      	ldr	r0, [pc, #212]	; (800a004 <_printf_i+0x244>)
 8009f30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	680e      	ldr	r6, [r1, #0]
 8009f38:	061f      	lsls	r7, r3, #24
 8009f3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f3e:	600e      	str	r6, [r1, #0]
 8009f40:	d514      	bpl.n	8009f6c <_printf_i+0x1ac>
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	bf44      	itt	mi
 8009f46:	f043 0320 	orrmi.w	r3, r3, #32
 8009f4a:	6023      	strmi	r3, [r4, #0]
 8009f4c:	b91d      	cbnz	r5, 8009f56 <_printf_i+0x196>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	f023 0320 	bic.w	r3, r3, #32
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	2310      	movs	r3, #16
 8009f58:	e7b0      	b.n	8009ebc <_printf_i+0xfc>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f043 0320 	orr.w	r3, r3, #32
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	2378      	movs	r3, #120	; 0x78
 8009f64:	4828      	ldr	r0, [pc, #160]	; (800a008 <_printf_i+0x248>)
 8009f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f6a:	e7e3      	b.n	8009f34 <_printf_i+0x174>
 8009f6c:	065e      	lsls	r6, r3, #25
 8009f6e:	bf48      	it	mi
 8009f70:	b2ad      	uxthmi	r5, r5
 8009f72:	e7e6      	b.n	8009f42 <_printf_i+0x182>
 8009f74:	4616      	mov	r6, r2
 8009f76:	e7bb      	b.n	8009ef0 <_printf_i+0x130>
 8009f78:	680b      	ldr	r3, [r1, #0]
 8009f7a:	6826      	ldr	r6, [r4, #0]
 8009f7c:	6960      	ldr	r0, [r4, #20]
 8009f7e:	1d1d      	adds	r5, r3, #4
 8009f80:	600d      	str	r5, [r1, #0]
 8009f82:	0635      	lsls	r5, r6, #24
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	d501      	bpl.n	8009f8c <_printf_i+0x1cc>
 8009f88:	6018      	str	r0, [r3, #0]
 8009f8a:	e002      	b.n	8009f92 <_printf_i+0x1d2>
 8009f8c:	0671      	lsls	r1, r6, #25
 8009f8e:	d5fb      	bpl.n	8009f88 <_printf_i+0x1c8>
 8009f90:	8018      	strh	r0, [r3, #0]
 8009f92:	2300      	movs	r3, #0
 8009f94:	6123      	str	r3, [r4, #16]
 8009f96:	4616      	mov	r6, r2
 8009f98:	e7ba      	b.n	8009f10 <_printf_i+0x150>
 8009f9a:	680b      	ldr	r3, [r1, #0]
 8009f9c:	1d1a      	adds	r2, r3, #4
 8009f9e:	600a      	str	r2, [r1, #0]
 8009fa0:	681e      	ldr	r6, [r3, #0]
 8009fa2:	6862      	ldr	r2, [r4, #4]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7f6 f91a 	bl	80001e0 <memchr>
 8009fac:	b108      	cbz	r0, 8009fb2 <_printf_i+0x1f2>
 8009fae:	1b80      	subs	r0, r0, r6
 8009fb0:	6060      	str	r0, [r4, #4]
 8009fb2:	6863      	ldr	r3, [r4, #4]
 8009fb4:	6123      	str	r3, [r4, #16]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fbc:	e7a8      	b.n	8009f10 <_printf_i+0x150>
 8009fbe:	6923      	ldr	r3, [r4, #16]
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	47d0      	blx	sl
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d0ab      	beq.n	8009f24 <_printf_i+0x164>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	079b      	lsls	r3, r3, #30
 8009fd0:	d413      	bmi.n	8009ffa <_printf_i+0x23a>
 8009fd2:	68e0      	ldr	r0, [r4, #12]
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	4298      	cmp	r0, r3
 8009fd8:	bfb8      	it	lt
 8009fda:	4618      	movlt	r0, r3
 8009fdc:	e7a4      	b.n	8009f28 <_printf_i+0x168>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	47d0      	blx	sl
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d09b      	beq.n	8009f24 <_printf_i+0x164>
 8009fec:	3501      	adds	r5, #1
 8009fee:	68e3      	ldr	r3, [r4, #12]
 8009ff0:	9903      	ldr	r1, [sp, #12]
 8009ff2:	1a5b      	subs	r3, r3, r1
 8009ff4:	42ab      	cmp	r3, r5
 8009ff6:	dcf2      	bgt.n	8009fde <_printf_i+0x21e>
 8009ff8:	e7eb      	b.n	8009fd2 <_printf_i+0x212>
 8009ffa:	2500      	movs	r5, #0
 8009ffc:	f104 0619 	add.w	r6, r4, #25
 800a000:	e7f5      	b.n	8009fee <_printf_i+0x22e>
 800a002:	bf00      	nop
 800a004:	0800a33a 	.word	0x0800a33a
 800a008:	0800a34b 	.word	0x0800a34b

0800a00c <memmove>:
 800a00c:	4288      	cmp	r0, r1
 800a00e:	b510      	push	{r4, lr}
 800a010:	eb01 0402 	add.w	r4, r1, r2
 800a014:	d902      	bls.n	800a01c <memmove+0x10>
 800a016:	4284      	cmp	r4, r0
 800a018:	4623      	mov	r3, r4
 800a01a:	d807      	bhi.n	800a02c <memmove+0x20>
 800a01c:	1e43      	subs	r3, r0, #1
 800a01e:	42a1      	cmp	r1, r4
 800a020:	d008      	beq.n	800a034 <memmove+0x28>
 800a022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a02a:	e7f8      	b.n	800a01e <memmove+0x12>
 800a02c:	4402      	add	r2, r0
 800a02e:	4601      	mov	r1, r0
 800a030:	428a      	cmp	r2, r1
 800a032:	d100      	bne.n	800a036 <memmove+0x2a>
 800a034:	bd10      	pop	{r4, pc}
 800a036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a03e:	e7f7      	b.n	800a030 <memmove+0x24>

0800a040 <_realloc_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	4607      	mov	r7, r0
 800a044:	4614      	mov	r4, r2
 800a046:	460e      	mov	r6, r1
 800a048:	b921      	cbnz	r1, 800a054 <_realloc_r+0x14>
 800a04a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a04e:	4611      	mov	r1, r2
 800a050:	f7ff bb0e 	b.w	8009670 <_malloc_r>
 800a054:	b922      	cbnz	r2, 800a060 <_realloc_r+0x20>
 800a056:	f7ff fc99 	bl	800998c <_free_r>
 800a05a:	4625      	mov	r5, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a060:	f000 f814 	bl	800a08c <_malloc_usable_size_r>
 800a064:	42a0      	cmp	r0, r4
 800a066:	d20f      	bcs.n	800a088 <_realloc_r+0x48>
 800a068:	4621      	mov	r1, r4
 800a06a:	4638      	mov	r0, r7
 800a06c:	f7ff fb00 	bl	8009670 <_malloc_r>
 800a070:	4605      	mov	r5, r0
 800a072:	2800      	cmp	r0, #0
 800a074:	d0f2      	beq.n	800a05c <_realloc_r+0x1c>
 800a076:	4631      	mov	r1, r6
 800a078:	4622      	mov	r2, r4
 800a07a:	f7ff fae3 	bl	8009644 <memcpy>
 800a07e:	4631      	mov	r1, r6
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff fc83 	bl	800998c <_free_r>
 800a086:	e7e9      	b.n	800a05c <_realloc_r+0x1c>
 800a088:	4635      	mov	r5, r6
 800a08a:	e7e7      	b.n	800a05c <_realloc_r+0x1c>

0800a08c <_malloc_usable_size_r>:
 800a08c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a090:	1f18      	subs	r0, r3, #4
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfbc      	itt	lt
 800a096:	580b      	ldrlt	r3, [r1, r0]
 800a098:	18c0      	addlt	r0, r0, r3
 800a09a:	4770      	bx	lr

0800a09c <_init>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	bf00      	nop
 800a0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a2:	bc08      	pop	{r3}
 800a0a4:	469e      	mov	lr, r3
 800a0a6:	4770      	bx	lr

0800a0a8 <_fini>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	bf00      	nop
 800a0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ae:	bc08      	pop	{r3}
 800a0b0:	469e      	mov	lr, r3
 800a0b2:	4770      	bx	lr
