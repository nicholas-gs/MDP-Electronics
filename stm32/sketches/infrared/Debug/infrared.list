
infrared.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  080083d8  080083d8  000183d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004fac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005024  20005024  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb42  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003966  00000000  00000000  0003bbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f0  00000000  00000000  000409b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004584  00000000  00000000  00041ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165f4  00000000  00000000  0004622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0db5  00000000  00000000  0005c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013d5d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e04  00000000  00000000  0013d628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083bc 	.word	0x080083bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080083bc 	.word	0x080083bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <adc_to_distance>:
//	  float voltage = raw * ADC_REF / ADC_STEPS;
//	  return (int)(29.988 * pow(voltage, -1.173));
//}

uint16_t adc_to_distance(uint16_t raw)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
	  float voltage = raw * ADC_REF / ADC_STEPS;
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff faf1 	bl	8000514 <__aeabi_i2d>
 8000f32:	a320      	add	r3, pc, #128	; (adr r3, 8000fb4 <adc_to_distance+0x94>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fb56 	bl	80005e8 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <adc_to_distance+0x90>)
 8000f4a:	f7ff fc77 	bl	800083c <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fe17 	bl	8000b88 <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	60fb      	str	r3, [r7, #12]
	  return (uint16_t)(29.988 * pow(voltage, -1.173));
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff faea 	bl	8000538 <__aeabi_f2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8000fa0 <adc_to_distance+0x80>
 8000f6c:	ec43 2b10 	vmov	d0, r2, r3
 8000f70:	f006 fa70 	bl	8007454 <pow>
 8000f74:	ec51 0b10 	vmov	r0, r1, d0
 8000f78:	a30b      	add	r3, pc, #44	; (adr r3, 8000fa8 <adc_to_distance+0x88>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fb33 	bl	80005e8 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fddd 	bl	8000b48 <__aeabi_d2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29b      	uxth	r3, r3
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	a5e353f8 	.word	0xa5e353f8
 8000fa4:	bff2c49b 	.word	0xbff2c49b
 8000fa8:	916872b0 	.word	0x916872b0
 8000fac:	403dfced 	.word	0x403dfced
 8000fb0:	40b00000 	.word	0x40b00000
 8000fb4:	66666666 	.word	0x66666666
 8000fb8:	400a6666 	.word	0x400a6666

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc0:	f000 fbe8 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc4:	f000 f836 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc8:	f000 f912 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fcc:	f000 f8f0 	bl	80011b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd0:	f000 f88e 	bl	80010f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd4:	f002 fdca 	bl	8003b6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <main+0x54>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <main+0x58>)
 8000fde:	f002 fe0f 	bl	8003c00 <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <main+0x5c>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* creation of InfraredTask */
  InfraredTaskHandle = osThreadNew(infrared_task, NULL, &InfraredTask_attributes);
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <main+0x60>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <main+0x64>)
 8000fee:	f002 fe07 	bl	8003c00 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <main+0x68>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(oled_task, NULL, &OLEDTask_attributes);
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <main+0x6c>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480b      	ldr	r0, [pc, #44]	; (800102c <main+0x70>)
 8000ffe:	f002 fdff 	bl	8003c00 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <main+0x74>)
 8001006:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001008:	f002 fdd4 	bl	8003bb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100c:	e7fe      	b.n	800100c <main+0x50>
 800100e:	bf00      	nop
 8001010:	08008424 	.word	0x08008424
 8001014:	08001381 	.word	0x08001381
 8001018:	20004a70 	.word	0x20004a70
 800101c:	08008448 	.word	0x08008448
 8001020:	08001391 	.word	0x08001391
 8001024:	20004a78 	.word	0x20004a78
 8001028:	0800846c 	.word	0x0800846c
 800102c:	080013b9 	.word	0x080013b9
 8001030:	20004a7c 	.word	0x20004a7c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 fd76 	bl	8006b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <SystemClock_Config+0xb4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <SystemClock_Config+0xb4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <SystemClock_Config+0xb4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <SystemClock_Config+0xb8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <SystemClock_Config+0xb8>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <SystemClock_Config+0xb8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001098:	2310      	movs	r3, #16
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fe09 	bl	8002cbc <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010b0:	f000 f9d2 	bl	8001458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f86c 	bl	80031ac <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010da:	f000 f9bd 	bl	8001458 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <MX_ADC1_Init+0xb8>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001116:	2201      	movs	r2, #1
 8001118:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800111c:	2201      	movs	r2, #1
 800111e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800112a:	2200      	movs	r2, #0
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <MX_ADC1_Init+0xbc>)
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800113c:	2202      	movs	r2, #2
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800114a:	2201      	movs	r2, #1
 800114c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001150:	f000 fb86 	bl	8001860 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 f97d 	bl	8001458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800115e:	230a      	movs	r3, #10
 8001160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_ADC1_Init+0xb4>)
 8001170:	f000 fcd4 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800117a:	f000 f96d 	bl	8001458 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800117e:	230b      	movs	r3, #11
 8001180:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_ADC1_Init+0xb4>)
 800118c:	f000 fcc6 	bl	8001b1c <HAL_ADC_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001196:	f000 f95f 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20004a80 	.word	0x20004a80
 80011a8:	40012000 	.word	0x40012000
 80011ac:	0f000001 	.word	0x0f000001

080011b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x3c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x3c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	2038      	movs	r0, #56	; 0x38
 80011d8:	f000 fff8 	bl	80021cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011dc:	2038      	movs	r0, #56	; 0x38
 80011de:	f001 f811 	bl	8002204 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_GPIO_Init+0x80>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_GPIO_Init+0x80>)
 8001210:	f043 0310 	orr.w	r3, r3, #16
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_GPIO_Init+0x80>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_GPIO_Init+0x80>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <MX_GPIO_Init+0x80>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_GPIO_Init+0x80>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <MX_GPIO_Init+0x84>)
 8001246:	f001 fcf7 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800124a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0x84>)
 8001264:	f001 fb4c 	bl	8002900 <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	ir_sensor_a_sum = adcResultsDMA[0] + adcResultsDMA[2] + adcResultsDMA[4] + adcResultsDMA[6] + adcResultsDMA[8];
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001292:	891b      	ldrh	r3, [r3, #8]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4413      	add	r3, r2
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 800129c:	899b      	ldrh	r3, [r3, #12]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4413      	add	r3, r2
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 80012b0:	801a      	strh	r2, [r3, #0]
	ir_sensor_b_sum = adcResultsDMA[1] + adcResultsDMA[3] + adcResultsDMA[5] + adcResultsDMA[7] + adcResultsDMA[9];
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012ba:	88db      	ldrh	r3, [r3, #6]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012c4:	895b      	ldrh	r3, [r3, #10]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012ce:	89db      	ldrh	r3, [r3, #14]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80012d8:	8a5b      	ldrh	r3, [r3, #18]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 80012e2:	801a      	strh	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20004b2c 	.word	0x20004b2c
 80012f4:	20004b28 	.word	0x20004b28
 80012f8:	20004a74 	.word	0x20004a74

080012fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	ir_sensor_a_sum = adcResultsDMA[10] + adcResultsDMA[12] + adcResultsDMA[14] + adcResultsDMA[16] + adcResultsDMA[18];
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001306:	8a9b      	ldrh	r3, [r3, #20]
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 800130c:	8b1b      	ldrh	r3, [r3, #24]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001316:	8b9b      	ldrh	r3, [r3, #28]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4413      	add	r3, r2
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001320:	8c1b      	ldrh	r3, [r3, #32]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 800132a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001334:	801a      	strh	r2, [r3, #0]
	ir_sensor_b_sum = adcResultsDMA[11] + adcResultsDMA[13] + adcResultsDMA[15] + adcResultsDMA[17] + adcResultsDMA[19];
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001338:	8adb      	ldrh	r3, [r3, #22]
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 800133e:	8b5b      	ldrh	r3, [r3, #26]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4413      	add	r3, r2
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001348:	8bdb      	ldrh	r3, [r3, #30]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 8001352:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_ADC_ConvCpltCallback+0x78>)
 800135c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800135e:	b29b      	uxth	r3, r3
 8001360:	4413      	add	r3, r2
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_ADC_ConvCpltCallback+0x80>)
 8001366:	801a      	strh	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20004b2c 	.word	0x20004b2c
 8001378:	20004b28 	.word	0x20004b28
 800137c:	20004a74 	.word	0x20004a74

08001380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f002 fccb 	bl	8003d24 <osDelay>
 800138e:	e7fb      	b.n	8001388 <StartDefaultTask+0x8>

08001390 <infrared_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_infrared_task */
void infrared_task(void *argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN infrared_task */
  /* Infinite loop */
  for(;;)
  {
	// Check last parameter is correct.
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 8001398:	2314      	movs	r3, #20
 800139a:	461a      	mov	r2, r3
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <infrared_task+0x20>)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <infrared_task+0x24>)
 80013a0:	f000 faa2 	bl	80018e8 <HAL_ADC_Start_DMA>
    osDelay(500);
 80013a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a8:	f002 fcbc 	bl	8003d24 <osDelay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResultsDMA, adcChannelCount);
 80013ac:	e7f4      	b.n	8001398 <infrared_task+0x8>
 80013ae:	bf00      	nop
 80013b0:	20004b2c 	.word	0x20004b2c
 80013b4:	20004a80 	.word	0x20004a80

080013b8 <oled_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_task */
void oled_task(void *argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_task */
  OLED_Init();
 80013c0:	f005 faf2 	bl	80069a8 <OLED_Init>
  int distances[2];
  char buf[40];
  /* Infinite loop */
  for(;;)
  {
	distances[0] = adc_to_distance((uint16_t)(ir_sensor_a_sum / 5));
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <oled_task+0x6c>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <oled_task+0x70>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fda3 	bl	8000f20 <adc_to_distance>
 80013da:	4603      	mov	r3, r0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
	distances[1] = adc_to_distance((uint16_t)(ir_sensor_b_sum / 5));
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <oled_task+0x74>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4a10      	ldr	r2, [pc, #64]	; (8001428 <oled_task+0x70>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fd96 	bl	8000f20 <adc_to_distance>
 80013f4:	4603      	mov	r3, r0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(buf, "%5d %5d\0", (int)distances[0], (int)distances[1]);
 80013f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	f107 0008 	add.w	r0, r7, #8
 8001400:	490b      	ldr	r1, [pc, #44]	; (8001430 <oled_task+0x78>)
 8001402:	f005 fc73 	bl	8006cec <siprintf>
	OLED_ShowString(0, 0, (uint8_t*)buf);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	461a      	mov	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f005 fa98 	bl	8006944 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001414:	f005 f922 	bl	800665c <OLED_Refresh_Gram>
    osDelay(500);
 8001418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800141c:	f002 fc82 	bl	8003d24 <osDelay>
	distances[0] = adc_to_distance((uint16_t)(ir_sensor_a_sum / 5));
 8001420:	e7d0      	b.n	80013c4 <oled_task+0xc>
 8001422:	bf00      	nop
 8001424:	20004b28 	.word	0x20004b28
 8001428:	cccccccd 	.word	0xcccccccd
 800142c:	20004a74 	.word	0x20004a74
 8001430:	08008400 	.word	0x08008400

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001446:	f000 f9c7 	bl	80017d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40001000 	.word	0x40001000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x54>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_MspInit+0x54>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_MspInit+0x54>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_MspInit+0x54>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f000 fe8f 	bl	80021cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2f      	ldr	r2, [pc, #188]	; (8001598 <HAL_ADC_MspInit+0xdc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d157      	bne.n	800158e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_ADC_MspInit+0xe0>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <HAL_ADC_MspInit+0xe0>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_ADC_MspInit+0xe0>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_ADC_MspInit+0xe0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_ADC_MspInit+0xe0>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_ADC_MspInit+0xe0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001516:	2303      	movs	r3, #3
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	481d      	ldr	r0, [pc, #116]	; (80015a0 <HAL_ADC_MspInit+0xe4>)
 800152a:	f001 f9e9 	bl	8002900 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_ADC_MspInit+0xec>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001554:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001564:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001574:	f000 fe54 	bl	8002220 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800157e:	f7ff ff6b 	bl	8001458 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 8001586:	639a      	str	r2, [r3, #56]	; 0x38
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_ADC_MspInit+0xe8>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012000 	.word	0x40012000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	20004ac8 	.word	0x20004ac8
 80015a8:	40026410 	.word	0x40026410

080015ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	2036      	movs	r0, #54	; 0x36
 80015c2:	f000 fe03 	bl	80021cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f000 fe1c 	bl	8002204 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_InitTick+0xa0>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_InitTick+0xa0>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_InitTick+0xa0>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e8:	f107 0210 	add.w	r2, r7, #16
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 ff96 	bl	8003524 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f8:	f001 ff80 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 80015fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_InitTick+0xa4>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	0c9b      	lsrs	r3, r3, #18
 8001608:	3b01      	subs	r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_InitTick+0xa8>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_InitTick+0xac>)
 8001610:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_InitTick+0xa8>)
 8001614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001618:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_InitTick+0xa8>)
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_InitTick+0xa8>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_InitTick+0xa8>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_InitTick+0xa8>)
 800162e:	f001 ffab 	bl	8003588 <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <HAL_InitTick+0xa8>)
 800163a:	f001 ffff 	bl	800363c <HAL_TIM_Base_Start_IT>
 800163e:	4603      	mov	r3, r0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	431bde83 	.word	0x431bde83
 8001654:	20004b88 	.word	0x20004b88
 8001658:	40001000 	.word	0x40001000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <TIM6_DAC_IRQHandler+0x10>)
 800168e:	f002 f845 	bl	800371c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20004b88 	.word	0x20004b88

0800169c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA2_Stream0_IRQHandler+0x10>)
 80016a2:	f000 fec3 	bl	800242c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20004ac8 	.word	0x20004ac8

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f005 f9ee 	bl	8006ac0 <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20020000 	.word	0x20020000
 8001710:	00000400 	.word	0x00000400
 8001714:	20000094 	.word	0x20000094
 8001718:	20005028 	.word	0x20005028

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopFillZerobss+0x26>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176a:	f7ff ffd7 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f005 f9ad 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff fc23 	bl	8000fbc <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001784:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 8001788:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800178c:	20005024 	.word	0x20005024

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fcfa 	bl	80021b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f7ff fef2 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe4c 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20004bd0 	.word	0x20004bd0

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20004bd0 	.word	0x20004bd0

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e033      	b.n	80018de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe1c 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d118      	bne.n	80018d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018a6:	f023 0302 	bic.w	r3, r3, #2
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fa54 	bl	8001d60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f023 0303 	bic.w	r3, r3, #3
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
 80018ce:	e001      	b.n	80018d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Start_DMA+0x1e>
 8001902:	2302      	movs	r3, #2
 8001904:	e0e9      	b.n	8001ada <HAL_ADC_Start_DMA+0x1f2>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d018      	beq.n	800194e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <HAL_ADC_Start_DMA+0x1fc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <HAL_ADC_Start_DMA+0x200>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	3b01      	subs	r3, #1
 8001946:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195c:	d107      	bne.n	800196e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800196c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	f040 80a1 	bne.w	8001ac0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019bc:	d106      	bne.n	80019cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f023 0206 	bic.w	r2, r3, #6
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44
 80019ca:	e002      	b.n	80019d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <HAL_ADC_Start_DMA+0x204>)
 80019dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <HAL_ADC_Start_DMA+0x208>)
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_ADC_Start_DMA+0x20c>)
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_ADC_Start_DMA+0x210>)
 80019f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	334c      	adds	r3, #76	; 0x4c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f000 fca4 	bl	800237c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d12a      	bne.n	8001a96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <HAL_ADC_Start_DMA+0x214>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d015      	beq.n	8001a76 <HAL_ADC_Start_DMA+0x18e>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2c      	ldr	r2, [pc, #176]	; (8001b00 <HAL_ADC_Start_DMA+0x218>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x178>
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <HAL_ADC_Start_DMA+0x204>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_ADC_Start_DMA+0x21c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d136      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_ADC_Start_DMA+0x204>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d130      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d129      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	e020      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_ADC_Start_DMA+0x214>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d114      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	e00b      	b.n	8001ad8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f043 0210 	orr.w	r2, r3, #16
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	40012300 	.word	0x40012300
 8001af0:	08001f59 	.word	0x08001f59
 8001af4:	08002013 	.word	0x08002013
 8001af8:	0800202f 	.word	0x0800202f
 8001afc:	40012000 	.word	0x40012000
 8001b00:	40012100 	.word	0x40012100
 8001b04:	40012200 	.word	0x40012200

08001b08 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x1c>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e105      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x228>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d925      	bls.n	8001b94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68d9      	ldr	r1, [r3, #12]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b1e      	subs	r3, #30
 8001b5e:	2207      	movs	r2, #7
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43da      	mvns	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68d9      	ldr	r1, [r3, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4403      	add	r3, r0
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	e022      	b.n	8001bda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6919      	ldr	r1, [r3, #16]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2207      	movs	r2, #7
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4403      	add	r3, r0
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d824      	bhi.n	8001c2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b05      	subs	r3, #5
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b05      	subs	r3, #5
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2a:	e04c      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d824      	bhi.n	8001c7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b23      	subs	r3, #35	; 0x23
 8001c46:	221f      	movs	r2, #31
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	400a      	ands	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b23      	subs	r3, #35	; 0x23
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7c:	e023      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b41      	subs	r3, #65	; 0x41
 8001c90:	221f      	movs	r2, #31
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b41      	subs	r3, #65	; 0x41
 8001cba:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_ADC_ConfigChannel+0x234>)
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <HAL_ADC_ConfigChannel+0x238>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1cc>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_ADC_ConfigChannel+0x238>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d123      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x21e>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d003      	beq.n	8001d02 <HAL_ADC_ConfigChannel+0x1e6>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b11      	cmp	r3, #17
 8001d00:	d11b      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d111      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_ADC_ConfigChannel+0x23c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_ADC_ConfigChannel+0x240>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	0c9a      	lsrs	r2, r3, #18
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40012300 	.word	0x40012300
 8001d54:	40012000 	.word	0x40012000
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	431bde83 	.word	0x431bde83

08001d60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d68:	4b79      	ldr	r3, [pc, #484]	; (8001f50 <ADC_Init+0x1f0>)
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	021a      	lsls	r2, r3, #8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001db8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <ADC_Init+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	e00f      	b.n	8001e5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0202 	bic.w	r2, r2, #2
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e1b      	ldrb	r3, [r3, #24]
 8001e78:	005a      	lsls	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	035a      	lsls	r2, r3, #13
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	e007      	b.n	8001ed4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	051a      	lsls	r2, r3, #20
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f16:	025a      	lsls	r2, r3, #9
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6899      	ldr	r1, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	029a      	lsls	r2, r3, #10
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40012300 	.word	0x40012300
 8001f54:	0f000001 	.word	0x0f000001

08001f58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d13c      	bne.n	8001fec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d12b      	bne.n	8001fe4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d127      	bne.n	8001fe4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d119      	bne.n	8001fe4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0220 	bic.w	r2, r2, #32
 8001fbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff f989 	bl	80012fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fea:	e00e      	b.n	800200a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fd85 	bl	8001b08 <HAL_ADC_ErrorCallback>
}
 8001ffe:	e004      	b.n	800200a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff f929 	bl	8001278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2240      	movs	r2, #64	; 0x40
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f043 0204 	orr.w	r2, r3, #4
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fd5a 	bl	8001b08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db0b      	blt.n	80020ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 021f 	and.w	r2, r3, #31
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <__NVIC_EnableIRQ+0x38>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2001      	movs	r0, #1
 80020e2:	fa00 f202 	lsl.w	r2, r0, r2
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	; (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff4c 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021de:	f7ff ff61 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 80021e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f7ff ffb1 	bl	8002150 <NVIC_EncodePriority>
 80021ee:	4602      	mov	r2, r0
 80021f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff80 	bl	80020fc <__NVIC_SetPriority>
}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff54 	bl	80020c0 <__NVIC_EnableIRQ>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff fae8 	bl	8001800 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e099      	b.n	8002370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e00f      	b.n	800227e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff facf 	bl	8001800 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d908      	bls.n	800227e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e078      	b.n	8002370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e8      	bne.n	800225e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_DMA_Init+0x158>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4313      	orrs	r3, r2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b04      	cmp	r3, #4
 8002310:	d117      	bne.n	8002342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fa6f 	bl	8002808 <DMA_CheckFifoParam>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800233e:	2301      	movs	r3, #1
 8002340:	e016      	b.n	8002370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa26 	bl	800279c <DMA_CalcBaseAndBitshift>
 8002350:	4603      	mov	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	223f      	movs	r2, #63	; 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	f010803f 	.word	0xf010803f

0800237c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Start_IT+0x26>
 800239e:	2302      	movs	r3, #2
 80023a0:	e040      	b.n	8002424 <HAL_DMA_Start_IT+0xa8>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d12f      	bne.n	8002416 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f9b8 	bl	8002740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0216 	orr.w	r2, r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e005      	b.n	8002422 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002438:	4b92      	ldr	r3, [pc, #584]	; (8002684 <HAL_DMA_IRQHandler+0x258>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a92      	ldr	r2, [pc, #584]	; (8002688 <HAL_DMA_IRQHandler+0x25c>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2208      	movs	r2, #8
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01a      	beq.n	8002498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0204 	bic.w	r2, r2, #4
 800247e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	2208      	movs	r2, #8
 8002486:	409a      	lsls	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2201      	movs	r2, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2201      	movs	r2, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2204      	movs	r2, #4
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2204      	movs	r2, #4
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0204 	orr.w	r2, r3, #4
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2210      	movs	r2, #16
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d043      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03c      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2210      	movs	r2, #16
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d024      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	4798      	blx	r3
 800255a:	e01f      	b.n	800259c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e016      	b.n	800259c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0208 	bic.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2220      	movs	r2, #32
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 808e 	beq.w	80026ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8086 	beq.w	80026ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2220      	movs	r2, #32
 80025c4:	409a      	lsls	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d136      	bne.n	8002644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0216 	bic.w	r2, r2, #22
 80025e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_DMA_IRQHandler+0x1da>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0208 	bic.w	r2, r2, #8
 8002614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	223f      	movs	r2, #63	; 0x3f
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	2b00      	cmp	r3, #0
 8002638:	d07d      	beq.n	8002736 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
        }
        return;
 8002642:	e078      	b.n	8002736 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01c      	beq.n	800268c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	2b00      	cmp	r3, #0
 8002666:	d030      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e02b      	b.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d027      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
 8002682:	e022      	b.n	80026ca <HAL_DMA_IRQHandler+0x29e>
 8002684:	20000000 	.word	0x20000000
 8002688:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0210 	bic.w	r2, r2, #16
 80026a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d032      	beq.n	8002738 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d022      	beq.n	8002724 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2205      	movs	r2, #5
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d307      	bcc.n	8002712 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f2      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x2ca>
 8002710:	e000      	b.n	8002714 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002712:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e000      	b.n	8002738 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002736:	bf00      	nop
    }
  }
}
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop

08002740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800275c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d108      	bne.n	8002780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800277e:	e007      	b.n	8002790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	60da      	str	r2, [r3, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b10      	subs	r3, #16
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <DMA_CalcBaseAndBitshift+0x64>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <DMA_CalcBaseAndBitshift+0x68>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d909      	bls.n	80027de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
 80027dc:	e007      	b.n	80027ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	aaaaaaab 	.word	0xaaaaaaab
 8002804:	080084a8 	.word	0x080084a8

08002808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0x5a>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d856      	bhi.n	80028d6 <DMA_CheckFifoParam+0xce>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028d7 	.word	0x080028d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d046      	beq.n	80028da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e043      	b.n	80028da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d140      	bne.n	80028de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e03d      	b.n	80028de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d121      	bne.n	80028b0 <DMA_CheckFifoParam+0xa8>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d837      	bhi.n	80028e2 <DMA_CheckFifoParam+0xda>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <DMA_CheckFifoParam+0x70>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800288f 	.word	0x0800288f
 8002880:	08002889 	.word	0x08002889
 8002884:	080028a1 	.word	0x080028a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e030      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d025      	beq.n	80028e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e022      	b.n	80028e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a8:	d11f      	bne.n	80028ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ae:	e01c      	b.n	80028ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d903      	bls.n	80028be <DMA_CheckFifoParam+0xb6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028bc:	e018      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e015      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e00b      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028d6:	bf00      	nop
 80028d8:	e00a      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e008      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e006      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e004      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
    }
  } 
  
  return status; 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e16b      	b.n	8002bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 815a 	bne.w	8002bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80b4 	beq.w	8002bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a5f      	ldr	r2, [pc, #380]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_GPIO_Init+0x30c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_GPIO_Init+0x310>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_GPIO_Init+0x314>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d02b      	beq.n	8002b26 <HAL_GPIO_Init+0x226>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x318>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d025      	beq.n	8002b22 <HAL_GPIO_Init+0x222>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_GPIO_Init+0x31c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d01f      	beq.n	8002b1e <HAL_GPIO_Init+0x21e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_GPIO_Init+0x320>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d019      	beq.n	8002b1a <HAL_GPIO_Init+0x21a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_GPIO_Init+0x324>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_GPIO_Init+0x216>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4d      	ldr	r2, [pc, #308]	; (8002c28 <HAL_GPIO_Init+0x328>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00d      	beq.n	8002b12 <HAL_GPIO_Init+0x212>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4c      	ldr	r2, [pc, #304]	; (8002c2c <HAL_GPIO_Init+0x32c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <HAL_GPIO_Init+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4b      	ldr	r2, [pc, #300]	; (8002c30 <HAL_GPIO_Init+0x330>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_GPIO_Init+0x20a>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x228>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x310>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae90 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_PWR_EnableBkUpAccess+0x20>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002c7e:	687b      	ldr	r3, [r7, #4]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	420e0020 	.word	0x420e0020
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002ca6:	687b      	ldr	r3, [r7, #4]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	420e0020 	.word	0x420e0020
 8002cb8:	40007000 	.word	0x40007000

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e264      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d075      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	4ba3      	ldr	r3, [pc, #652]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d00c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce6:	4ba0      	ldr	r3, [pc, #640]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf2:	4b9d      	ldr	r3, [pc, #628]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfe:	d10b      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	4b99      	ldr	r3, [pc, #612]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x108>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d157      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e23f      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x74>
 8002d22:	4b91      	ldr	r3, [pc, #580]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a90      	ldr	r2, [pc, #576]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x98>
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a8a      	ldr	r2, [pc, #552]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0xb0>
 8002d54:	4b84      	ldr	r3, [pc, #528]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a83      	ldr	r2, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fd44 	bl	8001800 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fd40 	bl	8001800 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e204      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0xc0>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fd30 	bl	8001800 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da4:	f7fe fd2c 	bl	8001800 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	; 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1f0      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	4b6c      	ldr	r3, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0xe8>
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d063      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d11c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d116      	bne.n	8002e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1c4      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4952      	ldr	r1, [pc, #328]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	e03a      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d020      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <HAL_RCC_OscConfig+0x2b0>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fe fce5 	bl	8001800 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fce1 	bl	8001800 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1a5      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4940      	ldr	r1, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x2b0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fcc4 	bl	8001800 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fcc0 	bl	8001800 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e184      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d030      	beq.n	8002f08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eae:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <HAL_RCC_OscConfig+0x2b4>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fca4 	bl	8001800 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fca0 	bl	8001800 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e164      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x200>
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x2b4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fc8d 	bl	8001800 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe fc89 	bl	8001800 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e14d      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a0 	beq.w	8003056 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d121      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <HAL_RCC_OscConfig+0x2b8>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fc4f 	bl	8001800 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e011      	b.n	8002f8a <HAL_RCC_OscConfig+0x2ce>
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	42470000 	.word	0x42470000
 8002f70:	42470e80 	.word	0x42470e80
 8002f74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f78:	f7fe fc42 	bl	8001800 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e106      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <HAL_RCC_OscConfig+0x4e4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x2f0>
 8002f9e:	4b81      	ldr	r3, [pc, #516]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a80      	ldr	r2, [pc, #512]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a7a      	ldr	r2, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x32a>
 8002fce:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a74      	ldr	r2, [pc, #464]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a71      	ldr	r2, [pc, #452]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe fc07 	bl	8001800 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fc03 	bl	8001800 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0c5      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ee      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x33a>
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe fbf1 	bl	8001800 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fbed 	bl	8001800 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0af      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b56      	ldr	r3, [pc, #344]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 809b 	beq.w	8003196 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d05c      	beq.n	8003126 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d141      	bne.n	80030f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fbc1 	bl	8001800 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fbbd 	bl	8001800 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e081      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	061b      	lsls	r3, r3, #24
 80030c4:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ca:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fb96 	bl	8001800 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe fb92 	bl	8001800 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e056      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x41c>
 80030f6:	e04e      	b.n	8003196 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_OscConfig+0x4ec>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fb7f 	bl	8001800 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe fb7b 	bl	8001800 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e03f      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x44a>
 8003124:	e037      	b.n	8003196 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e032      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d028      	beq.n	8003192 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d121      	bne.n	8003192 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d11a      	bne.n	8003192 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003162:	4013      	ands	r3, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003168:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d107      	bne.n	8003192 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40007000 	.word	0x40007000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	42470060 	.word	0x42470060

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0cc      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b68      	ldr	r3, [pc, #416]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d90c      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003266:	2b03      	cmp	r3, #3
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e06f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e067      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4934      	ldr	r1, [pc, #208]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fe fab0 	bl	8001800 <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fe faac 	bl	8001800 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04f      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d20c      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b22      	ldr	r3, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f92a 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023c00 	.word	0x40023c00
 8003368:	40023800 	.word	0x40023800
 800336c:	08008490 	.word	0x08008490
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800337e:	2100      	movs	r1, #0
 8003380:	6079      	str	r1, [r7, #4]
 8003382:	2100      	movs	r1, #0
 8003384:	60f9      	str	r1, [r7, #12]
 8003386:	2100      	movs	r1, #0
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800338a:	2100      	movs	r1, #0
 800338c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338e:	4952      	ldr	r1, [pc, #328]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003390:	6889      	ldr	r1, [r1, #8]
 8003392:	f001 010c 	and.w	r1, r1, #12
 8003396:	2908      	cmp	r1, #8
 8003398:	d00d      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800339a:	2908      	cmp	r1, #8
 800339c:	f200 8094 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
 80033a0:	2900      	cmp	r1, #0
 80033a2:	d002      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x32>
 80033a4:	2904      	cmp	r1, #4
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x38>
 80033a8:	e08e      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <HAL_RCC_GetSysClockFreq+0x164>)
 80033ac:	60bb      	str	r3, [r7, #8]
       break;
 80033ae:	e08e      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033b2:	60bb      	str	r3, [r7, #8]
      break;
 80033b4:	e08b      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b6:	4948      	ldr	r1, [pc, #288]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b8:	6849      	ldr	r1, [r1, #4]
 80033ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80033be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c0:	4945      	ldr	r1, [pc, #276]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c2:	6849      	ldr	r1, [r1, #4]
 80033c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d024      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033cc:	4942      	ldr	r1, [pc, #264]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ce:	6849      	ldr	r1, [r1, #4]
 80033d0:	0989      	lsrs	r1, r1, #6
 80033d2:	4608      	mov	r0, r1
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80033dc:	f04f 0500 	mov.w	r5, #0
 80033e0:	ea00 0204 	and.w	r2, r0, r4
 80033e4:	ea01 0305 	and.w	r3, r1, r5
 80033e8:	493d      	ldr	r1, [pc, #244]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ea:	fb01 f003 	mul.w	r0, r1, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	fb01 f102 	mul.w	r1, r1, r2
 80033f4:	1844      	adds	r4, r0, r1
 80033f6:	493a      	ldr	r1, [pc, #232]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80033f8:	fba2 0101 	umull	r0, r1, r2, r1
 80033fc:	1863      	adds	r3, r4, r1
 80033fe:	4619      	mov	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fd fc0e 	bl	8000c28 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e04a      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	461a      	mov	r2, r3
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	ea02 0400 	and.w	r4, r2, r0
 800342e:	ea03 0501 	and.w	r5, r3, r1
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003444:	0142      	lsls	r2, r0, #5
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	1b00      	subs	r0, r0, r4
 800344c:	eb61 0105 	sbc.w	r1, r1, r5
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800345e:	0182      	lsls	r2, r0, #6
 8003460:	1a12      	subs	r2, r2, r0
 8003462:	eb63 0301 	sbc.w	r3, r3, r1
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	1912      	adds	r2, r2, r4
 800347c:	eb45 0303 	adc.w	r3, r5, r3
 8003480:	f04f 0000 	mov.w	r0, #0
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	0299      	lsls	r1, r3, #10
 800348a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800348e:	0290      	lsls	r0, r2, #10
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	461a      	mov	r2, r3
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	f7fd fbc2 	bl	8000c28 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	3301      	adds	r3, #1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c4:	60bb      	str	r3, [r7, #8]
      break;
 80034c6:	e002      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_GetSysClockFreq+0x164>)
 80034ca:	60bb      	str	r3, [r7, #8]
      break;
 80034cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ce:	68bb      	ldr	r3, [r7, #8]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bdb0      	pop	{r4, r5, r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	017d7840 	.word	0x017d7840

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	080084a0 	.word	0x080084a0

08003524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	220f      	movs	r2, #15
 8003532:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCC_GetClockConfig+0x60>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40023c00 	.word	0x40023c00

08003588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e041      	b.n	800361e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f839 	bl	8003626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f000 f9d8 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d001      	beq.n	8003654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e04e      	b.n	80036f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <HAL_TIM_Base_Start_IT+0xc4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d01d      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_TIM_Base_Start_IT+0xc8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_TIM_Base_Start_IT+0xcc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIM_Base_Start_IT+0xd0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_Base_Start_IT+0x80>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_TIM_Base_Start_IT+0xdc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d111      	bne.n	80036e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d010      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	e007      	b.n	80036f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40010400 	.word	0x40010400
 8003714:	40014000 	.word	0x40014000
 8003718:	40001800 	.word	0x40001800

0800371c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8ee 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8e0 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8f1 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0204 	mvn.w	r2, #4
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8c4 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8b6 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8c7 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f89a 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f88c 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f89d 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f870 	bl	8003940 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f862 	bl	800392c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f873 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fdca 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f902 	bl	8003ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d10e      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d107      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f838 	bl	8003968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b20      	cmp	r3, #32
 8003904:	d10e      	bne.n	8003924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b20      	cmp	r3, #32
 8003912:	d107      	bne.n	8003924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0220 	mvn.w	r2, #32
 800391c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8cc 	bl	8003abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a40      	ldr	r2, [pc, #256]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d00f      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <TIM_Base_SetConfig+0x118>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <TIM_Base_SetConfig+0x11c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <TIM_Base_SetConfig+0x120>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3a      	ldr	r2, [pc, #232]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d027      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <TIM_Base_SetConfig+0x118>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d023      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <TIM_Base_SetConfig+0x11c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <TIM_Base_SetConfig+0x120>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d017      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <TIM_Base_SetConfig+0x128>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <TIM_Base_SetConfig+0x12c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00f      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <TIM_Base_SetConfig+0x130>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <TIM_Base_SetConfig+0x134>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <TIM_Base_SetConfig+0x138>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <TIM_Base_SetConfig+0x13c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <TIM_Base_SetConfig+0x114>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0xf8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <TIM_Base_SetConfig+0x124>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]
}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40010400 	.word	0x40010400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800
 8003ab0:	40001800 	.word	0x40001800
 8003ab4:	40001c00 	.word	0x40001c00
 8003ab8:	40002000 	.word	0x40002000

08003abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <__NVIC_SetPriority>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <SysTick_Handler+0x1c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b40:	f001 fd28 	bl	8005594 <xTaskGetSchedulerState>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b4a:	f002 fb0d 	bl	8006168 <xPortSysTickHandler>
  }
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	e000e010 	.word	0xe000e010

08003b58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f06f 0004 	mvn.w	r0, #4
 8003b62:	f7ff ffbf 	bl	8003ae4 <__NVIC_SetPriority>
#endif
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b72:	f3ef 8305 	mrs	r3, IPSR
 8003b76:	603b      	str	r3, [r7, #0]
  return(result);
 8003b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b7e:	f06f 0305 	mvn.w	r3, #5
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e00c      	b.n	8003ba0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <osKernelInitialize+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <osKernelInitialize+0x44>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	e002      	b.n	8003ba0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ba0:	687b      	ldr	r3, [r7, #4]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000098 	.word	0x20000098

08003bb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bba:	f3ef 8305 	mrs	r3, IPSR
 8003bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8003bc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bc6:	f06f 0305 	mvn.w	r3, #5
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	e010      	b.n	8003bf0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <osKernelStart+0x48>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d109      	bne.n	8003bea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bd6:	f7ff ffbf 	bl	8003b58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <osKernelStart+0x48>)
 8003bdc:	2202      	movs	r2, #2
 8003bde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003be0:	f001 f87c 	bl	8004cdc <vTaskStartScheduler>
      stat = osOK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e002      	b.n	8003bf0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000098 	.word	0x20000098

08003c00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af04      	add	r7, sp, #16
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c10:	f3ef 8305 	mrs	r3, IPSR
 8003c14:	617b      	str	r3, [r7, #20]
  return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d17e      	bne.n	8003d1a <osThreadNew+0x11a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d07b      	beq.n	8003d1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c26:	2318      	movs	r3, #24
 8003c28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d045      	beq.n	8003cc6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <osThreadNew+0x48>
        name = attr->name;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <osThreadNew+0x6e>
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b38      	cmp	r3, #56	; 0x38
 8003c60:	d805      	bhi.n	8003c6e <osThreadNew+0x6e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <osThreadNew+0x72>
        return (NULL);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e054      	b.n	8003d1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00e      	beq.n	8003ca8 <osThreadNew+0xa8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2bbb      	cmp	r3, #187	; 0xbb
 8003c90:	d90a      	bls.n	8003ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <osThreadNew+0xa8>
        mem = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e010      	b.n	8003cca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10c      	bne.n	8003cca <osThreadNew+0xca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d108      	bne.n	8003cca <osThreadNew+0xca>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <osThreadNew+0xca>
          mem = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e001      	b.n	8003cca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d110      	bne.n	8003cf2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd8:	9202      	str	r2, [sp, #8]
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6a3a      	ldr	r2, [r7, #32]
 8003ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fe0c 	bl	8004904 <xTaskCreateStatic>
 8003cec:	4603      	mov	r3, r0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e013      	b.n	8003d1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 fe57 	bl	80049be <xTaskCreate>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <osThreadNew+0x11a>
            hTask = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d1a:	693b      	ldr	r3, [r7, #16]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3728      	adds	r7, #40	; 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d2c:	f3ef 8305 	mrs	r3, IPSR
 8003d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <osDelay+0x1c>
    stat = osErrorISR;
 8003d38:	f06f 0305 	mvn.w	r3, #5
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e007      	b.n	8003d50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 ff92 	bl	8004c74 <vTaskDelay>
    }
  }

  return (stat);
 8003d50:	68fb      	ldr	r3, [r7, #12]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <vApplicationGetIdleTaskMemory+0x30>)
 8003d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	2000009c 	.word	0x2000009c
 8003d8c:	20000158 	.word	0x20000158

08003d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8003da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8003da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000358 	.word	0x20000358
 8003dc0:	20000414 	.word	0x20000414

08003dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f103 0208 	add.w	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f103 0208 	add.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f103 0208 	add.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d103      	bne.n	8003e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e00c      	b.n	8003ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	e002      	b.n	8003e94 <vListInsert+0x2e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d2f6      	bcs.n	8003e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	601a      	str	r2, [r3, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f56:	f002 f875 	bl	8006044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	3b01      	subs	r3, #1
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01a      	beq.n	8003fea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3310      	adds	r3, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f929 	bl	8005210 <xTaskRemoveFromEventList>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <xQueueGenericReset+0xcc>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	e009      	b.n	8003fea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3310      	adds	r3, #16
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fef2 	bl	8003dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3324      	adds	r3, #36	; 0x24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff feed 	bl	8003dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f002 f85b 	bl	80060a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fee:	2301      	movs	r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <xQueueGenericCreateStatic+0x52>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <xQueueGenericCreateStatic+0x56>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericCreateStatic+0x58>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	623b      	str	r3, [r7, #32]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <xQueueGenericCreateStatic+0x7e>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <xQueueGenericCreateStatic+0x82>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xQueueGenericCreateStatic+0x84>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	61fb      	str	r3, [r7, #28]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800409a:	2350      	movs	r3, #80	; 0x50
 800409c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d00a      	beq.n	80040ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61bb      	str	r3, [r7, #24]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80040ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f805 	bl	80040ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3730      	adds	r7, #48	; 0x30
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e002      	b.n	800410e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800411a:	2101      	movs	r1, #1
 800411c:	69b8      	ldr	r0, [r7, #24]
 800411e:	f7ff ff05 	bl	8003f2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08e      	sub	sp, #56	; 0x38
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004142:	2300      	movs	r3, #0
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGenericSend+0x32>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <xQueueGenericSend+0x40>
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <xQueueGenericSend+0x44>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <xQueueGenericSend+0x46>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <xQueueGenericSend+0x60>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004190:	bf00      	nop
 8004192:	e7fe      	b.n	8004192 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x6e>
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <xQueueGenericSend+0x72>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <xQueueGenericSend+0x74>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	623b      	str	r3, [r7, #32]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041c2:	f001 f9e7 	bl	8005594 <xTaskGetSchedulerState>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <xQueueGenericSend+0x9e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSend+0xa2>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <xQueueGenericSend+0xa4>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	61fb      	str	r3, [r7, #28]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041f2:	f001 ff27 	bl	8006044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <xQueueGenericSend+0xd4>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d129      	bne.n	800425c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fa0b 	bl	8004628 <prvCopyDataToQueue>
 8004212:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fff5 	bl	8005210 <xTaskRemoveFromEventList>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800422c:	4b3f      	ldr	r3, [pc, #252]	; (800432c <xQueueGenericSend+0x1f8>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	e00a      	b.n	8004254 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <xQueueGenericSend+0x1f8>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004254:	f001 ff26 	bl	80060a4 <vPortExitCritical>
				return pdPASS;
 8004258:	2301      	movs	r3, #1
 800425a:	e063      	b.n	8004324 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004262:	f001 ff1f 	bl	80060a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004266:	2300      	movs	r3, #0
 8004268:	e05c      	b.n	8004324 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f82f 	bl	80052d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800427a:	2301      	movs	r3, #1
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427e:	f001 ff11 	bl	80060a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004282:	f000 fd9b 	bl	8004dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004286:	f001 fedd 	bl	8006044 <vPortEnterCritical>
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004290:	b25b      	sxtb	r3, r3
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d103      	bne.n	80042a0 <xQueueGenericSend+0x16c>
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSend+0x182>
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b6:	f001 fef5 	bl	80060a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ba:	1d3a      	adds	r2, r7, #4
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f81e 	bl	8005304 <xTaskCheckForTimeOut>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d124      	bne.n	8004318 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d0:	f000 faa2 	bl	8004818 <prvIsQueueFull>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	3310      	adds	r3, #16
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 ff44 	bl	8005170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ea:	f000 fa2d 	bl	8004748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ee:	f000 fd73 	bl	8004dd8 <xTaskResumeAll>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f af7c 	bne.w	80041f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xQueueGenericSend+0x1f8>)
 80042fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	e772      	b.n	80041f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800430e:	f000 fa1b 	bl	8004748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004312:	f000 fd61 	bl	8004dd8 <xTaskResumeAll>
 8004316:	e76c      	b.n	80041f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431a:	f000 fa15 	bl	8004748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431e:	f000 fd5b 	bl	8004dd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004322:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004324:	4618      	mov	r0, r3
 8004326:	3738      	adds	r7, #56	; 0x38
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b090      	sub	sp, #64	; 0x40
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <xQueueGenericSendFromISR+0x3c>
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <xQueueGenericSendFromISR+0x40>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <xQueueGenericSendFromISR+0x42>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d103      	bne.n	800439a <xQueueGenericSendFromISR+0x6a>
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <xQueueGenericSendFromISR+0x6e>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericSendFromISR+0x70>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	623b      	str	r3, [r7, #32]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043ba:	f001 ff25 	bl	8006208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043be:	f3ef 8211 	mrs	r2, BASEPRI
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	61fa      	str	r2, [r7, #28]
 80043d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <xQueueGenericSendFromISR+0xbc>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d12f      	bne.n	800444c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004402:	f000 f911 	bl	8004628 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004406:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d112      	bne.n	8004436 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d016      	beq.n	8004446 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	3324      	adds	r3, #36	; 0x24
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fef7 	bl	8005210 <xTaskRemoveFromEventList>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00e      	beq.n	8004446 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00b      	beq.n	8004446 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e007      	b.n	8004446 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800443a:	3301      	adds	r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	b25a      	sxtb	r2, r3
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004446:	2301      	movs	r3, #1
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800444a:	e001      	b.n	8004450 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800444c:	2300      	movs	r3, #0
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004452:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800445a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800445c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800445e:	4618      	mov	r0, r3
 8004460:	3740      	adds	r7, #64	; 0x40
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <xQueueReceive+0x30>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	623b      	str	r3, [r7, #32]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <xQueueReceive+0x3e>
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <xQueueReceive+0x42>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <xQueueReceive+0x44>
 80044aa:	2300      	movs	r3, #0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xQueueReceive+0x5e>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	61fb      	str	r3, [r7, #28]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c6:	f001 f865 	bl	8005594 <xTaskGetSchedulerState>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <xQueueReceive+0x6e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <xQueueReceive+0x72>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueReceive+0x74>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <xQueueReceive+0x8e>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044f6:	f001 fda5 	bl	8006044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01f      	beq.n	8004546 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450a:	f000 f8f7 	bl	80046fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	1e5a      	subs	r2, r3, #1
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00f      	beq.n	800453e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	3310      	adds	r3, #16
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fe74 	bl	8005210 <xTaskRemoveFromEventList>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <xQueueReceive+0x1bc>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800453e:	f001 fdb1 	bl	80060a4 <vPortExitCritical>
				return pdPASS;
 8004542:	2301      	movs	r3, #1
 8004544:	e069      	b.n	800461a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800454c:	f001 fdaa 	bl	80060a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004550:	2300      	movs	r3, #0
 8004552:	e062      	b.n	800461a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800455a:	f107 0310 	add.w	r3, r7, #16
 800455e:	4618      	mov	r0, r3
 8004560:	f000 feba 	bl	80052d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004568:	f001 fd9c 	bl	80060a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800456c:	f000 fc26 	bl	8004dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004570:	f001 fd68 	bl	8006044 <vPortEnterCritical>
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d103      	bne.n	800458a <xQueueReceive+0x122>
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d103      	bne.n	80045a0 <xQueueReceive+0x138>
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a0:	f001 fd80 	bl	80060a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045a4:	1d3a      	adds	r2, r7, #4
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fea9 	bl	8005304 <xTaskCheckForTimeOut>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d123      	bne.n	8004600 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ba:	f000 f917 	bl	80047ec <prvIsQueueEmpty>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d017      	beq.n	80045f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	3324      	adds	r3, #36	; 0x24
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fdcf 	bl	8005170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d4:	f000 f8b8 	bl	8004748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045d8:	f000 fbfe 	bl	8004dd8 <xTaskResumeAll>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d189      	bne.n	80044f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <xQueueReceive+0x1bc>)
 80045e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	e780      	b.n	80044f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f6:	f000 f8a7 	bl	8004748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045fa:	f000 fbed 	bl	8004dd8 <xTaskResumeAll>
 80045fe:	e77a      	b.n	80044f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004602:	f000 f8a1 	bl	8004748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004606:	f000 fbe7 	bl	8004dd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460c:	f000 f8ee 	bl	80047ec <prvIsQueueEmpty>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f43f af6f 	beq.w	80044f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800461a:	4618      	mov	r0, r3
 800461c:	3730      	adds	r7, #48	; 0x30
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14d      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ffbc 	bl	80055d0 <xTaskPriorityDisinherit>
 8004658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	e043      	b.n	80046ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d119      	bne.n	800469c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6858      	ldr	r0, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	461a      	mov	r2, r3
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	f002 fa50 	bl	8006b18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d32b      	bcc.n	80046ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	e026      	b.n	80046ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68d8      	ldr	r0, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	461a      	mov	r2, r3
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	f002 fa36 	bl	8006b18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	425b      	negs	r3, r3
 80046b6:	441a      	add	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d207      	bcs.n	80046d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	425b      	negs	r3, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d105      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d303      	bcc.n	8004730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	461a      	mov	r2, r3
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	f002 f9ec 	bl	8006b18 <memcpy>
	}
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004750:	f001 fc78 	bl	8006044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800475c:	e011      	b.n	8004782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fd50 	bl	8005210 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004776:	f000 fe27 	bl	80053c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3b01      	subs	r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	dce9      	bgt.n	800475e <prvUnlockQueue+0x16>
 800478a:	e000      	b.n	800478e <prvUnlockQueue+0x46>
					break;
 800478c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004796:	f001 fc85 	bl	80060a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800479a:	f001 fc53 	bl	8006044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a6:	e011      	b.n	80047cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3310      	adds	r3, #16
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd2b 	bl	8005210 <xTaskRemoveFromEventList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047c0:	f000 fe02 	bl	80053c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dce9      	bgt.n	80047a8 <prvUnlockQueue+0x60>
 80047d4:	e000      	b.n	80047d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047e0:	f001 fc60 	bl	80060a4 <vPortExitCritical>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047f4:	f001 fc26 	bl	8006044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e001      	b.n	800480a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800480a:	f001 fc4b 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004820:	f001 fc10 	bl	8006044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	429a      	cmp	r2, r3
 800482e:	d102      	bne.n	8004836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800483a:	f001 fc33 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e014      	b.n	8004882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004858:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <vQueueAddToRegistry+0x50>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004864:	490c      	ldr	r1, [pc, #48]	; (8004898 <vQueueAddToRegistry+0x50>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <vQueueAddToRegistry+0x50>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800487a:	e006      	b.n	800488a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b07      	cmp	r3, #7
 8004886:	d9e7      	bls.n	8004858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20004bd4 	.word	0x20004bd4

0800489c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048ac:	f001 fbca 	bl	8006044 <vPortEnterCritical>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d103      	bne.n	80048c6 <vQueueWaitForMessageRestricted+0x2a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048cc:	b25b      	sxtb	r3, r3
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d103      	bne.n	80048dc <vQueueWaitForMessageRestricted+0x40>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048dc:	f001 fbe2 	bl	80060a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fc61 	bl	80051b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ff26 	bl	8004748 <prvUnlockQueue>
	}
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af04      	add	r7, sp, #16
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xTaskCreateStatic+0x46>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	61fb      	str	r3, [r7, #28]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800494a:	23bc      	movs	r3, #188	; 0xbc
 800494c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2bbc      	cmp	r3, #188	; 0xbc
 8004952:	d00a      	beq.n	800496a <xTaskCreateStatic+0x66>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	61bb      	str	r3, [r7, #24]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800496a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01e      	beq.n	80049b0 <xTaskCreateStatic+0xac>
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01b      	beq.n	80049b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004980:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2202      	movs	r2, #2
 8004986:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800498a:	2300      	movs	r3, #0
 800498c:	9303      	str	r3, [sp, #12]
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9302      	str	r3, [sp, #8]
 8004992:	f107 0314 	add.w	r3, r7, #20
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f850 	bl	8004a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049aa:	f000 f8f3 	bl	8004b94 <prvAddNewTaskToReadyList>
 80049ae:	e001      	b.n	80049b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049b4:	697b      	ldr	r3, [r7, #20]
	}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b08c      	sub	sp, #48	; 0x30
 80049c2:	af04      	add	r7, sp, #16
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fc58 	bl	8006288 <pvPortMalloc>
 80049d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00e      	beq.n	80049fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049e0:	20bc      	movs	r0, #188	; 0xbc
 80049e2:	f001 fc51 	bl	8006288 <pvPortMalloc>
 80049e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
 80049f4:	e005      	b.n	8004a02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f001 fd12 	bl	8006420 <vPortFree>
 80049fc:	e001      	b.n	8004a02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	2300      	movs	r3, #0
 8004a14:	9303      	str	r3, [sp, #12]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	9302      	str	r3, [sp, #8]
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f80e 	bl	8004a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a2c:	69f8      	ldr	r0, [r7, #28]
 8004a2e:	f000 f8b1 	bl	8004b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e002      	b.n	8004a3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	21a5      	movs	r1, #165	; 0xa5
 8004a62:	f002 f867 	bl	8006b34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a70:	3b01      	subs	r3, #1
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	617b      	str	r3, [r7, #20]
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01f      	beq.n	8004ae6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e012      	b.n	8004ad2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	7819      	ldrb	r1, [r3, #0]
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3334      	adds	r3, #52	; 0x34
 8004abc:	460a      	mov	r2, r1
 8004abe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b0f      	cmp	r3, #15
 8004ad6:	d9e9      	bls.n	8004aac <prvInitialiseNewTask+0x64>
 8004ad8:	e000      	b.n	8004adc <prvInitialiseNewTask+0x94>
			{
				break;
 8004ada:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae4:	e003      	b.n	8004aee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2b37      	cmp	r3, #55	; 0x37
 8004af2:	d901      	bls.n	8004af8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004af4:	2337      	movs	r3, #55	; 0x37
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2200      	movs	r2, #0
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f978 	bl	8003e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	3318      	adds	r3, #24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff f973 	bl	8003e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	3354      	adds	r3, #84	; 0x54
 8004b48:	2260      	movs	r2, #96	; 0x60
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 fff1 	bl	8006b34 <memset>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <prvInitialiseNewTask+0x140>)
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <prvInitialiseNewTask+0x144>)
 8004b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	4a0b      	ldr	r2, [pc, #44]	; (8004b90 <prvInitialiseNewTask+0x148>)
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	69b8      	ldr	r0, [r7, #24]
 8004b6a:	f001 f941 	bl	8005df0 <pxPortInitialiseStack>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b80:	bf00      	nop
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	08008f34 	.word	0x08008f34
 8004b8c:	08008f54 	.word	0x08008f54
 8004b90:	08008f14 	.word	0x08008f14

08004b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b9c:	f001 fa52 	bl	8006044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <prvAddNewTaskToReadyList+0xc4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <prvAddNewTaskToReadyList+0xc4>)
 8004ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004baa:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004bb2:	4a2a      	ldr	r2, [pc, #168]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bb8:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <prvAddNewTaskToReadyList+0xc4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d110      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bc0:	f000 fc26 	bl	8005410 <prvInitialiseTaskLists>
 8004bc4:	e00d      	b.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <prvAddNewTaskToReadyList+0xcc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d802      	bhi.n	8004be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004be2:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <prvAddNewTaskToReadyList+0xd0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <prvAddNewTaskToReadyList+0xd0>)
 8004bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <prvAddNewTaskToReadyList+0xd0>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <prvAddNewTaskToReadyList+0xd4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d903      	bls.n	8004c08 <prvAddNewTaskToReadyList+0x74>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <prvAddNewTaskToReadyList+0xd4>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <prvAddNewTaskToReadyList+0xd8>)
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7ff f8fd 	bl	8003e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c24:	f001 fa3e 	bl	80060a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <prvAddNewTaskToReadyList+0xcc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <prvAddNewTaskToReadyList+0xc8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d207      	bcs.n	8004c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <prvAddNewTaskToReadyList+0xdc>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000ce8 	.word	0x20000ce8
 8004c5c:	20000814 	.word	0x20000814
 8004c60:	20000cf4 	.word	0x20000cf4
 8004c64:	20000d04 	.word	0x20000d04
 8004c68:	20000cf0 	.word	0x20000cf0
 8004c6c:	20000818 	.word	0x20000818
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d017      	beq.n	8004cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <vTaskDelay+0x60>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <vTaskDelay+0x30>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60bb      	str	r3, [r7, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ca4:	f000 f88a 	bl	8004dbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ca8:	2100      	movs	r1, #0
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fcfe 	bl	80056ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cb0:	f000 f892 	bl	8004dd8 <xTaskResumeAll>
 8004cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <vTaskDelay+0x64>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20000d10 	.word	0x20000d10
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cea:	463a      	mov	r2, r7
 8004cec:	1d39      	adds	r1, r7, #4
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff f832 	bl	8003d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	9202      	str	r2, [sp, #8]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	460a      	mov	r2, r1
 8004d0a:	4924      	ldr	r1, [pc, #144]	; (8004d9c <vTaskStartScheduler+0xc0>)
 8004d0c:	4824      	ldr	r0, [pc, #144]	; (8004da0 <vTaskStartScheduler+0xc4>)
 8004d0e:	f7ff fdf9 	bl	8004904 <xTaskCreateStatic>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <vTaskStartScheduler+0xc8>)
 8004d16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d18:	4b22      	ldr	r3, [pc, #136]	; (8004da4 <vTaskStartScheduler+0xc8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d20:	2301      	movs	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e001      	b.n	8004d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d30:	f000 fd10 	bl	8005754 <xTimerCreateTimerTask>
 8004d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d11b      	bne.n	8004d74 <vTaskStartScheduler+0x98>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	613b      	str	r3, [r7, #16]
}
 8004d4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d50:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <vTaskStartScheduler+0xcc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3354      	adds	r3, #84	; 0x54
 8004d56:	4a15      	ldr	r2, [pc, #84]	; (8004dac <vTaskStartScheduler+0xd0>)
 8004d58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <vTaskStartScheduler+0xd4>)
 8004d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <vTaskStartScheduler+0xd8>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <vTaskStartScheduler+0xdc>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d6e:	f001 f8c7 	bl	8005f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d72:	e00e      	b.n	8004d92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d10a      	bne.n	8004d92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60fb      	str	r3, [r7, #12]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <vTaskStartScheduler+0xb4>
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	0800840c 	.word	0x0800840c
 8004da0:	080053e1 	.word	0x080053e1
 8004da4:	20000d0c 	.word	0x20000d0c
 8004da8:	20000814 	.word	0x20000814
 8004dac:	20000010 	.word	0x20000010
 8004db0:	20000d08 	.word	0x20000d08
 8004db4:	20000cf4 	.word	0x20000cf4
 8004db8:	20000cec 	.word	0x20000cec

08004dbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <vTaskSuspendAll+0x18>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	4a03      	ldr	r2, [pc, #12]	; (8004dd4 <vTaskSuspendAll+0x18>)
 8004dc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	20000d10 	.word	0x20000d10

08004dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004de6:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <xTaskResumeAll+0x118>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <xTaskResumeAll+0x2c>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	603b      	str	r3, [r7, #0]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e04:	f001 f91e 	bl	8006044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e08:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <xTaskResumeAll+0x118>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4a38      	ldr	r2, [pc, #224]	; (8004ef0 <xTaskResumeAll+0x118>)
 8004e10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e12:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <xTaskResumeAll+0x118>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d162      	bne.n	8004ee0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <xTaskResumeAll+0x11c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d05e      	beq.n	8004ee0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e22:	e02f      	b.n	8004e84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e24:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <xTaskResumeAll+0x120>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3318      	adds	r3, #24
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff f851 	bl	8003ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff f84c 	bl	8003ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <xTaskResumeAll+0x124>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d903      	bls.n	8004e54 <xTaskResumeAll+0x7c>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <xTaskResumeAll+0x124>)
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <xTaskResumeAll+0x128>)
 8004e62:	441a      	add	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3304      	adds	r3, #4
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7fe ffd7 	bl	8003e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <xTaskResumeAll+0x12c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e7e:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <xTaskResumeAll+0x130>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e84:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <xTaskResumeAll+0x120>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1cb      	bne.n	8004e24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e92:	f000 fb5f 	bl	8005554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <xTaskResumeAll+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ea2:	f000 f847 	bl	8004f34 <xTaskIncrementTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <xTaskResumeAll+0x130>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f1      	bne.n	8004ea2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <xTaskResumeAll+0x134>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <xTaskResumeAll+0x130>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <xTaskResumeAll+0x138>)
 8004ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ee0:	f001 f8e0 	bl	80060a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000d10 	.word	0x20000d10
 8004ef4:	20000ce8 	.word	0x20000ce8
 8004ef8:	20000ca8 	.word	0x20000ca8
 8004efc:	20000cf0 	.word	0x20000cf0
 8004f00:	20000818 	.word	0x20000818
 8004f04:	20000814 	.word	0x20000814
 8004f08:	20000cfc 	.word	0x20000cfc
 8004f0c:	20000cf8 	.word	0x20000cf8
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f1a:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <xTaskGetTickCount+0x1c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f20:	687b      	ldr	r3, [r7, #4]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	20000cec 	.word	0x20000cec

08004f34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3e:	4b4f      	ldr	r3, [pc, #316]	; (800507c <xTaskIncrementTick+0x148>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 808f 	bne.w	8005066 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f48:	4b4d      	ldr	r3, [pc, #308]	; (8005080 <xTaskIncrementTick+0x14c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f50:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <xTaskIncrementTick+0x14c>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d120      	bne.n	8004f9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f5c:	4b49      	ldr	r3, [pc, #292]	; (8005084 <xTaskIncrementTick+0x150>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <xTaskIncrementTick+0x48>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	603b      	str	r3, [r7, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskIncrementTick+0x46>
 8004f7c:	4b41      	ldr	r3, [pc, #260]	; (8005084 <xTaskIncrementTick+0x150>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <xTaskIncrementTick+0x154>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <xTaskIncrementTick+0x150>)
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4a3f      	ldr	r2, [pc, #252]	; (8005088 <xTaskIncrementTick+0x154>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <xTaskIncrementTick+0x158>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <xTaskIncrementTick+0x158>)
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	f000 fadb 	bl	8005554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f9e:	4b3c      	ldr	r3, [pc, #240]	; (8005090 <xTaskIncrementTick+0x15c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d349      	bcc.n	800503c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <xTaskIncrementTick+0x150>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb2:	4b37      	ldr	r3, [pc, #220]	; (8005090 <xTaskIncrementTick+0x15c>)
 8004fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb8:	601a      	str	r2, [r3, #0]
					break;
 8004fba:	e03f      	b.n	800503c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fbc:	4b31      	ldr	r3, [pc, #196]	; (8005084 <xTaskIncrementTick+0x150>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d203      	bcs.n	8004fdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <xTaskIncrementTick+0x15c>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fda:	e02f      	b.n	800503c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe ff79 	bl	8003ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d004      	beq.n	8004ff8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe ff70 	bl	8003ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <xTaskIncrementTick+0x160>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d903      	bls.n	800500c <xTaskIncrementTick+0xd8>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	4a22      	ldr	r2, [pc, #136]	; (8005094 <xTaskIncrementTick+0x160>)
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <xTaskIncrementTick+0x164>)
 800501a:	441a      	add	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7fe fefb 	bl	8003e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <xTaskIncrementTick+0x168>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d3b8      	bcc.n	8004fa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800503a:	e7b5      	b.n	8004fa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <xTaskIncrementTick+0x168>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	4915      	ldr	r1, [pc, #84]	; (8005098 <xTaskIncrementTick+0x164>)
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d901      	bls.n	8005058 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <xTaskIncrementTick+0x16c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e004      	b.n	8005070 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005066:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <xTaskIncrementTick+0x170>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <xTaskIncrementTick+0x170>)
 800506e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005070:	697b      	ldr	r3, [r7, #20]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000d10 	.word	0x20000d10
 8005080:	20000cec 	.word	0x20000cec
 8005084:	20000ca0 	.word	0x20000ca0
 8005088:	20000ca4 	.word	0x20000ca4
 800508c:	20000d00 	.word	0x20000d00
 8005090:	20000d08 	.word	0x20000d08
 8005094:	20000cf0 	.word	0x20000cf0
 8005098:	20000818 	.word	0x20000818
 800509c:	20000814 	.word	0x20000814
 80050a0:	20000cfc 	.word	0x20000cfc
 80050a4:	20000cf8 	.word	0x20000cf8

080050a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050ae:	4b2a      	ldr	r3, [pc, #168]	; (8005158 <vTaskSwitchContext+0xb0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050b6:	4b29      	ldr	r3, [pc, #164]	; (800515c <vTaskSwitchContext+0xb4>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050bc:	e046      	b.n	800514c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <vTaskSwitchContext+0xb4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c4:	4b26      	ldr	r3, [pc, #152]	; (8005160 <vTaskSwitchContext+0xb8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e010      	b.n	80050ee <vTaskSwitchContext+0x46>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	607b      	str	r3, [r7, #4]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <vTaskSwitchContext+0x3e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	491d      	ldr	r1, [pc, #116]	; (8005164 <vTaskSwitchContext+0xbc>)
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0e4      	beq.n	80050cc <vTaskSwitchContext+0x24>
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <vTaskSwitchContext+0xbc>)
 800510e:	4413      	add	r3, r2
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	3308      	adds	r3, #8
 8005124:	429a      	cmp	r2, r3
 8005126:	d104      	bne.n	8005132 <vTaskSwitchContext+0x8a>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <vTaskSwitchContext+0xc0>)
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <vTaskSwitchContext+0xb8>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <vTaskSwitchContext+0xc0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3354      	adds	r3, #84	; 0x54
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <vTaskSwitchContext+0xc4>)
 800514a:	6013      	str	r3, [r2, #0]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	20000d10 	.word	0x20000d10
 800515c:	20000cfc 	.word	0x20000cfc
 8005160:	20000cf0 	.word	0x20000cf0
 8005164:	20000818 	.word	0x20000818
 8005168:	20000814 	.word	0x20000814
 800516c:	20000010 	.word	0x20000010

08005170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <vTaskPlaceOnEventList+0x44>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3318      	adds	r3, #24
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fe fe61 	bl	8003e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051a4:	2101      	movs	r1, #1
 80051a6:	6838      	ldr	r0, [r7, #0]
 80051a8:	f000 fa80 	bl	80056ac <prvAddCurrentTaskToDelayedList>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000814 	.word	0x20000814

080051b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	617b      	str	r3, [r7, #20]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <vTaskPlaceOnEventListRestricted+0x54>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3318      	adds	r3, #24
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7fe fe18 	bl	8003e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	68b8      	ldr	r0, [r7, #8]
 80051fe:	f000 fa55 	bl	80056ac <prvAddCurrentTaskToDelayedList>
	}
 8005202:	bf00      	nop
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000814 	.word	0x20000814

08005210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60fb      	str	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	3318      	adds	r3, #24
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fe49 	bl	8003ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <xTaskRemoveFromEventList+0xb0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11d      	bne.n	800528a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3304      	adds	r3, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fe40 	bl	8003ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <xTaskRemoveFromEventList+0xb4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d903      	bls.n	800526c <xTaskRemoveFromEventList+0x5c>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <xTaskRemoveFromEventList+0xb4>)
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <xTaskRemoveFromEventList+0xb8>)
 800527a:	441a      	add	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7fe fdcb 	bl	8003e1e <vListInsertEnd>
 8005288:	e005      	b.n	8005296 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3318      	adds	r3, #24
 800528e:	4619      	mov	r1, r3
 8005290:	480e      	ldr	r0, [pc, #56]	; (80052cc <xTaskRemoveFromEventList+0xbc>)
 8005292:	f7fe fdc4 	bl	8003e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <xTaskRemoveFromEventList+0xc0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d905      	bls.n	80052b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <xTaskRemoveFromEventList+0xc4>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e001      	b.n	80052b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052b4:	697b      	ldr	r3, [r7, #20]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000d10 	.word	0x20000d10
 80052c4:	20000cf0 	.word	0x20000cf0
 80052c8:	20000818 	.word	0x20000818
 80052cc:	20000ca8 	.word	0x20000ca8
 80052d0:	20000814 	.word	0x20000814
 80052d4:	20000cfc 	.word	0x20000cfc

080052d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <vTaskInternalSetTimeOutState+0x24>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <vTaskInternalSetTimeOutState+0x28>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	605a      	str	r2, [r3, #4]
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	20000d00 	.word	0x20000d00
 8005300:	20000cec 	.word	0x20000cec

08005304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005346:	f000 fe7d 	bl	8006044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800534a:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <xTaskCheckForTimeOut+0xbc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d102      	bne.n	800536a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e023      	b.n	80053b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <xTaskCheckForTimeOut+0xc0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d007      	beq.n	8005386 <xTaskCheckForTimeOut+0x82>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	e015      	b.n	80053b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	d20b      	bcs.n	80053a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff9b 	bl	80052d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e004      	b.n	80053b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053b2:	f000 fe77 	bl	80060a4 <vPortExitCritical>

	return xReturn;
 80053b6:	69fb      	ldr	r3, [r7, #28]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000cec 	.word	0x20000cec
 80053c4:	20000d00 	.word	0x20000d00

080053c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <vTaskMissedYield+0x14>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000cfc 	.word	0x20000cfc

080053e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053e8:	f000 f852 	bl	8005490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <prvIdleTask+0x28>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d9f9      	bls.n	80053e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <prvIdleTask+0x2c>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005404:	e7f0      	b.n	80053e8 <prvIdleTask+0x8>
 8005406:	bf00      	nop
 8005408:	20000818 	.word	0x20000818
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]
 800541a:	e00c      	b.n	8005436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4a12      	ldr	r2, [pc, #72]	; (8005470 <prvInitialiseTaskLists+0x60>)
 8005428:	4413      	add	r3, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fcca 	bl	8003dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3301      	adds	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b37      	cmp	r3, #55	; 0x37
 800543a:	d9ef      	bls.n	800541c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800543c:	480d      	ldr	r0, [pc, #52]	; (8005474 <prvInitialiseTaskLists+0x64>)
 800543e:	f7fe fcc1 	bl	8003dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005442:	480d      	ldr	r0, [pc, #52]	; (8005478 <prvInitialiseTaskLists+0x68>)
 8005444:	f7fe fcbe 	bl	8003dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005448:	480c      	ldr	r0, [pc, #48]	; (800547c <prvInitialiseTaskLists+0x6c>)
 800544a:	f7fe fcbb 	bl	8003dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800544e:	480c      	ldr	r0, [pc, #48]	; (8005480 <prvInitialiseTaskLists+0x70>)
 8005450:	f7fe fcb8 	bl	8003dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005454:	480b      	ldr	r0, [pc, #44]	; (8005484 <prvInitialiseTaskLists+0x74>)
 8005456:	f7fe fcb5 	bl	8003dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800545a:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <prvInitialiseTaskLists+0x78>)
 800545c:	4a05      	ldr	r2, [pc, #20]	; (8005474 <prvInitialiseTaskLists+0x64>)
 800545e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <prvInitialiseTaskLists+0x7c>)
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <prvInitialiseTaskLists+0x68>)
 8005464:	601a      	str	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000818 	.word	0x20000818
 8005474:	20000c78 	.word	0x20000c78
 8005478:	20000c8c 	.word	0x20000c8c
 800547c:	20000ca8 	.word	0x20000ca8
 8005480:	20000cbc 	.word	0x20000cbc
 8005484:	20000cd4 	.word	0x20000cd4
 8005488:	20000ca0 	.word	0x20000ca0
 800548c:	20000ca4 	.word	0x20000ca4

08005490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005496:	e019      	b.n	80054cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005498:	f000 fdd4 	bl	8006044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800549c:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <prvCheckTasksWaitingTermination+0x50>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fd15 	bl	8003ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <prvCheckTasksWaitingTermination+0x54>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	4a0b      	ldr	r2, [pc, #44]	; (80054e4 <prvCheckTasksWaitingTermination+0x54>)
 80054b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <prvCheckTasksWaitingTermination+0x58>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <prvCheckTasksWaitingTermination+0x58>)
 80054c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054c2:	f000 fdef 	bl	80060a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f810 	bl	80054ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <prvCheckTasksWaitingTermination+0x58>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e1      	bne.n	8005498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000cbc 	.word	0x20000cbc
 80054e4:	20000ce8 	.word	0x20000ce8
 80054e8:	20000cd0 	.word	0x20000cd0

080054ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3354      	adds	r3, #84	; 0x54
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 fb8b 	bl	8006c14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	4618      	mov	r0, r3
 800550e:	f000 ff87 	bl	8006420 <vPortFree>
				vPortFree( pxTCB );
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 ff84 	bl	8006420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005518:	e018      	b.n	800554c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005520:	2b01      	cmp	r3, #1
 8005522:	d103      	bne.n	800552c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 ff7b 	bl	8006420 <vPortFree>
	}
 800552a:	e00f      	b.n	800554c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005532:	2b02      	cmp	r3, #2
 8005534:	d00a      	beq.n	800554c <prvDeleteTCB+0x60>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60fb      	str	r3, [r7, #12]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <prvDeleteTCB+0x5e>
	}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <prvResetNextTaskUnblockTime+0x38>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <prvResetNextTaskUnblockTime+0x3c>)
 8005566:	f04f 32ff 	mov.w	r2, #4294967295
 800556a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800556c:	e008      	b.n	8005580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <prvResetNextTaskUnblockTime+0x38>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <prvResetNextTaskUnblockTime+0x3c>)
 800557e:	6013      	str	r3, [r2, #0]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000ca0 	.word	0x20000ca0
 8005590:	20000d08 	.word	0x20000d08

08005594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <xTaskGetSchedulerState+0x34>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80055a2:	2301      	movs	r3, #1
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e008      	b.n	80055ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a8:	4b08      	ldr	r3, [pc, #32]	; (80055cc <xTaskGetSchedulerState+0x38>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80055b0:	2302      	movs	r3, #2
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e001      	b.n	80055ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80055ba:	687b      	ldr	r3, [r7, #4]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000cf4 	.word	0x20000cf4
 80055cc:	20000d10 	.word	0x20000d10

080055d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d056      	beq.n	8005694 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <xTaskPriorityDisinherit+0xd0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d00a      	beq.n	8005606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
}
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	429a      	cmp	r2, r3
 8005638:	d02c      	beq.n	8005694 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563e:	2b00      	cmp	r3, #0
 8005640:	d128      	bne.n	8005694 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fc46 	bl	8003ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <xTaskPriorityDisinherit+0xd4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d903      	bls.n	8005674 <xTaskPriorityDisinherit+0xa4>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <xTaskPriorityDisinherit+0xd4>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <xTaskPriorityDisinherit+0xd8>)
 8005682:	441a      	add	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fe fbc7 	bl	8003e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005694:	697b      	ldr	r3, [r7, #20]
	}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000814 	.word	0x20000814
 80056a4:	20000cf0 	.word	0x20000cf0
 80056a8:	20000818 	.word	0x20000818

080056ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <prvAddCurrentTaskToDelayedList+0x90>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fc08 	bl	8003ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d10a      	bne.n	80056e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d6:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4819      	ldr	r0, [pc, #100]	; (8005744 <prvAddCurrentTaskToDelayedList+0x98>)
 80056e0:	f7fe fb9d 	bl	8003e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056e4:	e026      	b.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d209      	bcs.n	8005712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe fbab 	bl	8003e66 <vListInsert>
}
 8005710:	e010      	b.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <prvAddCurrentTaskToDelayedList+0x94>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe fba1 	bl	8003e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	d202      	bcs.n	8005734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6013      	str	r3, [r2, #0]
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000cec 	.word	0x20000cec
 8005740:	20000814 	.word	0x20000814
 8005744:	20000cd4 	.word	0x20000cd4
 8005748:	20000ca4 	.word	0x20000ca4
 800574c:	20000ca0 	.word	0x20000ca0
 8005750:	20000d08 	.word	0x20000d08

08005754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800575e:	f000 fb07 	bl	8005d70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <xTimerCreateTimerTask+0x80>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d021      	beq.n	80057ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005772:	1d3a      	adds	r2, r7, #4
 8005774:	f107 0108 	add.w	r1, r7, #8
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fb07 	bl	8003d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	9202      	str	r2, [sp, #8]
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	2302      	movs	r3, #2
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	2300      	movs	r3, #0
 8005792:	460a      	mov	r2, r1
 8005794:	4910      	ldr	r1, [pc, #64]	; (80057d8 <xTimerCreateTimerTask+0x84>)
 8005796:	4811      	ldr	r0, [pc, #68]	; (80057dc <xTimerCreateTimerTask+0x88>)
 8005798:	f7ff f8b4 	bl	8004904 <xTaskCreateStatic>
 800579c:	4603      	mov	r3, r0
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <xTimerCreateTimerTask+0x8c>)
 80057a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <xTimerCreateTimerTask+0x8c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80057ca:	697b      	ldr	r3, [r7, #20]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20000d44 	.word	0x20000d44
 80057d8:	08008414 	.word	0x08008414
 80057dc:	08005919 	.word	0x08005919
 80057e0:	20000d48 	.word	0x20000d48

080057e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	623b      	str	r3, [r7, #32]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005812:	4b1a      	ldr	r3, [pc, #104]	; (800587c <xTimerGenericCommand+0x98>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02a      	beq.n	8005870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b05      	cmp	r3, #5
 800582a:	dc18      	bgt.n	800585e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800582c:	f7ff feb2 	bl	8005594 <xTaskGetSchedulerState>
 8005830:	4603      	mov	r3, r0
 8005832:	2b02      	cmp	r3, #2
 8005834:	d109      	bne.n	800584a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005836:	4b11      	ldr	r3, [pc, #68]	; (800587c <xTimerGenericCommand+0x98>)
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	f107 0110 	add.w	r1, r7, #16
 800583e:	2300      	movs	r3, #0
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	f7fe fc77 	bl	8004134 <xQueueGenericSend>
 8005846:	6278      	str	r0, [r7, #36]	; 0x24
 8005848:	e012      	b.n	8005870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <xTimerGenericCommand+0x98>)
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f107 0110 	add.w	r1, r7, #16
 8005852:	2300      	movs	r3, #0
 8005854:	2200      	movs	r2, #0
 8005856:	f7fe fc6d 	bl	8004134 <xQueueGenericSend>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
 800585c:	e008      	b.n	8005870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <xTimerGenericCommand+0x98>)
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f107 0110 	add.w	r1, r7, #16
 8005866:	2300      	movs	r3, #0
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	f7fe fd61 	bl	8004330 <xQueueGenericSendFromISR>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005872:	4618      	mov	r0, r3
 8005874:	3728      	adds	r7, #40	; 0x28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000d44 	.word	0x20000d44

08005880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <prvProcessExpiredTimer+0x94>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fb1d 	bl	8003ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d022      	beq.n	80058f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	18d1      	adds	r1, r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	6978      	ldr	r0, [r7, #20]
 80058ba:	f000 f8d1 	bl	8005a60 <prvInsertTimerInActiveList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01f      	beq.n	8005904 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	2300      	movs	r3, #0
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	2100      	movs	r1, #0
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff ff88 	bl	80057e4 <xTimerGenericCommand>
 80058d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d113      	bne.n	8005904 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	6978      	ldr	r0, [r7, #20]
 800590a:	4798      	blx	r3
}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000d3c 	.word	0x20000d3c

08005918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f857 	bl	80059d8 <prvGetNextExpireTime>
 800592a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f803 	bl	800593c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005936:	f000 f8d5 	bl	8005ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800593a:	e7f1      	b.n	8005920 <prvTimerTask+0x8>

0800593c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005946:	f7ff fa39 	bl	8004dbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f866 	bl	8005a20 <prvSampleTimeNow>
 8005954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d130      	bne.n	80059be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <prvProcessTimerOrBlockTask+0x3c>
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	429a      	cmp	r2, r3
 8005968:	d806      	bhi.n	8005978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800596a:	f7ff fa35 	bl	8004dd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ff85 	bl	8005880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005976:	e024      	b.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <prvProcessTimerOrBlockTask+0x90>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <prvProcessTimerOrBlockTask+0x50>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <prvProcessTimerOrBlockTask+0x52>
 800598c:	2300      	movs	r3, #0
 800598e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <prvProcessTimerOrBlockTask+0x94>)
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	4619      	mov	r1, r3
 800599e:	f7fe ff7d 	bl	800489c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059a2:	f7ff fa19 	bl	8004dd8 <xTaskResumeAll>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059ac:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <prvProcessTimerOrBlockTask+0x98>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
}
 80059bc:	e001      	b.n	80059c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059be:	f7ff fa0b 	bl	8004dd8 <xTaskResumeAll>
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000d40 	.word	0x20000d40
 80059d0:	20000d44 	.word	0x20000d44
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <prvGetNextExpireTime+0x44>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <prvGetNextExpireTime+0x16>
 80059ea:	2201      	movs	r2, #1
 80059ec:	e000      	b.n	80059f0 <prvGetNextExpireTime+0x18>
 80059ee:	2200      	movs	r2, #0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <prvGetNextExpireTime+0x44>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e001      	b.n	8005a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000d3c 	.word	0x20000d3c

08005a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a28:	f7ff fa74 	bl	8004f14 <xTaskGetTickCount>
 8005a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <prvSampleTimeNow+0x3c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d205      	bcs.n	8005a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a38:	f000 f936 	bl	8005ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <prvSampleTimeNow+0x3c>)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a50:	68fb      	ldr	r3, [r7, #12]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000d4c 	.word	0x20000d4c

08005a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d812      	bhi.n	8005aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e01b      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <prvInsertTimerInActiveList+0x7c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe f9de 	bl	8003e66 <vListInsert>
 8005aaa:	e012      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d206      	bcs.n	8005ac2 <prvInsertTimerInActiveList+0x62>
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005abc:	2301      	movs	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e007      	b.n	8005ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <prvInsertTimerInActiveList+0x80>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fe f9ca 	bl	8003e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ad2:	697b      	ldr	r3, [r7, #20]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000d40 	.word	0x20000d40
 8005ae0:	20000d3c 	.word	0x20000d3c

08005ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aea:	e0ca      	b.n	8005c82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da18      	bge.n	8005b24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	3304      	adds	r3, #4
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	61fb      	str	r3, [r7, #28]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b1a:	6850      	ldr	r0, [r2, #4]
 8005b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b1e:	6892      	ldr	r2, [r2, #8]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f2c0 80aa 	blt.w	8005c80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe f9cb 	bl	8003ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b42:	463b      	mov	r3, r7
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff6b 	bl	8005a20 <prvSampleTimeNow>
 8005b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	f200 8097 	bhi.w	8005c82 <prvProcessReceivedCommands+0x19e>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <prvProcessReceivedCommands+0x78>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b85 	.word	0x08005b85
 8005b64:	08005b85 	.word	0x08005b85
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005c0d 	.word	0x08005c0d
 8005b70:	08005c57 	.word	0x08005c57
 8005b74:	08005b85 	.word	0x08005b85
 8005b78:	08005b85 	.word	0x08005b85
 8005b7c:	08005bf9 	.word	0x08005bf9
 8005b80:	08005c0d 	.word	0x08005c0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	18d1      	adds	r1, r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba4:	f7ff ff5c 	bl	8005a60 <prvInsertTimerInActiveList>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d069      	beq.n	8005c82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05e      	beq.n	8005c82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	441a      	add	r2, r3
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bd6:	f7ff fe05 	bl	80057e4 <xTimerGenericCommand>
 8005bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d14f      	bne.n	8005c82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	61bb      	str	r3, [r7, #24]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c0a:	e03a      	b.n	8005c82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	617b      	str	r3, [r7, #20]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	18d1      	adds	r1, r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c50:	f7ff ff06 	bl	8005a60 <prvInsertTimerInActiveList>
					break;
 8005c54:	e015      	b.n	8005c82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c66:	f000 fbdb 	bl	8006420 <vPortFree>
 8005c6a:	e00a      	b.n	8005c82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c7e:	e000      	b.n	8005c82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <prvProcessReceivedCommands+0x1c0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1d39      	adds	r1, r7, #4
 8005c88:	2200      	movs	r2, #0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fbec 	bl	8004468 <xQueueReceive>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f af2a 	bne.w	8005aec <prvProcessReceivedCommands+0x8>
	}
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3730      	adds	r7, #48	; 0x30
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000d44 	.word	0x20000d44

08005ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cae:	e048      	b.n	8005d42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe f905 	bl	8003ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02e      	beq.n	8005d42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d90e      	bls.n	8005d14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7fe f8aa 	bl	8003e66 <vListInsert>
 8005d12:	e016      	b.n	8005d42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d14:	2300      	movs	r3, #0
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fd60 	bl	80057e4 <xTimerGenericCommand>
 8005d24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	603b      	str	r3, [r7, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1b1      	bne.n	8005cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <prvSwitchTimerLists+0xc4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvSwitchTimerLists+0xc0>)
 8005d58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d5a:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <prvSwitchTimerLists+0xc4>)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000d3c 	.word	0x20000d3c
 8005d6c:	20000d40 	.word	0x20000d40

08005d70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d76:	f000 f965 	bl	8006044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <prvCheckForValidListAndQueue+0x60>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d120      	bne.n	8005dc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d82:	4814      	ldr	r0, [pc, #80]	; (8005dd4 <prvCheckForValidListAndQueue+0x64>)
 8005d84:	f7fe f81e 	bl	8003dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d88:	4813      	ldr	r0, [pc, #76]	; (8005dd8 <prvCheckForValidListAndQueue+0x68>)
 8005d8a:	f7fe f81b 	bl	8003dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <prvCheckForValidListAndQueue+0x6c>)
 8005d90:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <prvCheckForValidListAndQueue+0x64>)
 8005d92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <prvCheckForValidListAndQueue+0x70>)
 8005d96:	4a10      	ldr	r2, [pc, #64]	; (8005dd8 <prvCheckForValidListAndQueue+0x68>)
 8005d98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <prvCheckForValidListAndQueue+0x74>)
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <prvCheckForValidListAndQueue+0x78>)
 8005da2:	2110      	movs	r1, #16
 8005da4:	200a      	movs	r0, #10
 8005da6:	f7fe f929 	bl	8003ffc <xQueueGenericCreateStatic>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <prvCheckForValidListAndQueue+0x60>)
 8005dae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <prvCheckForValidListAndQueue+0x60>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <prvCheckForValidListAndQueue+0x60>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	490b      	ldr	r1, [pc, #44]	; (8005dec <prvCheckForValidListAndQueue+0x7c>)
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fd42 	bl	8004848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dc4:	f000 f96e 	bl	80060a4 <vPortExitCritical>
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000d44 	.word	0x20000d44
 8005dd4:	20000d14 	.word	0x20000d14
 8005dd8:	20000d28 	.word	0x20000d28
 8005ddc:	20000d3c 	.word	0x20000d3c
 8005de0:	20000d40 	.word	0x20000d40
 8005de4:	20000df0 	.word	0x20000df0
 8005de8:	20000d50 	.word	0x20000d50
 8005dec:	0800841c 	.word	0x0800841c

08005df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b04      	subs	r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e20:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <pxPortInitialiseStack+0x64>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b14      	subs	r3, #20
 8005e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3b04      	subs	r3, #4
 8005e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f06f 0202 	mvn.w	r2, #2
 8005e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3b20      	subs	r3, #32
 8005e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	08005e59 	.word	0x08005e59

08005e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <prvTaskExitError+0x54>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d00a      	beq.n	8005e82 <prvTaskExitError+0x2a>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	60fb      	str	r3, [r7, #12]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <prvTaskExitError+0x28>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e96:	bf00      	nop
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0fc      	beq.n	8005e98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <pxCurrentTCBConst2>)
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	f380 8809 	msr	PSP, r0
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
 8005eca:	4770      	bx	lr
 8005ecc:	f3af 8000 	nop.w

08005ed0 <pxCurrentTCBConst2>:
 8005ed0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop

08005ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ed8:	4808      	ldr	r0, [pc, #32]	; (8005efc <prvPortStartFirstTask+0x24>)
 8005eda:	6800      	ldr	r0, [r0, #0]
 8005edc:	6800      	ldr	r0, [r0, #0]
 8005ede:	f380 8808 	msr	MSP, r0
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8814 	msr	CONTROL, r0
 8005eea:	b662      	cpsie	i
 8005eec:	b661      	cpsie	f
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	df00      	svc	0
 8005ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005efa:	bf00      	nop
 8005efc:	e000ed08 	.word	0xe000ed08

08005f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f06:	4b46      	ldr	r3, [pc, #280]	; (8006020 <xPortStartScheduler+0x120>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a46      	ldr	r2, [pc, #280]	; (8006024 <xPortStartScheduler+0x124>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10a      	bne.n	8005f26 <xPortStartScheduler+0x26>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	613b      	str	r3, [r7, #16]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f26:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <xPortStartScheduler+0x120>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	; (8006028 <xPortStartScheduler+0x128>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10a      	bne.n	8005f46 <xPortStartScheduler+0x46>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	60fb      	str	r3, [r7, #12]
}
 8005f42:	bf00      	nop
 8005f44:	e7fe      	b.n	8005f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f46:	4b39      	ldr	r3, [pc, #228]	; (800602c <xPortStartScheduler+0x12c>)
 8005f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <xPortStartScheduler+0x130>)
 8005f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f6e:	4b31      	ldr	r3, [pc, #196]	; (8006034 <xPortStartScheduler+0x134>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f74:	e009      	b.n	8005f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f76:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <xPortStartScheduler+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	; (8006034 <xPortStartScheduler+0x134>)
 8005f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b80      	cmp	r3, #128	; 0x80
 8005f94:	d0ef      	beq.n	8005f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <xPortStartScheduler+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d00a      	beq.n	8005fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60bb      	str	r3, [r7, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <xPortStartScheduler+0x134>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <xPortStartScheduler+0x134>)
 8005fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xPortStartScheduler+0x134>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <xPortStartScheduler+0x134>)
 8005fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fd6:	4b18      	ldr	r3, [pc, #96]	; (8006038 <xPortStartScheduler+0x138>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a17      	ldr	r2, [pc, #92]	; (8006038 <xPortStartScheduler+0x138>)
 8005fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <xPortStartScheduler+0x138>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a14      	ldr	r2, [pc, #80]	; (8006038 <xPortStartScheduler+0x138>)
 8005fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fee:	f000 f8dd 	bl	80061ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <xPortStartScheduler+0x13c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ff8:	f000 f8fc 	bl	80061f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <xPortStartScheduler+0x140>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <xPortStartScheduler+0x140>)
 8006002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006008:	f7ff ff66 	bl	8005ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800600c:	f7ff f84c 	bl	80050a8 <vTaskSwitchContext>
	prvTaskExitError();
 8006010:	f7ff ff22 	bl	8005e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	e000ed00 	.word	0xe000ed00
 8006024:	410fc271 	.word	0x410fc271
 8006028:	410fc270 	.word	0x410fc270
 800602c:	e000e400 	.word	0xe000e400
 8006030:	20000e40 	.word	0x20000e40
 8006034:	20000e44 	.word	0x20000e44
 8006038:	e000ed20 	.word	0xe000ed20
 800603c:	2000000c 	.word	0x2000000c
 8006040:	e000ef34 	.word	0xe000ef34

08006044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	607b      	str	r3, [r7, #4]
}
 800605c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <vPortEnterCritical+0x58>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <vPortEnterCritical+0x58>)
 8006066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <vPortEnterCritical+0x58>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10f      	bne.n	8006090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <vPortEnterCritical+0x5c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <vPortEnterCritical+0x4c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	603b      	str	r3, [r7, #0]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <vPortEnterCritical+0x4a>
	}
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	2000000c 	.word	0x2000000c
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <vPortExitCritical+0x50>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <vPortExitCritical+0x24>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	607b      	str	r3, [r7, #4]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <vPortExitCritical+0x50>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <vPortExitCritical+0x50>)
 80060d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <vPortExitCritical+0x50>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <vPortExitCritical+0x42>
 80060da:	2300      	movs	r3, #0
 80060dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f383 8811 	msr	BASEPRI, r3
}
 80060e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000000c 	.word	0x2000000c
	...

08006100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006100:	f3ef 8009 	mrs	r0, PSP
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <pxCurrentTCBConst>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f01e 0f10 	tst.w	lr, #16
 8006110:	bf08      	it	eq
 8006112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	6010      	str	r0, [r2, #0]
 800611c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006124:	f380 8811 	msr	BASEPRI, r0
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f7fe ffba 	bl	80050a8 <vTaskSwitchContext>
 8006134:	f04f 0000 	mov.w	r0, #0
 8006138:	f380 8811 	msr	BASEPRI, r0
 800613c:	bc09      	pop	{r0, r3}
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	6808      	ldr	r0, [r1, #0]
 8006142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006146:	f01e 0f10 	tst.w	lr, #16
 800614a:	bf08      	it	eq
 800614c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006150:	f380 8809 	msr	PSP, r0
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	f3af 8000 	nop.w

08006160 <pxCurrentTCBConst>:
 8006160:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
	__asm volatile
 800616e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006172:	f383 8811 	msr	BASEPRI, r3
 8006176:	f3bf 8f6f 	isb	sy
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	607b      	str	r3, [r7, #4]
}
 8006180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006182:	f7fe fed7 	bl	8004f34 <xTaskIncrementTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <xPortSysTickHandler+0x40>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <vPortSetupTimerInterrupt+0x34>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <vPortSetupTimerInterrupt+0x38>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <vPortSetupTimerInterrupt+0x3c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <vPortSetupTimerInterrupt+0x40>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	099b      	lsrs	r3, r3, #6
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <vPortSetupTimerInterrupt+0x44>)
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <vPortSetupTimerInterrupt+0x34>)
 80061d0:	2207      	movs	r2, #7
 80061d2:	601a      	str	r2, [r3, #0]
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000e010 	.word	0xe000e010
 80061e4:	e000e018 	.word	0xe000e018
 80061e8:	20000000 	.word	0x20000000
 80061ec:	10624dd3 	.word	0x10624dd3
 80061f0:	e000e014 	.word	0xe000e014

080061f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006204 <vPortEnableVFP+0x10>
 80061f8:	6801      	ldr	r1, [r0, #0]
 80061fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061fe:	6001      	str	r1, [r0, #0]
 8006200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006202:	bf00      	nop
 8006204:	e000ed88 	.word	0xe000ed88

08006208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800620e:	f3ef 8305 	mrs	r3, IPSR
 8006212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	d914      	bls.n	8006244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800621a:	4a17      	ldr	r2, [pc, #92]	; (8006278 <vPortValidateInterruptPriority+0x70>)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006224:	4b15      	ldr	r3, [pc, #84]	; (800627c <vPortValidateInterruptPriority+0x74>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	7afa      	ldrb	r2, [r7, #11]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20a      	bcs.n	8006244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006244:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <vPortValidateInterruptPriority+0x78>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800624c:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <vPortValidateInterruptPriority+0x7c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d90a      	bls.n	800626a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	603b      	str	r3, [r7, #0]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <vPortValidateInterruptPriority+0x60>
	}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	e000e3f0 	.word	0xe000e3f0
 800627c:	20000e40 	.word	0x20000e40
 8006280:	e000ed0c 	.word	0xe000ed0c
 8006284:	20000e44 	.word	0x20000e44

08006288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006294:	f7fe fd92 	bl	8004dbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006298:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <pvPortMalloc+0x180>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062a0:	f000 f920 	bl	80064e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062a4:	4b59      	ldr	r3, [pc, #356]	; (800640c <pvPortMalloc+0x184>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 8093 	bne.w	80063d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01d      	beq.n	80062f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80062b8:	2208      	movs	r2, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d014      	beq.n	80062f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f023 0307 	bic.w	r3, r3, #7
 80062d0:	3308      	adds	r3, #8
 80062d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <pvPortMalloc+0x6c>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	617b      	str	r3, [r7, #20]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d06e      	beq.n	80063d8 <pvPortMalloc+0x150>
 80062fa:	4b45      	ldr	r3, [pc, #276]	; (8006410 <pvPortMalloc+0x188>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d869      	bhi.n	80063d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <pvPortMalloc+0x18c>)
 8006306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006308:	4b42      	ldr	r3, [pc, #264]	; (8006414 <pvPortMalloc+0x18c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800630e:	e004      	b.n	800631a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <pvPortMalloc+0xa4>
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f1      	bne.n	8006310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <pvPortMalloc+0x180>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	429a      	cmp	r2, r3
 8006334:	d050      	beq.n	80063d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2208      	movs	r2, #8
 800633c:	4413      	add	r3, r2
 800633e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	2308      	movs	r3, #8
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	429a      	cmp	r2, r3
 8006356:	d91f      	bls.n	8006398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <pvPortMalloc+0xf8>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	613b      	str	r3, [r7, #16]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006392:	69b8      	ldr	r0, [r7, #24]
 8006394:	f000 f908 	bl	80065a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <pvPortMalloc+0x188>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <pvPortMalloc+0x188>)
 80063a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063a6:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <pvPortMalloc+0x188>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b1b      	ldr	r3, [pc, #108]	; (8006418 <pvPortMalloc+0x190>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d203      	bcs.n	80063ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <pvPortMalloc+0x188>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a18      	ldr	r2, [pc, #96]	; (8006418 <pvPortMalloc+0x190>)
 80063b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b13      	ldr	r3, [pc, #76]	; (800640c <pvPortMalloc+0x184>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <pvPortMalloc+0x194>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	4a11      	ldr	r2, [pc, #68]	; (800641c <pvPortMalloc+0x194>)
 80063d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063d8:	f7fe fcfe 	bl	8004dd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <pvPortMalloc+0x174>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <pvPortMalloc+0x172>
	return pvReturn;
 80063fc:	69fb      	ldr	r3, [r7, #28]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3728      	adds	r7, #40	; 0x28
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20004a50 	.word	0x20004a50
 800640c:	20004a64 	.word	0x20004a64
 8006410:	20004a54 	.word	0x20004a54
 8006414:	20004a48 	.word	0x20004a48
 8006418:	20004a58 	.word	0x20004a58
 800641c:	20004a5c 	.word	0x20004a5c

08006420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04d      	beq.n	80064ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006432:	2308      	movs	r3, #8
 8006434:	425b      	negs	r3, r3
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <vPortFree+0xb8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4013      	ands	r3, r2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <vPortFree+0x44>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <vPortFree+0x62>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	60bb      	str	r3, [r7, #8]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <vPortFree+0xb8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4013      	ands	r3, r2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01e      	beq.n	80064ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11a      	bne.n	80064ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <vPortFree+0xb8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	43db      	mvns	r3, r3
 80064a2:	401a      	ands	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064a8:	f7fe fc88 	bl	8004dbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <vPortFree+0xbc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <vPortFree+0xbc>)
 80064b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f000 f874 	bl	80065a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <vPortFree+0xc0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	4a06      	ldr	r2, [pc, #24]	; (80064e0 <vPortFree+0xc0>)
 80064c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064ca:	f7fe fc85 	bl	8004dd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20004a64 	.word	0x20004a64
 80064dc:	20004a54 	.word	0x20004a54
 80064e0:	20004a60 	.word	0x20004a60

080064e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <prvHeapInit+0xac>)
 80064f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3307      	adds	r3, #7
 8006502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <prvHeapInit+0xac>)
 8006514:	4413      	add	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <prvHeapInit+0xb0>)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006522:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <prvHeapInit+0xb0>)
 8006524:	2200      	movs	r2, #0
 8006526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	4413      	add	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006530:	2208      	movs	r2, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <prvHeapInit+0xb4>)
 8006544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <prvHeapInit+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <prvHeapInit+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006564:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <prvHeapInit+0xb4>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <prvHeapInit+0xb8>)
 8006572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <prvHeapInit+0xbc>)
 800657a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <prvHeapInit+0xc0>)
 800657e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006582:	601a      	str	r2, [r3, #0]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000e48 	.word	0x20000e48
 8006594:	20004a48 	.word	0x20004a48
 8006598:	20004a50 	.word	0x20004a50
 800659c:	20004a58 	.word	0x20004a58
 80065a0:	20004a54 	.word	0x20004a54
 80065a4:	20004a64 	.word	0x20004a64

080065a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065b0:	4b28      	ldr	r3, [pc, #160]	; (8006654 <prvInsertBlockIntoFreeList+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e002      	b.n	80065bc <prvInsertBlockIntoFreeList+0x14>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d8f7      	bhi.n	80065b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d108      	bne.n	80065ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d118      	bne.n	8006630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d00d      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e008      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <prvInsertBlockIntoFreeList+0xb0>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e003      	b.n	8006638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d002      	beq.n	8006646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20004a48 	.word	0x20004a48
 8006658:	20004a50 	.word	0x20004a50

0800665c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006662:	2300      	movs	r3, #0
 8006664:	71fb      	strb	r3, [r7, #7]
 8006666:	e026      	b.n	80066b6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	3b50      	subs	r3, #80	; 0x50
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 f82b 	bl	80066cc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006676:	2100      	movs	r1, #0
 8006678:	2000      	movs	r0, #0
 800667a:	f000 f827 	bl	80066cc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800667e:	2100      	movs	r1, #0
 8006680:	2010      	movs	r0, #16
 8006682:	f000 f823 	bl	80066cc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006686:	2300      	movs	r3, #0
 8006688:	71bb      	strb	r3, [r7, #6]
 800668a:	e00d      	b.n	80066a8 <OLED_Refresh_Gram+0x4c>
 800668c:	79ba      	ldrb	r2, [r7, #6]
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	490d      	ldr	r1, [pc, #52]	; (80066c8 <OLED_Refresh_Gram+0x6c>)
 8006692:	00d2      	lsls	r2, r2, #3
 8006694:	440a      	add	r2, r1
 8006696:	4413      	add	r3, r2
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f815 	bl	80066cc <OLED_WR_Byte>
 80066a2:	79bb      	ldrb	r3, [r7, #6]
 80066a4:	3301      	adds	r3, #1
 80066a6:	71bb      	strb	r3, [r7, #6]
 80066a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	daed      	bge.n	800668c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	3301      	adds	r3, #1
 80066b4:	71fb      	strb	r3, [r7, #7]
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	d9d5      	bls.n	8006668 <OLED_Refresh_Gram+0xc>
	}   
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20004c14 	.word	0x20004c14

080066cc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	460a      	mov	r2, r1
 80066d6:	71fb      	strb	r3, [r7, #7]
 80066d8:	4613      	mov	r3, r2
 80066da:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80066dc:	79bb      	ldrb	r3, [r7, #6]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d006      	beq.n	80066f0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80066e2:	2201      	movs	r2, #1
 80066e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066e8:	481c      	ldr	r0, [pc, #112]	; (800675c <OLED_WR_Byte+0x90>)
 80066ea:	f7fc faa5 	bl	8002c38 <HAL_GPIO_WritePin>
 80066ee:	e005      	b.n	80066fc <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80066f0:	2200      	movs	r2, #0
 80066f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066f6:	4819      	ldr	r0, [pc, #100]	; (800675c <OLED_WR_Byte+0x90>)
 80066f8:	f7fc fa9e 	bl	8002c38 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]
 8006700:	e01e      	b.n	8006740 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006702:	2200      	movs	r2, #0
 8006704:	2120      	movs	r1, #32
 8006706:	4815      	ldr	r0, [pc, #84]	; (800675c <OLED_WR_Byte+0x90>)
 8006708:	f7fc fa96 	bl	8002c38 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800670c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	da05      	bge.n	8006720 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006714:	2201      	movs	r2, #1
 8006716:	2140      	movs	r1, #64	; 0x40
 8006718:	4810      	ldr	r0, [pc, #64]	; (800675c <OLED_WR_Byte+0x90>)
 800671a:	f7fc fa8d 	bl	8002c38 <HAL_GPIO_WritePin>
 800671e:	e004      	b.n	800672a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006720:	2200      	movs	r2, #0
 8006722:	2140      	movs	r1, #64	; 0x40
 8006724:	480d      	ldr	r0, [pc, #52]	; (800675c <OLED_WR_Byte+0x90>)
 8006726:	f7fc fa87 	bl	8002c38 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800672a:	2201      	movs	r2, #1
 800672c:	2120      	movs	r1, #32
 800672e:	480b      	ldr	r0, [pc, #44]	; (800675c <OLED_WR_Byte+0x90>)
 8006730:	f7fc fa82 	bl	8002c38 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	3301      	adds	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	2b07      	cmp	r3, #7
 8006744:	d9dd      	bls.n	8006702 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006746:	2201      	movs	r2, #1
 8006748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800674c:	4803      	ldr	r0, [pc, #12]	; (800675c <OLED_WR_Byte+0x90>)
 800674e:	f7fc fa73 	bl	8002c38 <HAL_GPIO_WritePin>
} 
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000

08006760 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006766:	2300      	movs	r3, #0
 8006768:	71fb      	strb	r3, [r7, #7]
 800676a:	e014      	b.n	8006796 <OLED_Clear+0x36>
 800676c:	2300      	movs	r3, #0
 800676e:	71bb      	strb	r3, [r7, #6]
 8006770:	e00a      	b.n	8006788 <OLED_Clear+0x28>
 8006772:	79ba      	ldrb	r2, [r7, #6]
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	490c      	ldr	r1, [pc, #48]	; (80067a8 <OLED_Clear+0x48>)
 8006778:	00d2      	lsls	r2, r2, #3
 800677a:	440a      	add	r2, r1
 800677c:	4413      	add	r3, r2
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	79bb      	ldrb	r3, [r7, #6]
 8006784:	3301      	adds	r3, #1
 8006786:	71bb      	strb	r3, [r7, #6]
 8006788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	daf0      	bge.n	8006772 <OLED_Clear+0x12>
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	3301      	adds	r3, #1
 8006794:	71fb      	strb	r3, [r7, #7]
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	2b07      	cmp	r3, #7
 800679a:	d9e7      	bls.n	800676c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800679c:	f7ff ff5e 	bl	800665c <OLED_Refresh_Gram>
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20004c14 	.word	0x20004c14

080067ac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	71fb      	strb	r3, [r7, #7]
 80067b6:	460b      	mov	r3, r1
 80067b8:	71bb      	strb	r3, [r7, #6]
 80067ba:	4613      	mov	r3, r2
 80067bc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80067c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	db41      	blt.n	800684e <OLED_DrawPoint+0xa2>
 80067ca:	79bb      	ldrb	r3, [r7, #6]
 80067cc:	2b3f      	cmp	r3, #63	; 0x3f
 80067ce:	d83e      	bhi.n	800684e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80067d0:	79bb      	ldrb	r3, [r7, #6]
 80067d2:	08db      	lsrs	r3, r3, #3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f1c3 0307 	rsb	r3, r3, #7
 80067da:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80067dc:	79bb      	ldrb	r3, [r7, #6]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80067e4:	7b7b      	ldrb	r3, [r7, #13]
 80067e6:	f1c3 0307 	rsb	r3, r3, #7
 80067ea:	2201      	movs	r2, #1
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80067f2:	797b      	ldrb	r3, [r7, #5]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <OLED_DrawPoint+0x72>
 80067f8:	79fa      	ldrb	r2, [r7, #7]
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	4917      	ldr	r1, [pc, #92]	; (800685c <OLED_DrawPoint+0xb0>)
 80067fe:	00d2      	lsls	r2, r2, #3
 8006800:	440a      	add	r2, r1
 8006802:	4413      	add	r3, r2
 8006804:	7818      	ldrb	r0, [r3, #0]
 8006806:	79fa      	ldrb	r2, [r7, #7]
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	7bf9      	ldrb	r1, [r7, #15]
 800680c:	4301      	orrs	r1, r0
 800680e:	b2c8      	uxtb	r0, r1
 8006810:	4912      	ldr	r1, [pc, #72]	; (800685c <OLED_DrawPoint+0xb0>)
 8006812:	00d2      	lsls	r2, r2, #3
 8006814:	440a      	add	r2, r1
 8006816:	4413      	add	r3, r2
 8006818:	4602      	mov	r2, r0
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e018      	b.n	8006850 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800681e:	79fa      	ldrb	r2, [r7, #7]
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	490e      	ldr	r1, [pc, #56]	; (800685c <OLED_DrawPoint+0xb0>)
 8006824:	00d2      	lsls	r2, r2, #3
 8006826:	440a      	add	r2, r1
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b25a      	sxtb	r2, r3
 800682e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006832:	43db      	mvns	r3, r3
 8006834:	b25b      	sxtb	r3, r3
 8006836:	4013      	ands	r3, r2
 8006838:	b259      	sxtb	r1, r3
 800683a:	79fa      	ldrb	r2, [r7, #7]
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	b2c8      	uxtb	r0, r1
 8006840:	4906      	ldr	r1, [pc, #24]	; (800685c <OLED_DrawPoint+0xb0>)
 8006842:	00d2      	lsls	r2, r2, #3
 8006844:	440a      	add	r2, r1
 8006846:	4413      	add	r3, r2
 8006848:	4602      	mov	r2, r0
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e000      	b.n	8006850 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800684e:	bf00      	nop
}
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20004c14 	.word	0x20004c14

08006860 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	461a      	mov	r2, r3
 800686e:	4623      	mov	r3, r4
 8006870:	71fb      	strb	r3, [r7, #7]
 8006872:	4603      	mov	r3, r0
 8006874:	71bb      	strb	r3, [r7, #6]
 8006876:	460b      	mov	r3, r1
 8006878:	717b      	strb	r3, [r7, #5]
 800687a:	4613      	mov	r3, r2
 800687c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800687e:	79bb      	ldrb	r3, [r7, #6]
 8006880:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006882:	797b      	ldrb	r3, [r7, #5]
 8006884:	3b20      	subs	r3, #32
 8006886:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006888:	2300      	movs	r3, #0
 800688a:	73bb      	strb	r3, [r7, #14]
 800688c:	e04d      	b.n	800692a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800688e:	793b      	ldrb	r3, [r7, #4]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d10b      	bne.n	80068ac <OLED_ShowChar+0x4c>
 8006894:	797a      	ldrb	r2, [r7, #5]
 8006896:	7bb9      	ldrb	r1, [r7, #14]
 8006898:	4828      	ldr	r0, [pc, #160]	; (800693c <OLED_ShowChar+0xdc>)
 800689a:	4613      	mov	r3, r2
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4403      	add	r3, r0
 80068a4:	440b      	add	r3, r1
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	e007      	b.n	80068bc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80068ac:	797a      	ldrb	r2, [r7, #5]
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	4923      	ldr	r1, [pc, #140]	; (8006940 <OLED_ShowChar+0xe0>)
 80068b2:	0112      	lsls	r2, r2, #4
 80068b4:	440a      	add	r2, r1
 80068b6:	4413      	add	r3, r2
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80068bc:	2300      	movs	r3, #0
 80068be:	737b      	strb	r3, [r7, #13]
 80068c0:	e02d      	b.n	800691e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da07      	bge.n	80068da <OLED_ShowChar+0x7a>
 80068ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80068ce:	79b9      	ldrb	r1, [r7, #6]
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ff6a 	bl	80067ac <OLED_DrawPoint>
 80068d8:	e00c      	b.n	80068f4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80068da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bf0c      	ite	eq
 80068e2:	2301      	moveq	r3, #1
 80068e4:	2300      	movne	r3, #0
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	79b9      	ldrb	r1, [r7, #6]
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff ff5c 	bl	80067ac <OLED_DrawPoint>
			temp<<=1;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
			y++;
 80068fa:	79bb      	ldrb	r3, [r7, #6]
 80068fc:	3301      	adds	r3, #1
 80068fe:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006900:	79ba      	ldrb	r2, [r7, #6]
 8006902:	7b3b      	ldrb	r3, [r7, #12]
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	793b      	ldrb	r3, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d105      	bne.n	8006918 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800690c:	7b3b      	ldrb	r3, [r7, #12]
 800690e:	71bb      	strb	r3, [r7, #6]
				x++;
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	3301      	adds	r3, #1
 8006914:	71fb      	strb	r3, [r7, #7]
				break;
 8006916:	e005      	b.n	8006924 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006918:	7b7b      	ldrb	r3, [r7, #13]
 800691a:	3301      	adds	r3, #1
 800691c:	737b      	strb	r3, [r7, #13]
 800691e:	7b7b      	ldrb	r3, [r7, #13]
 8006920:	2b07      	cmp	r3, #7
 8006922:	d9ce      	bls.n	80068c2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	3301      	adds	r3, #1
 8006928:	73bb      	strb	r3, [r7, #14]
 800692a:	7bba      	ldrb	r2, [r7, #14]
 800692c:	793b      	ldrb	r3, [r7, #4]
 800692e:	429a      	cmp	r2, r3
 8006930:	d3ad      	bcc.n	800688e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006932:	bf00      	nop
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bd90      	pop	{r4, r7, pc}
 800693c:	080084b0 	.word	0x080084b0
 8006940:	08008924 	.word	0x08008924

08006944 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af02      	add	r7, sp, #8
 800694a:	4603      	mov	r3, r0
 800694c:	603a      	str	r2, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
 8006950:	460b      	mov	r3, r1
 8006952:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006954:	e01f      	b.n	8006996 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	2b7a      	cmp	r3, #122	; 0x7a
 800695a:	d904      	bls.n	8006966 <OLED_ShowString+0x22>
 800695c:	2300      	movs	r3, #0
 800695e:	71fb      	strb	r3, [r7, #7]
 8006960:	79bb      	ldrb	r3, [r7, #6]
 8006962:	3310      	adds	r3, #16
 8006964:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006966:	79bb      	ldrb	r3, [r7, #6]
 8006968:	2b3a      	cmp	r3, #58	; 0x3a
 800696a:	d905      	bls.n	8006978 <OLED_ShowString+0x34>
 800696c:	2300      	movs	r3, #0
 800696e:	71fb      	strb	r3, [r7, #7]
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	71bb      	strb	r3, [r7, #6]
 8006974:	f7ff fef4 	bl	8006760 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	79b9      	ldrb	r1, [r7, #6]
 800697e:	79f8      	ldrb	r0, [r7, #7]
 8006980:	2301      	movs	r3, #1
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	230c      	movs	r3, #12
 8006986:	f7ff ff6b 	bl	8006860 <OLED_ShowChar>
        x+=8;
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	3308      	adds	r3, #8
 800698e:	71fb      	strb	r3, [r7, #7]
        p++;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	3301      	adds	r3, #1
 8006994:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1db      	bne.n	8006956 <OLED_ShowString+0x12>
    }  
}	 
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <OLED_Init>:

void OLED_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80069ac:	f7fc f95e 	bl	8002c6c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80069b0:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <OLED_Init+0x110>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a40      	ldr	r2, [pc, #256]	; (8006ab8 <OLED_Init+0x110>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	4b3e      	ldr	r3, [pc, #248]	; (8006ab8 <OLED_Init+0x110>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	4a3d      	ldr	r2, [pc, #244]	; (8006ab8 <OLED_Init+0x110>)
 80069c2:	f023 0304 	bic.w	r3, r3, #4
 80069c6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80069c8:	f7fc f964 	bl	8002c94 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80069cc:	2200      	movs	r2, #0
 80069ce:	2180      	movs	r1, #128	; 0x80
 80069d0:	483a      	ldr	r0, [pc, #232]	; (8006abc <OLED_Init+0x114>)
 80069d2:	f7fc f931 	bl	8002c38 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80069d6:	2064      	movs	r0, #100	; 0x64
 80069d8:	f7fa ff1e 	bl	8001818 <HAL_Delay>
	OLED_RST_Set();
 80069dc:	2201      	movs	r2, #1
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	4836      	ldr	r0, [pc, #216]	; (8006abc <OLED_Init+0x114>)
 80069e2:	f7fc f929 	bl	8002c38 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80069e6:	2100      	movs	r1, #0
 80069e8:	20ae      	movs	r0, #174	; 0xae
 80069ea:	f7ff fe6f 	bl	80066cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80069ee:	2100      	movs	r1, #0
 80069f0:	20d5      	movs	r0, #213	; 0xd5
 80069f2:	f7ff fe6b 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80069f6:	2100      	movs	r1, #0
 80069f8:	2050      	movs	r0, #80	; 0x50
 80069fa:	f7ff fe67 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80069fe:	2100      	movs	r1, #0
 8006a00:	20a8      	movs	r0, #168	; 0xa8
 8006a02:	f7ff fe63 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8006a06:	2100      	movs	r1, #0
 8006a08:	203f      	movs	r0, #63	; 0x3f
 8006a0a:	f7ff fe5f 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8006a0e:	2100      	movs	r1, #0
 8006a10:	20d3      	movs	r0, #211	; 0xd3
 8006a12:	f7ff fe5b 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8006a16:	2100      	movs	r1, #0
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7ff fe57 	bl	80066cc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8006a1e:	2100      	movs	r1, #0
 8006a20:	2040      	movs	r0, #64	; 0x40
 8006a22:	f7ff fe53 	bl	80066cc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8006a26:	2100      	movs	r1, #0
 8006a28:	208d      	movs	r0, #141	; 0x8d
 8006a2a:	f7ff fe4f 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8006a2e:	2100      	movs	r1, #0
 8006a30:	2014      	movs	r0, #20
 8006a32:	f7ff fe4b 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8006a36:	2100      	movs	r1, #0
 8006a38:	2020      	movs	r0, #32
 8006a3a:	f7ff fe47 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8006a3e:	2100      	movs	r1, #0
 8006a40:	2002      	movs	r0, #2
 8006a42:	f7ff fe43 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8006a46:	2100      	movs	r1, #0
 8006a48:	20a1      	movs	r0, #161	; 0xa1
 8006a4a:	f7ff fe3f 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8006a4e:	2100      	movs	r1, #0
 8006a50:	20c0      	movs	r0, #192	; 0xc0
 8006a52:	f7ff fe3b 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8006a56:	2100      	movs	r1, #0
 8006a58:	20da      	movs	r0, #218	; 0xda
 8006a5a:	f7ff fe37 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8006a5e:	2100      	movs	r1, #0
 8006a60:	2012      	movs	r0, #18
 8006a62:	f7ff fe33 	bl	80066cc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8006a66:	2100      	movs	r1, #0
 8006a68:	2081      	movs	r0, #129	; 0x81
 8006a6a:	f7ff fe2f 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8006a6e:	2100      	movs	r1, #0
 8006a70:	20ef      	movs	r0, #239	; 0xef
 8006a72:	f7ff fe2b 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8006a76:	2100      	movs	r1, #0
 8006a78:	20d9      	movs	r0, #217	; 0xd9
 8006a7a:	f7ff fe27 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8006a7e:	2100      	movs	r1, #0
 8006a80:	20f1      	movs	r0, #241	; 0xf1
 8006a82:	f7ff fe23 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8006a86:	2100      	movs	r1, #0
 8006a88:	20db      	movs	r0, #219	; 0xdb
 8006a8a:	f7ff fe1f 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8006a8e:	2100      	movs	r1, #0
 8006a90:	2030      	movs	r0, #48	; 0x30
 8006a92:	f7ff fe1b 	bl	80066cc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8006a96:	2100      	movs	r1, #0
 8006a98:	20a4      	movs	r0, #164	; 0xa4
 8006a9a:	f7ff fe17 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	20a6      	movs	r0, #166	; 0xa6
 8006aa2:	f7ff fe13 	bl	80066cc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	20af      	movs	r0, #175	; 0xaf
 8006aaa:	f7ff fe0f 	bl	80066cc <OLED_WR_Byte>
	OLED_Clear(); 
 8006aae:	f7ff fe57 	bl	8006760 <OLED_Clear>
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	40021000 	.word	0x40021000

08006ac0 <__errno>:
 8006ac0:	4b01      	ldr	r3, [pc, #4]	; (8006ac8 <__errno+0x8>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000010 	.word	0x20000010

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	; (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	; (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	; (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f001 fc6c 	bl	80083bc <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08008ff0 	.word	0x08008ff0
 8006b08:	08008ff0 	.word	0x08008ff0
 8006b0c:	08008ff0 	.word	0x08008ff0
 8006b10:	08008ff4 	.word	0x08008ff4

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <memcpy>:
 8006b18:	440a      	add	r2, r1
 8006b1a:	4291      	cmp	r1, r2
 8006b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b20:	d100      	bne.n	8006b24 <memcpy+0xc>
 8006b22:	4770      	bx	lr
 8006b24:	b510      	push	{r4, lr}
 8006b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b2e:	4291      	cmp	r1, r2
 8006b30:	d1f9      	bne.n	8006b26 <memcpy+0xe>
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <memset>:
 8006b34:	4402      	add	r2, r0
 8006b36:	4603      	mov	r3, r0
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d100      	bne.n	8006b3e <memset+0xa>
 8006b3c:	4770      	bx	lr
 8006b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b42:	e7f9      	b.n	8006b38 <memset+0x4>

08006b44 <_malloc_r>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	1ccd      	adds	r5, r1, #3
 8006b48:	f025 0503 	bic.w	r5, r5, #3
 8006b4c:	3508      	adds	r5, #8
 8006b4e:	2d0c      	cmp	r5, #12
 8006b50:	bf38      	it	cc
 8006b52:	250c      	movcc	r5, #12
 8006b54:	2d00      	cmp	r5, #0
 8006b56:	4606      	mov	r6, r0
 8006b58:	db01      	blt.n	8006b5e <_malloc_r+0x1a>
 8006b5a:	42a9      	cmp	r1, r5
 8006b5c:	d903      	bls.n	8006b66 <_malloc_r+0x22>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6033      	str	r3, [r6, #0]
 8006b62:	2000      	movs	r0, #0
 8006b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b66:	f000 f8e1 	bl	8006d2c <__malloc_lock>
 8006b6a:	4921      	ldr	r1, [pc, #132]	; (8006bf0 <_malloc_r+0xac>)
 8006b6c:	680a      	ldr	r2, [r1, #0]
 8006b6e:	4614      	mov	r4, r2
 8006b70:	b99c      	cbnz	r4, 8006b9a <_malloc_r+0x56>
 8006b72:	4f20      	ldr	r7, [pc, #128]	; (8006bf4 <_malloc_r+0xb0>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	b923      	cbnz	r3, 8006b82 <_malloc_r+0x3e>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f8a6 	bl	8006ccc <_sbrk_r>
 8006b80:	6038      	str	r0, [r7, #0]
 8006b82:	4629      	mov	r1, r5
 8006b84:	4630      	mov	r0, r6
 8006b86:	f000 f8a1 	bl	8006ccc <_sbrk_r>
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	d123      	bne.n	8006bd6 <_malloc_r+0x92>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f8d0 	bl	8006d38 <__malloc_unlock>
 8006b98:	e7e3      	b.n	8006b62 <_malloc_r+0x1e>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	1b5b      	subs	r3, r3, r5
 8006b9e:	d417      	bmi.n	8006bd0 <_malloc_r+0x8c>
 8006ba0:	2b0b      	cmp	r3, #11
 8006ba2:	d903      	bls.n	8006bac <_malloc_r+0x68>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	441c      	add	r4, r3
 8006ba8:	6025      	str	r5, [r4, #0]
 8006baa:	e004      	b.n	8006bb6 <_malloc_r+0x72>
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	42a2      	cmp	r2, r4
 8006bb0:	bf0c      	ite	eq
 8006bb2:	600b      	streq	r3, [r1, #0]
 8006bb4:	6053      	strne	r3, [r2, #4]
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f8be 	bl	8006d38 <__malloc_unlock>
 8006bbc:	f104 000b 	add.w	r0, r4, #11
 8006bc0:	1d23      	adds	r3, r4, #4
 8006bc2:	f020 0007 	bic.w	r0, r0, #7
 8006bc6:	1ac2      	subs	r2, r0, r3
 8006bc8:	d0cc      	beq.n	8006b64 <_malloc_r+0x20>
 8006bca:	1a1b      	subs	r3, r3, r0
 8006bcc:	50a3      	str	r3, [r4, r2]
 8006bce:	e7c9      	b.n	8006b64 <_malloc_r+0x20>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	6864      	ldr	r4, [r4, #4]
 8006bd4:	e7cc      	b.n	8006b70 <_malloc_r+0x2c>
 8006bd6:	1cc4      	adds	r4, r0, #3
 8006bd8:	f024 0403 	bic.w	r4, r4, #3
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d0e3      	beq.n	8006ba8 <_malloc_r+0x64>
 8006be0:	1a21      	subs	r1, r4, r0
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f872 	bl	8006ccc <_sbrk_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d1dd      	bne.n	8006ba8 <_malloc_r+0x64>
 8006bec:	e7cf      	b.n	8006b8e <_malloc_r+0x4a>
 8006bee:	bf00      	nop
 8006bf0:	20004a68 	.word	0x20004a68
 8006bf4:	20004a6c 	.word	0x20004a6c

08006bf8 <cleanup_glue>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	6809      	ldr	r1, [r1, #0]
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b109      	cbz	r1, 8006c06 <cleanup_glue+0xe>
 8006c02:	f7ff fff9 	bl	8006bf8 <cleanup_glue>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0e:	f000 b899 	b.w	8006d44 <_free_r>
	...

08006c14 <_reclaim_reent>:
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <_reclaim_reent+0xb4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4283      	cmp	r3, r0
 8006c1a:	b570      	push	{r4, r5, r6, lr}
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	d051      	beq.n	8006cc4 <_reclaim_reent+0xb0>
 8006c20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c22:	b143      	cbz	r3, 8006c36 <_reclaim_reent+0x22>
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d14a      	bne.n	8006cc0 <_reclaim_reent+0xac>
 8006c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c2c:	6819      	ldr	r1, [r3, #0]
 8006c2e:	b111      	cbz	r1, 8006c36 <_reclaim_reent+0x22>
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 f887 	bl	8006d44 <_free_r>
 8006c36:	6961      	ldr	r1, [r4, #20]
 8006c38:	b111      	cbz	r1, 8006c40 <_reclaim_reent+0x2c>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 f882 	bl	8006d44 <_free_r>
 8006c40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c42:	b111      	cbz	r1, 8006c4a <_reclaim_reent+0x36>
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 f87d 	bl	8006d44 <_free_r>
 8006c4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c4c:	b111      	cbz	r1, 8006c54 <_reclaim_reent+0x40>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f000 f878 	bl	8006d44 <_free_r>
 8006c54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c56:	b111      	cbz	r1, 8006c5e <_reclaim_reent+0x4a>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 f873 	bl	8006d44 <_free_r>
 8006c5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c60:	b111      	cbz	r1, 8006c68 <_reclaim_reent+0x54>
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f86e 	bl	8006d44 <_free_r>
 8006c68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c6a:	b111      	cbz	r1, 8006c72 <_reclaim_reent+0x5e>
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 f869 	bl	8006d44 <_free_r>
 8006c72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c74:	b111      	cbz	r1, 8006c7c <_reclaim_reent+0x68>
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f864 	bl	8006d44 <_free_r>
 8006c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7e:	b111      	cbz	r1, 8006c86 <_reclaim_reent+0x72>
 8006c80:	4620      	mov	r0, r4
 8006c82:	f000 f85f 	bl	8006d44 <_free_r>
 8006c86:	69a3      	ldr	r3, [r4, #24]
 8006c88:	b1e3      	cbz	r3, 8006cc4 <_reclaim_reent+0xb0>
 8006c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4798      	blx	r3
 8006c90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c92:	b1b9      	cbz	r1, 8006cc4 <_reclaim_reent+0xb0>
 8006c94:	4620      	mov	r0, r4
 8006c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c9a:	f7ff bfad 	b.w	8006bf8 <cleanup_glue>
 8006c9e:	5949      	ldr	r1, [r1, r5]
 8006ca0:	b941      	cbnz	r1, 8006cb4 <_reclaim_reent+0xa0>
 8006ca2:	3504      	adds	r5, #4
 8006ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca6:	2d80      	cmp	r5, #128	; 0x80
 8006ca8:	68d9      	ldr	r1, [r3, #12]
 8006caa:	d1f8      	bne.n	8006c9e <_reclaim_reent+0x8a>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 f849 	bl	8006d44 <_free_r>
 8006cb2:	e7ba      	b.n	8006c2a <_reclaim_reent+0x16>
 8006cb4:	680e      	ldr	r6, [r1, #0]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f844 	bl	8006d44 <_free_r>
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	e7ef      	b.n	8006ca0 <_reclaim_reent+0x8c>
 8006cc0:	2500      	movs	r5, #0
 8006cc2:	e7ef      	b.n	8006ca4 <_reclaim_reent+0x90>
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000010 	.word	0x20000010

08006ccc <_sbrk_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d06      	ldr	r5, [pc, #24]	; (8006ce8 <_sbrk_r+0x1c>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fa fcea 	bl	80016b0 <_sbrk>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_sbrk_r+0x1a>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_sbrk_r+0x1a>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	20005020 	.word	0x20005020

08006cec <siprintf>:
 8006cec:	b40e      	push	{r1, r2, r3}
 8006cee:	b500      	push	{lr}
 8006cf0:	b09c      	sub	sp, #112	; 0x70
 8006cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf4:	9002      	str	r0, [sp, #8]
 8006cf6:	9006      	str	r0, [sp, #24]
 8006cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cfc:	4809      	ldr	r0, [pc, #36]	; (8006d24 <siprintf+0x38>)
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	9104      	str	r1, [sp, #16]
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <siprintf+0x3c>)
 8006d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	a902      	add	r1, sp, #8
 8006d10:	f000 f8c4 	bl	8006e9c <_svfiprintf_r>
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	b01c      	add	sp, #112	; 0x70
 8006d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d20:	b003      	add	sp, #12
 8006d22:	4770      	bx	lr
 8006d24:	20000010 	.word	0x20000010
 8006d28:	ffff0208 	.word	0xffff0208

08006d2c <__malloc_lock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__malloc_lock+0x8>)
 8006d2e:	f7ff bef1 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	20005018 	.word	0x20005018

08006d38 <__malloc_unlock>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__malloc_unlock+0x8>)
 8006d3a:	f7ff beec 	b.w	8006b16 <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	20005018 	.word	0x20005018

08006d44 <_free_r>:
 8006d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d46:	2900      	cmp	r1, #0
 8006d48:	d048      	beq.n	8006ddc <_free_r+0x98>
 8006d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4e:	9001      	str	r0, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f1a1 0404 	sub.w	r4, r1, #4
 8006d56:	bfb8      	it	lt
 8006d58:	18e4      	addlt	r4, r4, r3
 8006d5a:	f7ff ffe7 	bl	8006d2c <__malloc_lock>
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <_free_r+0x9c>)
 8006d60:	9801      	ldr	r0, [sp, #4]
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	4615      	mov	r5, r2
 8006d66:	b933      	cbnz	r3, 8006d76 <_free_r+0x32>
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6014      	str	r4, [r2, #0]
 8006d6c:	b003      	add	sp, #12
 8006d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d72:	f7ff bfe1 	b.w	8006d38 <__malloc_unlock>
 8006d76:	42a3      	cmp	r3, r4
 8006d78:	d90b      	bls.n	8006d92 <_free_r+0x4e>
 8006d7a:	6821      	ldr	r1, [r4, #0]
 8006d7c:	1862      	adds	r2, r4, r1
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	bf04      	itt	eq
 8006d82:	681a      	ldreq	r2, [r3, #0]
 8006d84:	685b      	ldreq	r3, [r3, #4]
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	bf04      	itt	eq
 8006d8a:	1852      	addeq	r2, r2, r1
 8006d8c:	6022      	streq	r2, [r4, #0]
 8006d8e:	602c      	str	r4, [r5, #0]
 8006d90:	e7ec      	b.n	8006d6c <_free_r+0x28>
 8006d92:	461a      	mov	r2, r3
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b10b      	cbz	r3, 8006d9c <_free_r+0x58>
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d9fa      	bls.n	8006d92 <_free_r+0x4e>
 8006d9c:	6811      	ldr	r1, [r2, #0]
 8006d9e:	1855      	adds	r5, r2, r1
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	d10b      	bne.n	8006dbc <_free_r+0x78>
 8006da4:	6824      	ldr	r4, [r4, #0]
 8006da6:	4421      	add	r1, r4
 8006da8:	1854      	adds	r4, r2, r1
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	d1dd      	bne.n	8006d6c <_free_r+0x28>
 8006db0:	681c      	ldr	r4, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	6053      	str	r3, [r2, #4]
 8006db6:	4421      	add	r1, r4
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	e7d7      	b.n	8006d6c <_free_r+0x28>
 8006dbc:	d902      	bls.n	8006dc4 <_free_r+0x80>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	e7d3      	b.n	8006d6c <_free_r+0x28>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf04      	itt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	bf04      	itt	eq
 8006dd4:	1949      	addeq	r1, r1, r5
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	6054      	str	r4, [r2, #4]
 8006dda:	e7c7      	b.n	8006d6c <_free_r+0x28>
 8006ddc:	b003      	add	sp, #12
 8006dde:	bd30      	pop	{r4, r5, pc}
 8006de0:	20004a68 	.word	0x20004a68

08006de4 <__ssputs_r>:
 8006de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	688e      	ldr	r6, [r1, #8]
 8006dea:	429e      	cmp	r6, r3
 8006dec:	4682      	mov	sl, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	4690      	mov	r8, r2
 8006df2:	461f      	mov	r7, r3
 8006df4:	d838      	bhi.n	8006e68 <__ssputs_r+0x84>
 8006df6:	898a      	ldrh	r2, [r1, #12]
 8006df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dfc:	d032      	beq.n	8006e64 <__ssputs_r+0x80>
 8006dfe:	6825      	ldr	r5, [r4, #0]
 8006e00:	6909      	ldr	r1, [r1, #16]
 8006e02:	eba5 0901 	sub.w	r9, r5, r1
 8006e06:	6965      	ldr	r5, [r4, #20]
 8006e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e10:	3301      	adds	r3, #1
 8006e12:	444b      	add	r3, r9
 8006e14:	106d      	asrs	r5, r5, #1
 8006e16:	429d      	cmp	r5, r3
 8006e18:	bf38      	it	cc
 8006e1a:	461d      	movcc	r5, r3
 8006e1c:	0553      	lsls	r3, r2, #21
 8006e1e:	d531      	bpl.n	8006e84 <__ssputs_r+0xa0>
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7ff fe8f 	bl	8006b44 <_malloc_r>
 8006e26:	4606      	mov	r6, r0
 8006e28:	b950      	cbnz	r0, 8006e40 <__ssputs_r+0x5c>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	f8ca 3000 	str.w	r3, [sl]
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e40:	6921      	ldr	r1, [r4, #16]
 8006e42:	464a      	mov	r2, r9
 8006e44:	f7ff fe68 	bl	8006b18 <memcpy>
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	6126      	str	r6, [r4, #16]
 8006e56:	6165      	str	r5, [r4, #20]
 8006e58:	444e      	add	r6, r9
 8006e5a:	eba5 0509 	sub.w	r5, r5, r9
 8006e5e:	6026      	str	r6, [r4, #0]
 8006e60:	60a5      	str	r5, [r4, #8]
 8006e62:	463e      	mov	r6, r7
 8006e64:	42be      	cmp	r6, r7
 8006e66:	d900      	bls.n	8006e6a <__ssputs_r+0x86>
 8006e68:	463e      	mov	r6, r7
 8006e6a:	4632      	mov	r2, r6
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	4641      	mov	r1, r8
 8006e70:	f000 faa8 	bl	80073c4 <memmove>
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	1b9b      	subs	r3, r3, r6
 8006e7a:	4432      	add	r2, r6
 8006e7c:	60a3      	str	r3, [r4, #8]
 8006e7e:	6022      	str	r2, [r4, #0]
 8006e80:	2000      	movs	r0, #0
 8006e82:	e7db      	b.n	8006e3c <__ssputs_r+0x58>
 8006e84:	462a      	mov	r2, r5
 8006e86:	f000 fab7 	bl	80073f8 <_realloc_r>
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1e1      	bne.n	8006e54 <__ssputs_r+0x70>
 8006e90:	6921      	ldr	r1, [r4, #16]
 8006e92:	4650      	mov	r0, sl
 8006e94:	f7ff ff56 	bl	8006d44 <_free_r>
 8006e98:	e7c7      	b.n	8006e2a <__ssputs_r+0x46>
	...

08006e9c <_svfiprintf_r>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	4698      	mov	r8, r3
 8006ea2:	898b      	ldrh	r3, [r1, #12]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	b09d      	sub	sp, #116	; 0x74
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	460d      	mov	r5, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	d50e      	bpl.n	8006ece <_svfiprintf_r+0x32>
 8006eb0:	690b      	ldr	r3, [r1, #16]
 8006eb2:	b963      	cbnz	r3, 8006ece <_svfiprintf_r+0x32>
 8006eb4:	2140      	movs	r1, #64	; 0x40
 8006eb6:	f7ff fe45 	bl	8006b44 <_malloc_r>
 8006eba:	6028      	str	r0, [r5, #0]
 8006ebc:	6128      	str	r0, [r5, #16]
 8006ebe:	b920      	cbnz	r0, 8006eca <_svfiprintf_r+0x2e>
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e0d1      	b.n	800706e <_svfiprintf_r+0x1d2>
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	616b      	str	r3, [r5, #20]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	2320      	movs	r3, #32
 8006ed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ed8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006edc:	2330      	movs	r3, #48	; 0x30
 8006ede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007088 <_svfiprintf_r+0x1ec>
 8006ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ee6:	f04f 0901 	mov.w	r9, #1
 8006eea:	4623      	mov	r3, r4
 8006eec:	469a      	mov	sl, r3
 8006eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef2:	b10a      	cbz	r2, 8006ef8 <_svfiprintf_r+0x5c>
 8006ef4:	2a25      	cmp	r2, #37	; 0x25
 8006ef6:	d1f9      	bne.n	8006eec <_svfiprintf_r+0x50>
 8006ef8:	ebba 0b04 	subs.w	fp, sl, r4
 8006efc:	d00b      	beq.n	8006f16 <_svfiprintf_r+0x7a>
 8006efe:	465b      	mov	r3, fp
 8006f00:	4622      	mov	r2, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	4638      	mov	r0, r7
 8006f06:	f7ff ff6d 	bl	8006de4 <__ssputs_r>
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f000 80aa 	beq.w	8007064 <_svfiprintf_r+0x1c8>
 8006f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f12:	445a      	add	r2, fp
 8006f14:	9209      	str	r2, [sp, #36]	; 0x24
 8006f16:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80a2 	beq.w	8007064 <_svfiprintf_r+0x1c8>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295
 8006f26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f2a:	f10a 0a01 	add.w	sl, sl, #1
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	9307      	str	r3, [sp, #28]
 8006f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f36:	931a      	str	r3, [sp, #104]	; 0x68
 8006f38:	4654      	mov	r4, sl
 8006f3a:	2205      	movs	r2, #5
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	4851      	ldr	r0, [pc, #324]	; (8007088 <_svfiprintf_r+0x1ec>)
 8006f42:	f7f9 f945 	bl	80001d0 <memchr>
 8006f46:	9a04      	ldr	r2, [sp, #16]
 8006f48:	b9d8      	cbnz	r0, 8006f82 <_svfiprintf_r+0xe6>
 8006f4a:	06d0      	lsls	r0, r2, #27
 8006f4c:	bf44      	itt	mi
 8006f4e:	2320      	movmi	r3, #32
 8006f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f54:	0711      	lsls	r1, r2, #28
 8006f56:	bf44      	itt	mi
 8006f58:	232b      	movmi	r3, #43	; 0x2b
 8006f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d015      	beq.n	8006f92 <_svfiprintf_r+0xf6>
 8006f66:	9a07      	ldr	r2, [sp, #28]
 8006f68:	4654      	mov	r4, sl
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f04f 0c0a 	mov.w	ip, #10
 8006f70:	4621      	mov	r1, r4
 8006f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f76:	3b30      	subs	r3, #48	; 0x30
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d94e      	bls.n	800701a <_svfiprintf_r+0x17e>
 8006f7c:	b1b0      	cbz	r0, 8006fac <_svfiprintf_r+0x110>
 8006f7e:	9207      	str	r2, [sp, #28]
 8006f80:	e014      	b.n	8006fac <_svfiprintf_r+0x110>
 8006f82:	eba0 0308 	sub.w	r3, r0, r8
 8006f86:	fa09 f303 	lsl.w	r3, r9, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	e7d2      	b.n	8006f38 <_svfiprintf_r+0x9c>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	1d19      	adds	r1, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9103      	str	r1, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bfbb      	ittet	lt
 8006f9e:	425b      	neglt	r3, r3
 8006fa0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fa4:	9307      	strge	r3, [sp, #28]
 8006fa6:	9307      	strlt	r3, [sp, #28]
 8006fa8:	bfb8      	it	lt
 8006faa:	9204      	strlt	r2, [sp, #16]
 8006fac:	7823      	ldrb	r3, [r4, #0]
 8006fae:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb0:	d10c      	bne.n	8006fcc <_svfiprintf_r+0x130>
 8006fb2:	7863      	ldrb	r3, [r4, #1]
 8006fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb6:	d135      	bne.n	8007024 <_svfiprintf_r+0x188>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	9203      	str	r2, [sp, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bfb8      	it	lt
 8006fc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc8:	3402      	adds	r4, #2
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007098 <_svfiprintf_r+0x1fc>
 8006fd0:	7821      	ldrb	r1, [r4, #0]
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	f7f9 f8fb 	bl	80001d0 <memchr>
 8006fda:	b140      	cbz	r0, 8006fee <_svfiprintf_r+0x152>
 8006fdc:	2340      	movs	r3, #64	; 0x40
 8006fde:	eba0 000a 	sub.w	r0, r0, sl
 8006fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	4303      	orrs	r3, r0
 8006fea:	3401      	adds	r4, #1
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff2:	4826      	ldr	r0, [pc, #152]	; (800708c <_svfiprintf_r+0x1f0>)
 8006ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff8:	2206      	movs	r2, #6
 8006ffa:	f7f9 f8e9 	bl	80001d0 <memchr>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d038      	beq.n	8007074 <_svfiprintf_r+0x1d8>
 8007002:	4b23      	ldr	r3, [pc, #140]	; (8007090 <_svfiprintf_r+0x1f4>)
 8007004:	bb1b      	cbnz	r3, 800704e <_svfiprintf_r+0x1b2>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	3307      	adds	r3, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	3308      	adds	r3, #8
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	4433      	add	r3, r6
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	e767      	b.n	8006eea <_svfiprintf_r+0x4e>
 800701a:	fb0c 3202 	mla	r2, ip, r2, r3
 800701e:	460c      	mov	r4, r1
 8007020:	2001      	movs	r0, #1
 8007022:	e7a5      	b.n	8006f70 <_svfiprintf_r+0xd4>
 8007024:	2300      	movs	r3, #0
 8007026:	3401      	adds	r4, #1
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	4619      	mov	r1, r3
 800702c:	f04f 0c0a 	mov.w	ip, #10
 8007030:	4620      	mov	r0, r4
 8007032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007036:	3a30      	subs	r2, #48	; 0x30
 8007038:	2a09      	cmp	r2, #9
 800703a:	d903      	bls.n	8007044 <_svfiprintf_r+0x1a8>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0c5      	beq.n	8006fcc <_svfiprintf_r+0x130>
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	e7c3      	b.n	8006fcc <_svfiprintf_r+0x130>
 8007044:	fb0c 2101 	mla	r1, ip, r1, r2
 8007048:	4604      	mov	r4, r0
 800704a:	2301      	movs	r3, #1
 800704c:	e7f0      	b.n	8007030 <_svfiprintf_r+0x194>
 800704e:	ab03      	add	r3, sp, #12
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <_svfiprintf_r+0x1f8>)
 8007056:	a904      	add	r1, sp, #16
 8007058:	4638      	mov	r0, r7
 800705a:	f3af 8000 	nop.w
 800705e:	1c42      	adds	r2, r0, #1
 8007060:	4606      	mov	r6, r0
 8007062:	d1d6      	bne.n	8007012 <_svfiprintf_r+0x176>
 8007064:	89ab      	ldrh	r3, [r5, #12]
 8007066:	065b      	lsls	r3, r3, #25
 8007068:	f53f af2c 	bmi.w	8006ec4 <_svfiprintf_r+0x28>
 800706c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800706e:	b01d      	add	sp, #116	; 0x74
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	ab03      	add	r3, sp, #12
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	462a      	mov	r2, r5
 800707a:	4b06      	ldr	r3, [pc, #24]	; (8007094 <_svfiprintf_r+0x1f8>)
 800707c:	a904      	add	r1, sp, #16
 800707e:	4638      	mov	r0, r7
 8007080:	f000 f87a 	bl	8007178 <_printf_i>
 8007084:	e7eb      	b.n	800705e <_svfiprintf_r+0x1c2>
 8007086:	bf00      	nop
 8007088:	08008f74 	.word	0x08008f74
 800708c:	08008f7e 	.word	0x08008f7e
 8007090:	00000000 	.word	0x00000000
 8007094:	08006de5 	.word	0x08006de5
 8007098:	08008f7a 	.word	0x08008f7a

0800709c <_printf_common>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	4616      	mov	r6, r2
 80070a2:	4699      	mov	r9, r3
 80070a4:	688a      	ldr	r2, [r1, #8]
 80070a6:	690b      	ldr	r3, [r1, #16]
 80070a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bfb8      	it	lt
 80070b0:	4613      	movlt	r3, r2
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070b8:	4607      	mov	r7, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	b10a      	cbz	r2, 80070c2 <_printf_common+0x26>
 80070be:	3301      	adds	r3, #1
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	0699      	lsls	r1, r3, #26
 80070c6:	bf42      	ittt	mi
 80070c8:	6833      	ldrmi	r3, [r6, #0]
 80070ca:	3302      	addmi	r3, #2
 80070cc:	6033      	strmi	r3, [r6, #0]
 80070ce:	6825      	ldr	r5, [r4, #0]
 80070d0:	f015 0506 	ands.w	r5, r5, #6
 80070d4:	d106      	bne.n	80070e4 <_printf_common+0x48>
 80070d6:	f104 0a19 	add.w	sl, r4, #25
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	6832      	ldr	r2, [r6, #0]
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc26      	bgt.n	8007132 <_printf_common+0x96>
 80070e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070e8:	1e13      	subs	r3, r2, #0
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	bf18      	it	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	0692      	lsls	r2, r2, #26
 80070f2:	d42b      	bmi.n	800714c <_printf_common+0xb0>
 80070f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070f8:	4649      	mov	r1, r9
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c0      	blx	r8
 80070fe:	3001      	adds	r0, #1
 8007100:	d01e      	beq.n	8007140 <_printf_common+0xa4>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	68e5      	ldr	r5, [r4, #12]
 8007106:	6832      	ldr	r2, [r6, #0]
 8007108:	f003 0306 	and.w	r3, r3, #6
 800710c:	2b04      	cmp	r3, #4
 800710e:	bf08      	it	eq
 8007110:	1aad      	subeq	r5, r5, r2
 8007112:	68a3      	ldr	r3, [r4, #8]
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	bf0c      	ite	eq
 8007118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800711c:	2500      	movne	r5, #0
 800711e:	4293      	cmp	r3, r2
 8007120:	bfc4      	itt	gt
 8007122:	1a9b      	subgt	r3, r3, r2
 8007124:	18ed      	addgt	r5, r5, r3
 8007126:	2600      	movs	r6, #0
 8007128:	341a      	adds	r4, #26
 800712a:	42b5      	cmp	r5, r6
 800712c:	d11a      	bne.n	8007164 <_printf_common+0xc8>
 800712e:	2000      	movs	r0, #0
 8007130:	e008      	b.n	8007144 <_printf_common+0xa8>
 8007132:	2301      	movs	r3, #1
 8007134:	4652      	mov	r2, sl
 8007136:	4649      	mov	r1, r9
 8007138:	4638      	mov	r0, r7
 800713a:	47c0      	blx	r8
 800713c:	3001      	adds	r0, #1
 800713e:	d103      	bne.n	8007148 <_printf_common+0xac>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	3501      	adds	r5, #1
 800714a:	e7c6      	b.n	80070da <_printf_common+0x3e>
 800714c:	18e1      	adds	r1, r4, r3
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	2030      	movs	r0, #48	; 0x30
 8007152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007156:	4422      	add	r2, r4
 8007158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800715c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007160:	3302      	adds	r3, #2
 8007162:	e7c7      	b.n	80070f4 <_printf_common+0x58>
 8007164:	2301      	movs	r3, #1
 8007166:	4622      	mov	r2, r4
 8007168:	4649      	mov	r1, r9
 800716a:	4638      	mov	r0, r7
 800716c:	47c0      	blx	r8
 800716e:	3001      	adds	r0, #1
 8007170:	d0e6      	beq.n	8007140 <_printf_common+0xa4>
 8007172:	3601      	adds	r6, #1
 8007174:	e7d9      	b.n	800712a <_printf_common+0x8e>
	...

08007178 <_printf_i>:
 8007178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800717c:	460c      	mov	r4, r1
 800717e:	4691      	mov	r9, r2
 8007180:	7e27      	ldrb	r7, [r4, #24]
 8007182:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007184:	2f78      	cmp	r7, #120	; 0x78
 8007186:	4680      	mov	r8, r0
 8007188:	469a      	mov	sl, r3
 800718a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800718e:	d807      	bhi.n	80071a0 <_printf_i+0x28>
 8007190:	2f62      	cmp	r7, #98	; 0x62
 8007192:	d80a      	bhi.n	80071aa <_printf_i+0x32>
 8007194:	2f00      	cmp	r7, #0
 8007196:	f000 80d8 	beq.w	800734a <_printf_i+0x1d2>
 800719a:	2f58      	cmp	r7, #88	; 0x58
 800719c:	f000 80a3 	beq.w	80072e6 <_printf_i+0x16e>
 80071a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071a8:	e03a      	b.n	8007220 <_printf_i+0xa8>
 80071aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071ae:	2b15      	cmp	r3, #21
 80071b0:	d8f6      	bhi.n	80071a0 <_printf_i+0x28>
 80071b2:	a001      	add	r0, pc, #4	; (adr r0, 80071b8 <_printf_i+0x40>)
 80071b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007225 	.word	0x08007225
 80071c0:	080071a1 	.word	0x080071a1
 80071c4:	080071a1 	.word	0x080071a1
 80071c8:	080071a1 	.word	0x080071a1
 80071cc:	080071a1 	.word	0x080071a1
 80071d0:	08007225 	.word	0x08007225
 80071d4:	080071a1 	.word	0x080071a1
 80071d8:	080071a1 	.word	0x080071a1
 80071dc:	080071a1 	.word	0x080071a1
 80071e0:	080071a1 	.word	0x080071a1
 80071e4:	08007331 	.word	0x08007331
 80071e8:	08007255 	.word	0x08007255
 80071ec:	08007313 	.word	0x08007313
 80071f0:	080071a1 	.word	0x080071a1
 80071f4:	080071a1 	.word	0x080071a1
 80071f8:	08007353 	.word	0x08007353
 80071fc:	080071a1 	.word	0x080071a1
 8007200:	08007255 	.word	0x08007255
 8007204:	080071a1 	.word	0x080071a1
 8007208:	080071a1 	.word	0x080071a1
 800720c:	0800731b 	.word	0x0800731b
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	1d1a      	adds	r2, r3, #4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	600a      	str	r2, [r1, #0]
 8007218:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800721c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007220:	2301      	movs	r3, #1
 8007222:	e0a3      	b.n	800736c <_printf_i+0x1f4>
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	6808      	ldr	r0, [r1, #0]
 8007228:	062e      	lsls	r6, r5, #24
 800722a:	f100 0304 	add.w	r3, r0, #4
 800722e:	d50a      	bpl.n	8007246 <_printf_i+0xce>
 8007230:	6805      	ldr	r5, [r0, #0]
 8007232:	600b      	str	r3, [r1, #0]
 8007234:	2d00      	cmp	r5, #0
 8007236:	da03      	bge.n	8007240 <_printf_i+0xc8>
 8007238:	232d      	movs	r3, #45	; 0x2d
 800723a:	426d      	negs	r5, r5
 800723c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007240:	485e      	ldr	r0, [pc, #376]	; (80073bc <_printf_i+0x244>)
 8007242:	230a      	movs	r3, #10
 8007244:	e019      	b.n	800727a <_printf_i+0x102>
 8007246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800724a:	6805      	ldr	r5, [r0, #0]
 800724c:	600b      	str	r3, [r1, #0]
 800724e:	bf18      	it	ne
 8007250:	b22d      	sxthne	r5, r5
 8007252:	e7ef      	b.n	8007234 <_printf_i+0xbc>
 8007254:	680b      	ldr	r3, [r1, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	1d18      	adds	r0, r3, #4
 800725a:	6008      	str	r0, [r1, #0]
 800725c:	0628      	lsls	r0, r5, #24
 800725e:	d501      	bpl.n	8007264 <_printf_i+0xec>
 8007260:	681d      	ldr	r5, [r3, #0]
 8007262:	e002      	b.n	800726a <_printf_i+0xf2>
 8007264:	0669      	lsls	r1, r5, #25
 8007266:	d5fb      	bpl.n	8007260 <_printf_i+0xe8>
 8007268:	881d      	ldrh	r5, [r3, #0]
 800726a:	4854      	ldr	r0, [pc, #336]	; (80073bc <_printf_i+0x244>)
 800726c:	2f6f      	cmp	r7, #111	; 0x6f
 800726e:	bf0c      	ite	eq
 8007270:	2308      	moveq	r3, #8
 8007272:	230a      	movne	r3, #10
 8007274:	2100      	movs	r1, #0
 8007276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800727a:	6866      	ldr	r6, [r4, #4]
 800727c:	60a6      	str	r6, [r4, #8]
 800727e:	2e00      	cmp	r6, #0
 8007280:	bfa2      	ittt	ge
 8007282:	6821      	ldrge	r1, [r4, #0]
 8007284:	f021 0104 	bicge.w	r1, r1, #4
 8007288:	6021      	strge	r1, [r4, #0]
 800728a:	b90d      	cbnz	r5, 8007290 <_printf_i+0x118>
 800728c:	2e00      	cmp	r6, #0
 800728e:	d04d      	beq.n	800732c <_printf_i+0x1b4>
 8007290:	4616      	mov	r6, r2
 8007292:	fbb5 f1f3 	udiv	r1, r5, r3
 8007296:	fb03 5711 	mls	r7, r3, r1, r5
 800729a:	5dc7      	ldrb	r7, [r0, r7]
 800729c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072a0:	462f      	mov	r7, r5
 80072a2:	42bb      	cmp	r3, r7
 80072a4:	460d      	mov	r5, r1
 80072a6:	d9f4      	bls.n	8007292 <_printf_i+0x11a>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d10b      	bne.n	80072c4 <_printf_i+0x14c>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	07df      	lsls	r7, r3, #31
 80072b0:	d508      	bpl.n	80072c4 <_printf_i+0x14c>
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	6861      	ldr	r1, [r4, #4]
 80072b6:	4299      	cmp	r1, r3
 80072b8:	bfde      	ittt	le
 80072ba:	2330      	movle	r3, #48	; 0x30
 80072bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072c4:	1b92      	subs	r2, r2, r6
 80072c6:	6122      	str	r2, [r4, #16]
 80072c8:	f8cd a000 	str.w	sl, [sp]
 80072cc:	464b      	mov	r3, r9
 80072ce:	aa03      	add	r2, sp, #12
 80072d0:	4621      	mov	r1, r4
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7ff fee2 	bl	800709c <_printf_common>
 80072d8:	3001      	adds	r0, #1
 80072da:	d14c      	bne.n	8007376 <_printf_i+0x1fe>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b004      	add	sp, #16
 80072e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e6:	4835      	ldr	r0, [pc, #212]	; (80073bc <_printf_i+0x244>)
 80072e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	680e      	ldr	r6, [r1, #0]
 80072f0:	061f      	lsls	r7, r3, #24
 80072f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80072f6:	600e      	str	r6, [r1, #0]
 80072f8:	d514      	bpl.n	8007324 <_printf_i+0x1ac>
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	bf44      	itt	mi
 80072fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007302:	6023      	strmi	r3, [r4, #0]
 8007304:	b91d      	cbnz	r5, 800730e <_printf_i+0x196>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f023 0320 	bic.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	2310      	movs	r3, #16
 8007310:	e7b0      	b.n	8007274 <_printf_i+0xfc>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f043 0320 	orr.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	2378      	movs	r3, #120	; 0x78
 800731c:	4828      	ldr	r0, [pc, #160]	; (80073c0 <_printf_i+0x248>)
 800731e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007322:	e7e3      	b.n	80072ec <_printf_i+0x174>
 8007324:	065e      	lsls	r6, r3, #25
 8007326:	bf48      	it	mi
 8007328:	b2ad      	uxthmi	r5, r5
 800732a:	e7e6      	b.n	80072fa <_printf_i+0x182>
 800732c:	4616      	mov	r6, r2
 800732e:	e7bb      	b.n	80072a8 <_printf_i+0x130>
 8007330:	680b      	ldr	r3, [r1, #0]
 8007332:	6826      	ldr	r6, [r4, #0]
 8007334:	6960      	ldr	r0, [r4, #20]
 8007336:	1d1d      	adds	r5, r3, #4
 8007338:	600d      	str	r5, [r1, #0]
 800733a:	0635      	lsls	r5, r6, #24
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	d501      	bpl.n	8007344 <_printf_i+0x1cc>
 8007340:	6018      	str	r0, [r3, #0]
 8007342:	e002      	b.n	800734a <_printf_i+0x1d2>
 8007344:	0671      	lsls	r1, r6, #25
 8007346:	d5fb      	bpl.n	8007340 <_printf_i+0x1c8>
 8007348:	8018      	strh	r0, [r3, #0]
 800734a:	2300      	movs	r3, #0
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	4616      	mov	r6, r2
 8007350:	e7ba      	b.n	80072c8 <_printf_i+0x150>
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	1d1a      	adds	r2, r3, #4
 8007356:	600a      	str	r2, [r1, #0]
 8007358:	681e      	ldr	r6, [r3, #0]
 800735a:	6862      	ldr	r2, [r4, #4]
 800735c:	2100      	movs	r1, #0
 800735e:	4630      	mov	r0, r6
 8007360:	f7f8 ff36 	bl	80001d0 <memchr>
 8007364:	b108      	cbz	r0, 800736a <_printf_i+0x1f2>
 8007366:	1b80      	subs	r0, r0, r6
 8007368:	6060      	str	r0, [r4, #4]
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	2300      	movs	r3, #0
 8007370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007374:	e7a8      	b.n	80072c8 <_printf_i+0x150>
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	4632      	mov	r2, r6
 800737a:	4649      	mov	r1, r9
 800737c:	4640      	mov	r0, r8
 800737e:	47d0      	blx	sl
 8007380:	3001      	adds	r0, #1
 8007382:	d0ab      	beq.n	80072dc <_printf_i+0x164>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	079b      	lsls	r3, r3, #30
 8007388:	d413      	bmi.n	80073b2 <_printf_i+0x23a>
 800738a:	68e0      	ldr	r0, [r4, #12]
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	4298      	cmp	r0, r3
 8007390:	bfb8      	it	lt
 8007392:	4618      	movlt	r0, r3
 8007394:	e7a4      	b.n	80072e0 <_printf_i+0x168>
 8007396:	2301      	movs	r3, #1
 8007398:	4632      	mov	r2, r6
 800739a:	4649      	mov	r1, r9
 800739c:	4640      	mov	r0, r8
 800739e:	47d0      	blx	sl
 80073a0:	3001      	adds	r0, #1
 80073a2:	d09b      	beq.n	80072dc <_printf_i+0x164>
 80073a4:	3501      	adds	r5, #1
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	9903      	ldr	r1, [sp, #12]
 80073aa:	1a5b      	subs	r3, r3, r1
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	dcf2      	bgt.n	8007396 <_printf_i+0x21e>
 80073b0:	e7eb      	b.n	800738a <_printf_i+0x212>
 80073b2:	2500      	movs	r5, #0
 80073b4:	f104 0619 	add.w	r6, r4, #25
 80073b8:	e7f5      	b.n	80073a6 <_printf_i+0x22e>
 80073ba:	bf00      	nop
 80073bc:	08008f85 	.word	0x08008f85
 80073c0:	08008f96 	.word	0x08008f96

080073c4 <memmove>:
 80073c4:	4288      	cmp	r0, r1
 80073c6:	b510      	push	{r4, lr}
 80073c8:	eb01 0402 	add.w	r4, r1, r2
 80073cc:	d902      	bls.n	80073d4 <memmove+0x10>
 80073ce:	4284      	cmp	r4, r0
 80073d0:	4623      	mov	r3, r4
 80073d2:	d807      	bhi.n	80073e4 <memmove+0x20>
 80073d4:	1e43      	subs	r3, r0, #1
 80073d6:	42a1      	cmp	r1, r4
 80073d8:	d008      	beq.n	80073ec <memmove+0x28>
 80073da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073e2:	e7f8      	b.n	80073d6 <memmove+0x12>
 80073e4:	4402      	add	r2, r0
 80073e6:	4601      	mov	r1, r0
 80073e8:	428a      	cmp	r2, r1
 80073ea:	d100      	bne.n	80073ee <memmove+0x2a>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073f6:	e7f7      	b.n	80073e8 <memmove+0x24>

080073f8 <_realloc_r>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	4607      	mov	r7, r0
 80073fc:	4614      	mov	r4, r2
 80073fe:	460e      	mov	r6, r1
 8007400:	b921      	cbnz	r1, 800740c <_realloc_r+0x14>
 8007402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007406:	4611      	mov	r1, r2
 8007408:	f7ff bb9c 	b.w	8006b44 <_malloc_r>
 800740c:	b922      	cbnz	r2, 8007418 <_realloc_r+0x20>
 800740e:	f7ff fc99 	bl	8006d44 <_free_r>
 8007412:	4625      	mov	r5, r4
 8007414:	4628      	mov	r0, r5
 8007416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007418:	f000 f814 	bl	8007444 <_malloc_usable_size_r>
 800741c:	42a0      	cmp	r0, r4
 800741e:	d20f      	bcs.n	8007440 <_realloc_r+0x48>
 8007420:	4621      	mov	r1, r4
 8007422:	4638      	mov	r0, r7
 8007424:	f7ff fb8e 	bl	8006b44 <_malloc_r>
 8007428:	4605      	mov	r5, r0
 800742a:	2800      	cmp	r0, #0
 800742c:	d0f2      	beq.n	8007414 <_realloc_r+0x1c>
 800742e:	4631      	mov	r1, r6
 8007430:	4622      	mov	r2, r4
 8007432:	f7ff fb71 	bl	8006b18 <memcpy>
 8007436:	4631      	mov	r1, r6
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff fc83 	bl	8006d44 <_free_r>
 800743e:	e7e9      	b.n	8007414 <_realloc_r+0x1c>
 8007440:	4635      	mov	r5, r6
 8007442:	e7e7      	b.n	8007414 <_realloc_r+0x1c>

08007444 <_malloc_usable_size_r>:
 8007444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007448:	1f18      	subs	r0, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	bfbc      	itt	lt
 800744e:	580b      	ldrlt	r3, [r1, r0]
 8007450:	18c0      	addlt	r0, r0, r3
 8007452:	4770      	bx	lr

08007454 <pow>:
 8007454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007458:	ec59 8b10 	vmov	r8, r9, d0
 800745c:	ec57 6b11 	vmov	r6, r7, d1
 8007460:	f000 f8a6 	bl	80075b0 <__ieee754_pow>
 8007464:	4b4e      	ldr	r3, [pc, #312]	; (80075a0 <pow+0x14c>)
 8007466:	f993 3000 	ldrsb.w	r3, [r3]
 800746a:	3301      	adds	r3, #1
 800746c:	ec55 4b10 	vmov	r4, r5, d0
 8007470:	d015      	beq.n	800749e <pow+0x4a>
 8007472:	4632      	mov	r2, r6
 8007474:	463b      	mov	r3, r7
 8007476:	4630      	mov	r0, r6
 8007478:	4639      	mov	r1, r7
 800747a:	f7f9 fb4f 	bl	8000b1c <__aeabi_dcmpun>
 800747e:	b970      	cbnz	r0, 800749e <pow+0x4a>
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f9 fb48 	bl	8000b1c <__aeabi_dcmpun>
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	b148      	cbz	r0, 80074a6 <pow+0x52>
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 fb0f 	bl	8000ab8 <__aeabi_dcmpeq>
 800749a:	2800      	cmp	r0, #0
 800749c:	d17d      	bne.n	800759a <pow+0x146>
 800749e:	ec45 4b10 	vmov	d0, r4, r5
 80074a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a6:	4640      	mov	r0, r8
 80074a8:	4649      	mov	r1, r9
 80074aa:	f7f9 fb05 	bl	8000ab8 <__aeabi_dcmpeq>
 80074ae:	b1e0      	cbz	r0, 80074ea <pow+0x96>
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f9 fafe 	bl	8000ab8 <__aeabi_dcmpeq>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d16c      	bne.n	800759a <pow+0x146>
 80074c0:	ec47 6b10 	vmov	d0, r6, r7
 80074c4:	f000 fe53 	bl	800816e <finite>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d0e8      	beq.n	800749e <pow+0x4a>
 80074cc:	2200      	movs	r2, #0
 80074ce:	2300      	movs	r3, #0
 80074d0:	4630      	mov	r0, r6
 80074d2:	4639      	mov	r1, r7
 80074d4:	f7f9 fafa 	bl	8000acc <__aeabi_dcmplt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d0e0      	beq.n	800749e <pow+0x4a>
 80074dc:	f7ff faf0 	bl	8006ac0 <__errno>
 80074e0:	2321      	movs	r3, #33	; 0x21
 80074e2:	6003      	str	r3, [r0, #0]
 80074e4:	2400      	movs	r4, #0
 80074e6:	4d2f      	ldr	r5, [pc, #188]	; (80075a4 <pow+0x150>)
 80074e8:	e7d9      	b.n	800749e <pow+0x4a>
 80074ea:	ec45 4b10 	vmov	d0, r4, r5
 80074ee:	f000 fe3e 	bl	800816e <finite>
 80074f2:	bbb8      	cbnz	r0, 8007564 <pow+0x110>
 80074f4:	ec49 8b10 	vmov	d0, r8, r9
 80074f8:	f000 fe39 	bl	800816e <finite>
 80074fc:	b390      	cbz	r0, 8007564 <pow+0x110>
 80074fe:	ec47 6b10 	vmov	d0, r6, r7
 8007502:	f000 fe34 	bl	800816e <finite>
 8007506:	b368      	cbz	r0, 8007564 <pow+0x110>
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 fb04 	bl	8000b1c <__aeabi_dcmpun>
 8007514:	b160      	cbz	r0, 8007530 <pow+0xdc>
 8007516:	f7ff fad3 	bl	8006ac0 <__errno>
 800751a:	2321      	movs	r3, #33	; 0x21
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	f7f9 f989 	bl	800083c <__aeabi_ddiv>
 800752a:	4604      	mov	r4, r0
 800752c:	460d      	mov	r5, r1
 800752e:	e7b6      	b.n	800749e <pow+0x4a>
 8007530:	f7ff fac6 	bl	8006ac0 <__errno>
 8007534:	2322      	movs	r3, #34	; 0x22
 8007536:	6003      	str	r3, [r0, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f9 fac4 	bl	8000acc <__aeabi_dcmplt>
 8007544:	2400      	movs	r4, #0
 8007546:	b158      	cbz	r0, 8007560 <pow+0x10c>
 8007548:	ec47 6b10 	vmov	d0, r6, r7
 800754c:	f000 fe24 	bl	8008198 <rint>
 8007550:	4632      	mov	r2, r6
 8007552:	ec51 0b10 	vmov	r0, r1, d0
 8007556:	463b      	mov	r3, r7
 8007558:	f7f9 faae 	bl	8000ab8 <__aeabi_dcmpeq>
 800755c:	2800      	cmp	r0, #0
 800755e:	d0c2      	beq.n	80074e6 <pow+0x92>
 8007560:	4d11      	ldr	r5, [pc, #68]	; (80075a8 <pow+0x154>)
 8007562:	e79c      	b.n	800749e <pow+0x4a>
 8007564:	2200      	movs	r2, #0
 8007566:	2300      	movs	r3, #0
 8007568:	4620      	mov	r0, r4
 800756a:	4629      	mov	r1, r5
 800756c:	f7f9 faa4 	bl	8000ab8 <__aeabi_dcmpeq>
 8007570:	2800      	cmp	r0, #0
 8007572:	d094      	beq.n	800749e <pow+0x4a>
 8007574:	ec49 8b10 	vmov	d0, r8, r9
 8007578:	f000 fdf9 	bl	800816e <finite>
 800757c:	2800      	cmp	r0, #0
 800757e:	d08e      	beq.n	800749e <pow+0x4a>
 8007580:	ec47 6b10 	vmov	d0, r6, r7
 8007584:	f000 fdf3 	bl	800816e <finite>
 8007588:	2800      	cmp	r0, #0
 800758a:	d088      	beq.n	800749e <pow+0x4a>
 800758c:	f7ff fa98 	bl	8006ac0 <__errno>
 8007590:	2322      	movs	r3, #34	; 0x22
 8007592:	6003      	str	r3, [r0, #0]
 8007594:	2400      	movs	r4, #0
 8007596:	2500      	movs	r5, #0
 8007598:	e781      	b.n	800749e <pow+0x4a>
 800759a:	4d04      	ldr	r5, [pc, #16]	; (80075ac <pow+0x158>)
 800759c:	2400      	movs	r4, #0
 800759e:	e77e      	b.n	800749e <pow+0x4a>
 80075a0:	20000074 	.word	0x20000074
 80075a4:	fff00000 	.word	0xfff00000
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	3ff00000 	.word	0x3ff00000

080075b0 <__ieee754_pow>:
 80075b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	ed2d 8b06 	vpush	{d8-d10}
 80075b8:	b08d      	sub	sp, #52	; 0x34
 80075ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 80075be:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80075c2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80075c6:	ea56 0100 	orrs.w	r1, r6, r0
 80075ca:	ec53 2b10 	vmov	r2, r3, d0
 80075ce:	f000 84d1 	beq.w	8007f74 <__ieee754_pow+0x9c4>
 80075d2:	497f      	ldr	r1, [pc, #508]	; (80077d0 <__ieee754_pow+0x220>)
 80075d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80075d8:	428c      	cmp	r4, r1
 80075da:	ee10 8a10 	vmov	r8, s0
 80075de:	4699      	mov	r9, r3
 80075e0:	dc09      	bgt.n	80075f6 <__ieee754_pow+0x46>
 80075e2:	d103      	bne.n	80075ec <__ieee754_pow+0x3c>
 80075e4:	b97a      	cbnz	r2, 8007606 <__ieee754_pow+0x56>
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	dd02      	ble.n	80075f0 <__ieee754_pow+0x40>
 80075ea:	e00c      	b.n	8007606 <__ieee754_pow+0x56>
 80075ec:	428e      	cmp	r6, r1
 80075ee:	dc02      	bgt.n	80075f6 <__ieee754_pow+0x46>
 80075f0:	428e      	cmp	r6, r1
 80075f2:	d110      	bne.n	8007616 <__ieee754_pow+0x66>
 80075f4:	b178      	cbz	r0, 8007616 <__ieee754_pow+0x66>
 80075f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075fe:	ea54 0308 	orrs.w	r3, r4, r8
 8007602:	f000 84b7 	beq.w	8007f74 <__ieee754_pow+0x9c4>
 8007606:	4873      	ldr	r0, [pc, #460]	; (80077d4 <__ieee754_pow+0x224>)
 8007608:	b00d      	add	sp, #52	; 0x34
 800760a:	ecbd 8b06 	vpop	{d8-d10}
 800760e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007612:	f000 bdb9 	b.w	8008188 <nan>
 8007616:	f1b9 0f00 	cmp.w	r9, #0
 800761a:	da36      	bge.n	800768a <__ieee754_pow+0xda>
 800761c:	496e      	ldr	r1, [pc, #440]	; (80077d8 <__ieee754_pow+0x228>)
 800761e:	428e      	cmp	r6, r1
 8007620:	dc51      	bgt.n	80076c6 <__ieee754_pow+0x116>
 8007622:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007626:	428e      	cmp	r6, r1
 8007628:	f340 84af 	ble.w	8007f8a <__ieee754_pow+0x9da>
 800762c:	1531      	asrs	r1, r6, #20
 800762e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007632:	2914      	cmp	r1, #20
 8007634:	dd0f      	ble.n	8007656 <__ieee754_pow+0xa6>
 8007636:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800763a:	fa20 fc01 	lsr.w	ip, r0, r1
 800763e:	fa0c f101 	lsl.w	r1, ip, r1
 8007642:	4281      	cmp	r1, r0
 8007644:	f040 84a1 	bne.w	8007f8a <__ieee754_pow+0x9da>
 8007648:	f00c 0c01 	and.w	ip, ip, #1
 800764c:	f1cc 0102 	rsb	r1, ip, #2
 8007650:	9100      	str	r1, [sp, #0]
 8007652:	b180      	cbz	r0, 8007676 <__ieee754_pow+0xc6>
 8007654:	e059      	b.n	800770a <__ieee754_pow+0x15a>
 8007656:	2800      	cmp	r0, #0
 8007658:	d155      	bne.n	8007706 <__ieee754_pow+0x156>
 800765a:	f1c1 0114 	rsb	r1, r1, #20
 800765e:	fa46 fc01 	asr.w	ip, r6, r1
 8007662:	fa0c f101 	lsl.w	r1, ip, r1
 8007666:	42b1      	cmp	r1, r6
 8007668:	f040 848c 	bne.w	8007f84 <__ieee754_pow+0x9d4>
 800766c:	f00c 0c01 	and.w	ip, ip, #1
 8007670:	f1cc 0102 	rsb	r1, ip, #2
 8007674:	9100      	str	r1, [sp, #0]
 8007676:	4959      	ldr	r1, [pc, #356]	; (80077dc <__ieee754_pow+0x22c>)
 8007678:	428e      	cmp	r6, r1
 800767a:	d12d      	bne.n	80076d8 <__ieee754_pow+0x128>
 800767c:	2f00      	cmp	r7, #0
 800767e:	da79      	bge.n	8007774 <__ieee754_pow+0x1c4>
 8007680:	4956      	ldr	r1, [pc, #344]	; (80077dc <__ieee754_pow+0x22c>)
 8007682:	2000      	movs	r0, #0
 8007684:	f7f9 f8da 	bl	800083c <__aeabi_ddiv>
 8007688:	e016      	b.n	80076b8 <__ieee754_pow+0x108>
 800768a:	2100      	movs	r1, #0
 800768c:	9100      	str	r1, [sp, #0]
 800768e:	2800      	cmp	r0, #0
 8007690:	d13b      	bne.n	800770a <__ieee754_pow+0x15a>
 8007692:	494f      	ldr	r1, [pc, #316]	; (80077d0 <__ieee754_pow+0x220>)
 8007694:	428e      	cmp	r6, r1
 8007696:	d1ee      	bne.n	8007676 <__ieee754_pow+0xc6>
 8007698:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800769c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80076a0:	ea53 0308 	orrs.w	r3, r3, r8
 80076a4:	f000 8466 	beq.w	8007f74 <__ieee754_pow+0x9c4>
 80076a8:	4b4d      	ldr	r3, [pc, #308]	; (80077e0 <__ieee754_pow+0x230>)
 80076aa:	429c      	cmp	r4, r3
 80076ac:	dd0d      	ble.n	80076ca <__ieee754_pow+0x11a>
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	f280 8464 	bge.w	8007f7c <__ieee754_pow+0x9cc>
 80076b4:	2000      	movs	r0, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	ec41 0b10 	vmov	d0, r0, r1
 80076bc:	b00d      	add	sp, #52	; 0x34
 80076be:	ecbd 8b06 	vpop	{d8-d10}
 80076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c6:	2102      	movs	r1, #2
 80076c8:	e7e0      	b.n	800768c <__ieee754_pow+0xdc>
 80076ca:	2f00      	cmp	r7, #0
 80076cc:	daf2      	bge.n	80076b4 <__ieee754_pow+0x104>
 80076ce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80076d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80076d6:	e7ef      	b.n	80076b8 <__ieee754_pow+0x108>
 80076d8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80076dc:	d104      	bne.n	80076e8 <__ieee754_pow+0x138>
 80076de:	4610      	mov	r0, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	f7f8 ff81 	bl	80005e8 <__aeabi_dmul>
 80076e6:	e7e7      	b.n	80076b8 <__ieee754_pow+0x108>
 80076e8:	493e      	ldr	r1, [pc, #248]	; (80077e4 <__ieee754_pow+0x234>)
 80076ea:	428f      	cmp	r7, r1
 80076ec:	d10d      	bne.n	800770a <__ieee754_pow+0x15a>
 80076ee:	f1b9 0f00 	cmp.w	r9, #0
 80076f2:	db0a      	blt.n	800770a <__ieee754_pow+0x15a>
 80076f4:	ec43 2b10 	vmov	d0, r2, r3
 80076f8:	b00d      	add	sp, #52	; 0x34
 80076fa:	ecbd 8b06 	vpop	{d8-d10}
 80076fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007702:	f000 bc77 	b.w	8007ff4 <__ieee754_sqrt>
 8007706:	2100      	movs	r1, #0
 8007708:	9100      	str	r1, [sp, #0]
 800770a:	ec43 2b10 	vmov	d0, r2, r3
 800770e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007712:	f000 fd23 	bl	800815c <fabs>
 8007716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800771a:	ec51 0b10 	vmov	r0, r1, d0
 800771e:	f1b8 0f00 	cmp.w	r8, #0
 8007722:	d12a      	bne.n	800777a <__ieee754_pow+0x1ca>
 8007724:	b12c      	cbz	r4, 8007732 <__ieee754_pow+0x182>
 8007726:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80077dc <__ieee754_pow+0x22c>
 800772a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800772e:	45e6      	cmp	lr, ip
 8007730:	d123      	bne.n	800777a <__ieee754_pow+0x1ca>
 8007732:	2f00      	cmp	r7, #0
 8007734:	da05      	bge.n	8007742 <__ieee754_pow+0x192>
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	2000      	movs	r0, #0
 800773c:	4927      	ldr	r1, [pc, #156]	; (80077dc <__ieee754_pow+0x22c>)
 800773e:	f7f9 f87d 	bl	800083c <__aeabi_ddiv>
 8007742:	f1b9 0f00 	cmp.w	r9, #0
 8007746:	dab7      	bge.n	80076b8 <__ieee754_pow+0x108>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800774e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007752:	4323      	orrs	r3, r4
 8007754:	d108      	bne.n	8007768 <__ieee754_pow+0x1b8>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4610      	mov	r0, r2
 800775c:	4619      	mov	r1, r3
 800775e:	f7f8 fd8b 	bl	8000278 <__aeabi_dsub>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	e78d      	b.n	8007684 <__ieee754_pow+0xd4>
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d1a4      	bne.n	80076b8 <__ieee754_pow+0x108>
 800776e:	4602      	mov	r2, r0
 8007770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007774:	4610      	mov	r0, r2
 8007776:	4619      	mov	r1, r3
 8007778:	e79e      	b.n	80076b8 <__ieee754_pow+0x108>
 800777a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800777e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007782:	950a      	str	r5, [sp, #40]	; 0x28
 8007784:	9d00      	ldr	r5, [sp, #0]
 8007786:	46ac      	mov	ip, r5
 8007788:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800778a:	ea5c 0505 	orrs.w	r5, ip, r5
 800778e:	d0e4      	beq.n	800775a <__ieee754_pow+0x1aa>
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <__ieee754_pow+0x238>)
 8007792:	429e      	cmp	r6, r3
 8007794:	f340 80fc 	ble.w	8007990 <__ieee754_pow+0x3e0>
 8007798:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800779c:	429e      	cmp	r6, r3
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <__ieee754_pow+0x230>)
 80077a0:	dd07      	ble.n	80077b2 <__ieee754_pow+0x202>
 80077a2:	429c      	cmp	r4, r3
 80077a4:	dc0a      	bgt.n	80077bc <__ieee754_pow+0x20c>
 80077a6:	2f00      	cmp	r7, #0
 80077a8:	da84      	bge.n	80076b4 <__ieee754_pow+0x104>
 80077aa:	a307      	add	r3, pc, #28	; (adr r3, 80077c8 <__ieee754_pow+0x218>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	e795      	b.n	80076de <__ieee754_pow+0x12e>
 80077b2:	429c      	cmp	r4, r3
 80077b4:	dbf7      	blt.n	80077a6 <__ieee754_pow+0x1f6>
 80077b6:	4b09      	ldr	r3, [pc, #36]	; (80077dc <__ieee754_pow+0x22c>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	dd17      	ble.n	80077ec <__ieee754_pow+0x23c>
 80077bc:	2f00      	cmp	r7, #0
 80077be:	dcf4      	bgt.n	80077aa <__ieee754_pow+0x1fa>
 80077c0:	e778      	b.n	80076b4 <__ieee754_pow+0x104>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	8800759c 	.word	0x8800759c
 80077cc:	7e37e43c 	.word	0x7e37e43c
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	08008f79 	.word	0x08008f79
 80077d8:	433fffff 	.word	0x433fffff
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	3fefffff 	.word	0x3fefffff
 80077e4:	3fe00000 	.word	0x3fe00000
 80077e8:	41e00000 	.word	0x41e00000
 80077ec:	4b64      	ldr	r3, [pc, #400]	; (8007980 <__ieee754_pow+0x3d0>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7f8 fd42 	bl	8000278 <__aeabi_dsub>
 80077f4:	a356      	add	r3, pc, #344	; (adr r3, 8007950 <__ieee754_pow+0x3a0>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	4604      	mov	r4, r0
 80077fc:	460d      	mov	r5, r1
 80077fe:	f7f8 fef3 	bl	80005e8 <__aeabi_dmul>
 8007802:	a355      	add	r3, pc, #340	; (adr r3, 8007958 <__ieee754_pow+0x3a8>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	4606      	mov	r6, r0
 800780a:	460f      	mov	r7, r1
 800780c:	4620      	mov	r0, r4
 800780e:	4629      	mov	r1, r5
 8007810:	f7f8 feea 	bl	80005e8 <__aeabi_dmul>
 8007814:	4b5b      	ldr	r3, [pc, #364]	; (8007984 <__ieee754_pow+0x3d4>)
 8007816:	4682      	mov	sl, r0
 8007818:	468b      	mov	fp, r1
 800781a:	2200      	movs	r2, #0
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fee2 	bl	80005e8 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	a14d      	add	r1, pc, #308	; (adr r1, 8007960 <__ieee754_pow+0x3b0>)
 800782a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800782e:	f7f8 fd23 	bl	8000278 <__aeabi_dsub>
 8007832:	4622      	mov	r2, r4
 8007834:	462b      	mov	r3, r5
 8007836:	f7f8 fed7 	bl	80005e8 <__aeabi_dmul>
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	2000      	movs	r0, #0
 8007840:	4951      	ldr	r1, [pc, #324]	; (8007988 <__ieee754_pow+0x3d8>)
 8007842:	f7f8 fd19 	bl	8000278 <__aeabi_dsub>
 8007846:	4622      	mov	r2, r4
 8007848:	4680      	mov	r8, r0
 800784a:	4689      	mov	r9, r1
 800784c:	462b      	mov	r3, r5
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f8 fec9 	bl	80005e8 <__aeabi_dmul>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fec3 	bl	80005e8 <__aeabi_dmul>
 8007862:	a341      	add	r3, pc, #260	; (adr r3, 8007968 <__ieee754_pow+0x3b8>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 febe 	bl	80005e8 <__aeabi_dmul>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4650      	mov	r0, sl
 8007872:	4659      	mov	r1, fp
 8007874:	f7f8 fd00 	bl	8000278 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4680      	mov	r8, r0
 800787e:	4689      	mov	r9, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f8 fcfa 	bl	800027c <__adddf3>
 8007888:	2400      	movs	r4, #0
 800788a:	4632      	mov	r2, r6
 800788c:	463b      	mov	r3, r7
 800788e:	4620      	mov	r0, r4
 8007890:	460d      	mov	r5, r1
 8007892:	f7f8 fcf1 	bl	8000278 <__aeabi_dsub>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fceb 	bl	8000278 <__aeabi_dsub>
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a6:	3b01      	subs	r3, #1
 80078a8:	4313      	orrs	r3, r2
 80078aa:	4682      	mov	sl, r0
 80078ac:	468b      	mov	fp, r1
 80078ae:	f040 81f1 	bne.w	8007c94 <__ieee754_pow+0x6e4>
 80078b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007970 <__ieee754_pow+0x3c0>
 80078b6:	eeb0 8a47 	vmov.f32	s16, s14
 80078ba:	eef0 8a67 	vmov.f32	s17, s15
 80078be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078c2:	2600      	movs	r6, #0
 80078c4:	4632      	mov	r2, r6
 80078c6:	463b      	mov	r3, r7
 80078c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078cc:	f7f8 fcd4 	bl	8000278 <__aeabi_dsub>
 80078d0:	4622      	mov	r2, r4
 80078d2:	462b      	mov	r3, r5
 80078d4:	f7f8 fe88 	bl	80005e8 <__aeabi_dmul>
 80078d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	4650      	mov	r0, sl
 80078e2:	4659      	mov	r1, fp
 80078e4:	f7f8 fe80 	bl	80005e8 <__aeabi_dmul>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4640      	mov	r0, r8
 80078ee:	4649      	mov	r1, r9
 80078f0:	f7f8 fcc4 	bl	800027c <__adddf3>
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	4680      	mov	r8, r0
 80078fa:	4689      	mov	r9, r1
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fe72 	bl	80005e8 <__aeabi_dmul>
 8007904:	460b      	mov	r3, r1
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	4602      	mov	r2, r0
 800790c:	4649      	mov	r1, r9
 800790e:	4640      	mov	r0, r8
 8007910:	f7f8 fcb4 	bl	800027c <__adddf3>
 8007914:	4b1d      	ldr	r3, [pc, #116]	; (800798c <__ieee754_pow+0x3dc>)
 8007916:	4299      	cmp	r1, r3
 8007918:	ec45 4b19 	vmov	d9, r4, r5
 800791c:	4606      	mov	r6, r0
 800791e:	460f      	mov	r7, r1
 8007920:	468b      	mov	fp, r1
 8007922:	f340 82fe 	ble.w	8007f22 <__ieee754_pow+0x972>
 8007926:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800792a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800792e:	4303      	orrs	r3, r0
 8007930:	f000 81f0 	beq.w	8007d14 <__ieee754_pow+0x764>
 8007934:	a310      	add	r3, pc, #64	; (adr r3, 8007978 <__ieee754_pow+0x3c8>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	ec51 0b18 	vmov	r0, r1, d8
 800793e:	f7f8 fe53 	bl	80005e8 <__aeabi_dmul>
 8007942:	a30d      	add	r3, pc, #52	; (adr r3, 8007978 <__ieee754_pow+0x3c8>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	e6cb      	b.n	80076e2 <__ieee754_pow+0x132>
 800794a:	bf00      	nop
 800794c:	f3af 8000 	nop.w
 8007950:	60000000 	.word	0x60000000
 8007954:	3ff71547 	.word	0x3ff71547
 8007958:	f85ddf44 	.word	0xf85ddf44
 800795c:	3e54ae0b 	.word	0x3e54ae0b
 8007960:	55555555 	.word	0x55555555
 8007964:	3fd55555 	.word	0x3fd55555
 8007968:	652b82fe 	.word	0x652b82fe
 800796c:	3ff71547 	.word	0x3ff71547
 8007970:	00000000 	.word	0x00000000
 8007974:	bff00000 	.word	0xbff00000
 8007978:	8800759c 	.word	0x8800759c
 800797c:	7e37e43c 	.word	0x7e37e43c
 8007980:	3ff00000 	.word	0x3ff00000
 8007984:	3fd00000 	.word	0x3fd00000
 8007988:	3fe00000 	.word	0x3fe00000
 800798c:	408fffff 	.word	0x408fffff
 8007990:	4bd7      	ldr	r3, [pc, #860]	; (8007cf0 <__ieee754_pow+0x740>)
 8007992:	ea03 0309 	and.w	r3, r3, r9
 8007996:	2200      	movs	r2, #0
 8007998:	b92b      	cbnz	r3, 80079a6 <__ieee754_pow+0x3f6>
 800799a:	4bd6      	ldr	r3, [pc, #856]	; (8007cf4 <__ieee754_pow+0x744>)
 800799c:	f7f8 fe24 	bl	80005e8 <__aeabi_dmul>
 80079a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80079a4:	460c      	mov	r4, r1
 80079a6:	1523      	asrs	r3, r4, #20
 80079a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80079ac:	4413      	add	r3, r2
 80079ae:	9309      	str	r3, [sp, #36]	; 0x24
 80079b0:	4bd1      	ldr	r3, [pc, #836]	; (8007cf8 <__ieee754_pow+0x748>)
 80079b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80079b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80079ba:	429c      	cmp	r4, r3
 80079bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80079c0:	dd08      	ble.n	80079d4 <__ieee754_pow+0x424>
 80079c2:	4bce      	ldr	r3, [pc, #824]	; (8007cfc <__ieee754_pow+0x74c>)
 80079c4:	429c      	cmp	r4, r3
 80079c6:	f340 8163 	ble.w	8007c90 <__ieee754_pow+0x6e0>
 80079ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079cc:	3301      	adds	r3, #1
 80079ce:	9309      	str	r3, [sp, #36]	; 0x24
 80079d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80079d4:	2400      	movs	r4, #0
 80079d6:	00e3      	lsls	r3, r4, #3
 80079d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079da:	4bc9      	ldr	r3, [pc, #804]	; (8007d00 <__ieee754_pow+0x750>)
 80079dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079e0:	ed93 7b00 	vldr	d7, [r3]
 80079e4:	4629      	mov	r1, r5
 80079e6:	ec53 2b17 	vmov	r2, r3, d7
 80079ea:	eeb0 8a47 	vmov.f32	s16, s14
 80079ee:	eef0 8a67 	vmov.f32	s17, s15
 80079f2:	4682      	mov	sl, r0
 80079f4:	f7f8 fc40 	bl	8000278 <__aeabi_dsub>
 80079f8:	4652      	mov	r2, sl
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	462b      	mov	r3, r5
 8007a00:	ec51 0b18 	vmov	r0, r1, d8
 8007a04:	f7f8 fc3a 	bl	800027c <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	49bd      	ldr	r1, [pc, #756]	; (8007d04 <__ieee754_pow+0x754>)
 8007a10:	f7f8 ff14 	bl	800083c <__aeabi_ddiv>
 8007a14:	ec41 0b19 	vmov	d9, r0, r1
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f8 fde2 	bl	80005e8 <__aeabi_dmul>
 8007a24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a30:	2300      	movs	r3, #0
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007a38:	46ab      	mov	fp, r5
 8007a3a:	106d      	asrs	r5, r5, #1
 8007a3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007a40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007a44:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4614      	mov	r4, r2
 8007a50:	461d      	mov	r5, r3
 8007a52:	f7f8 fdc9 	bl	80005e8 <__aeabi_dmul>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f8 fc0b 	bl	8000278 <__aeabi_dsub>
 8007a62:	ec53 2b18 	vmov	r2, r3, d8
 8007a66:	4606      	mov	r6, r0
 8007a68:	460f      	mov	r7, r1
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	f7f8 fc03 	bl	8000278 <__aeabi_dsub>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4650      	mov	r0, sl
 8007a78:	4659      	mov	r1, fp
 8007a7a:	f7f8 fbfd 	bl	8000278 <__aeabi_dsub>
 8007a7e:	4642      	mov	r2, r8
 8007a80:	464b      	mov	r3, r9
 8007a82:	f7f8 fdb1 	bl	80005e8 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fbf3 	bl	8000278 <__aeabi_dsub>
 8007a92:	ec53 2b19 	vmov	r2, r3, d9
 8007a96:	f7f8 fda7 	bl	80005e8 <__aeabi_dmul>
 8007a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a9e:	ec41 0b18 	vmov	d8, r0, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7f8 fd9f 	bl	80005e8 <__aeabi_dmul>
 8007aaa:	a37d      	add	r3, pc, #500	; (adr r3, 8007ca0 <__ieee754_pow+0x6f0>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	f7f8 fd98 	bl	80005e8 <__aeabi_dmul>
 8007ab8:	a37b      	add	r3, pc, #492	; (adr r3, 8007ca8 <__ieee754_pow+0x6f8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fbdd 	bl	800027c <__adddf3>
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	f7f8 fd8f 	bl	80005e8 <__aeabi_dmul>
 8007aca:	a379      	add	r3, pc, #484	; (adr r3, 8007cb0 <__ieee754_pow+0x700>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f7f8 fbd4 	bl	800027c <__adddf3>
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	f7f8 fd86 	bl	80005e8 <__aeabi_dmul>
 8007adc:	a376      	add	r3, pc, #472	; (adr r3, 8007cb8 <__ieee754_pow+0x708>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f7f8 fbcb 	bl	800027c <__adddf3>
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	f7f8 fd7d 	bl	80005e8 <__aeabi_dmul>
 8007aee:	a374      	add	r3, pc, #464	; (adr r3, 8007cc0 <__ieee754_pow+0x710>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fbc2 	bl	800027c <__adddf3>
 8007af8:	4622      	mov	r2, r4
 8007afa:	462b      	mov	r3, r5
 8007afc:	f7f8 fd74 	bl	80005e8 <__aeabi_dmul>
 8007b00:	a371      	add	r3, pc, #452	; (adr r3, 8007cc8 <__ieee754_pow+0x718>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fbb9 	bl	800027c <__adddf3>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	460f      	mov	r7, r1
 8007b10:	462b      	mov	r3, r5
 8007b12:	4620      	mov	r0, r4
 8007b14:	4629      	mov	r1, r5
 8007b16:	f7f8 fd67 	bl	80005e8 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4639      	mov	r1, r7
 8007b22:	f7f8 fd61 	bl	80005e8 <__aeabi_dmul>
 8007b26:	4642      	mov	r2, r8
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b32:	f7f8 fba3 	bl	800027c <__adddf3>
 8007b36:	ec53 2b18 	vmov	r2, r3, d8
 8007b3a:	f7f8 fd55 	bl	80005e8 <__aeabi_dmul>
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	f7f8 fb9b 	bl	800027c <__adddf3>
 8007b46:	4642      	mov	r2, r8
 8007b48:	4682      	mov	sl, r0
 8007b4a:	468b      	mov	fp, r1
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 fd49 	bl	80005e8 <__aeabi_dmul>
 8007b56:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <__ieee754_pow+0x758>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	f7f8 fb8d 	bl	800027c <__adddf3>
 8007b62:	4652      	mov	r2, sl
 8007b64:	465b      	mov	r3, fp
 8007b66:	f7f8 fb89 	bl	800027c <__adddf3>
 8007b6a:	9c04      	ldr	r4, [sp, #16]
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	4622      	mov	r2, r4
 8007b70:	460b      	mov	r3, r1
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	f7f8 fd37 	bl	80005e8 <__aeabi_dmul>
 8007b7a:	4b63      	ldr	r3, [pc, #396]	; (8007d08 <__ieee754_pow+0x758>)
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4689      	mov	r9, r1
 8007b80:	2200      	movs	r2, #0
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7f8 fb77 	bl	8000278 <__aeabi_dsub>
 8007b8a:	4632      	mov	r2, r6
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	f7f8 fb73 	bl	8000278 <__aeabi_dsub>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4650      	mov	r0, sl
 8007b98:	4659      	mov	r1, fp
 8007b9a:	f7f8 fb6d 	bl	8000278 <__aeabi_dsub>
 8007b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba2:	f7f8 fd21 	bl	80005e8 <__aeabi_dmul>
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	462b      	mov	r3, r5
 8007bae:	ec51 0b18 	vmov	r0, r1, d8
 8007bb2:	f7f8 fd19 	bl	80005e8 <__aeabi_dmul>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fb5d 	bl	800027c <__adddf3>
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb55 	bl	800027c <__adddf3>
 8007bd2:	9c04      	ldr	r4, [sp, #16]
 8007bd4:	a33e      	add	r3, pc, #248	; (adr r3, 8007cd0 <__ieee754_pow+0x720>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	460d      	mov	r5, r1
 8007bde:	f7f8 fd03 	bl	80005e8 <__aeabi_dmul>
 8007be2:	4642      	mov	r2, r8
 8007be4:	ec41 0b18 	vmov	d8, r0, r1
 8007be8:	464b      	mov	r3, r9
 8007bea:	4620      	mov	r0, r4
 8007bec:	4629      	mov	r1, r5
 8007bee:	f7f8 fb43 	bl	8000278 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fb3d 	bl	8000278 <__aeabi_dsub>
 8007bfe:	a336      	add	r3, pc, #216	; (adr r3, 8007cd8 <__ieee754_pow+0x728>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fcf0 	bl	80005e8 <__aeabi_dmul>
 8007c08:	a335      	add	r3, pc, #212	; (adr r3, 8007ce0 <__ieee754_pow+0x730>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460f      	mov	r7, r1
 8007c12:	4620      	mov	r0, r4
 8007c14:	4629      	mov	r1, r5
 8007c16:	f7f8 fce7 	bl	80005e8 <__aeabi_dmul>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4630      	mov	r0, r6
 8007c20:	4639      	mov	r1, r7
 8007c22:	f7f8 fb2b 	bl	800027c <__adddf3>
 8007c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c28:	4b38      	ldr	r3, [pc, #224]	; (8007d0c <__ieee754_pow+0x75c>)
 8007c2a:	4413      	add	r3, r2
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 fb24 	bl	800027c <__adddf3>
 8007c34:	4682      	mov	sl, r0
 8007c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c38:	468b      	mov	fp, r1
 8007c3a:	f7f8 fc6b 	bl	8000514 <__aeabi_i2d>
 8007c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c40:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <__ieee754_pow+0x760>)
 8007c42:	4413      	add	r3, r2
 8007c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c48:	4606      	mov	r6, r0
 8007c4a:	460f      	mov	r7, r1
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	465b      	mov	r3, fp
 8007c50:	ec51 0b18 	vmov	r0, r1, d8
 8007c54:	f7f8 fb12 	bl	800027c <__adddf3>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	f7f8 fb0e 	bl	800027c <__adddf3>
 8007c60:	4632      	mov	r2, r6
 8007c62:	463b      	mov	r3, r7
 8007c64:	f7f8 fb0a 	bl	800027c <__adddf3>
 8007c68:	9c04      	ldr	r4, [sp, #16]
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	4620      	mov	r0, r4
 8007c70:	460d      	mov	r5, r1
 8007c72:	f7f8 fb01 	bl	8000278 <__aeabi_dsub>
 8007c76:	4642      	mov	r2, r8
 8007c78:	464b      	mov	r3, r9
 8007c7a:	f7f8 fafd 	bl	8000278 <__aeabi_dsub>
 8007c7e:	ec53 2b18 	vmov	r2, r3, d8
 8007c82:	f7f8 faf9 	bl	8000278 <__aeabi_dsub>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4650      	mov	r0, sl
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	e606      	b.n	800789e <__ieee754_pow+0x2ee>
 8007c90:	2401      	movs	r4, #1
 8007c92:	e6a0      	b.n	80079d6 <__ieee754_pow+0x426>
 8007c94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007ce8 <__ieee754_pow+0x738>
 8007c98:	e60d      	b.n	80078b6 <__ieee754_pow+0x306>
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	4a454eef 	.word	0x4a454eef
 8007ca4:	3fca7e28 	.word	0x3fca7e28
 8007ca8:	93c9db65 	.word	0x93c9db65
 8007cac:	3fcd864a 	.word	0x3fcd864a
 8007cb0:	a91d4101 	.word	0xa91d4101
 8007cb4:	3fd17460 	.word	0x3fd17460
 8007cb8:	518f264d 	.word	0x518f264d
 8007cbc:	3fd55555 	.word	0x3fd55555
 8007cc0:	db6fabff 	.word	0xdb6fabff
 8007cc4:	3fdb6db6 	.word	0x3fdb6db6
 8007cc8:	33333303 	.word	0x33333303
 8007ccc:	3fe33333 	.word	0x3fe33333
 8007cd0:	e0000000 	.word	0xe0000000
 8007cd4:	3feec709 	.word	0x3feec709
 8007cd8:	dc3a03fd 	.word	0xdc3a03fd
 8007cdc:	3feec709 	.word	0x3feec709
 8007ce0:	145b01f5 	.word	0x145b01f5
 8007ce4:	be3e2fe0 	.word	0xbe3e2fe0
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	43400000 	.word	0x43400000
 8007cf8:	0003988e 	.word	0x0003988e
 8007cfc:	000bb679 	.word	0x000bb679
 8007d00:	08008fa8 	.word	0x08008fa8
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	40080000 	.word	0x40080000
 8007d0c:	08008fc8 	.word	0x08008fc8
 8007d10:	08008fb8 	.word	0x08008fb8
 8007d14:	a3b5      	add	r3, pc, #724	; (adr r3, 8007fec <__ieee754_pow+0xa3c>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 faad 	bl	800027c <__adddf3>
 8007d22:	4622      	mov	r2, r4
 8007d24:	ec41 0b1a 	vmov	d10, r0, r1
 8007d28:	462b      	mov	r3, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 faa3 	bl	8000278 <__aeabi_dsub>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	ec51 0b1a 	vmov	r0, r1, d10
 8007d3a:	f7f8 fee5 	bl	8000b08 <__aeabi_dcmpgt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f47f adf8 	bne.w	8007934 <__ieee754_pow+0x384>
 8007d44:	4aa4      	ldr	r2, [pc, #656]	; (8007fd8 <__ieee754_pow+0xa28>)
 8007d46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	f340 810b 	ble.w	8007f66 <__ieee754_pow+0x9b6>
 8007d50:	151b      	asrs	r3, r3, #20
 8007d52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007d56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007d5a:	fa4a f303 	asr.w	r3, sl, r3
 8007d5e:	445b      	add	r3, fp
 8007d60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007d64:	4e9d      	ldr	r6, [pc, #628]	; (8007fdc <__ieee754_pow+0xa2c>)
 8007d66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d6a:	4116      	asrs	r6, r2
 8007d6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007d70:	2000      	movs	r0, #0
 8007d72:	ea23 0106 	bic.w	r1, r3, r6
 8007d76:	f1c2 0214 	rsb	r2, r2, #20
 8007d7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007d7e:	fa4a fa02 	asr.w	sl, sl, r2
 8007d82:	f1bb 0f00 	cmp.w	fp, #0
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	bfb8      	it	lt
 8007d90:	f1ca 0a00 	rsblt	sl, sl, #0
 8007d94:	f7f8 fa70 	bl	8000278 <__aeabi_dsub>
 8007d98:	ec41 0b19 	vmov	d9, r0, r1
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	ec51 0b19 	vmov	r0, r1, d9
 8007da4:	f7f8 fa6a 	bl	800027c <__adddf3>
 8007da8:	2400      	movs	r4, #0
 8007daa:	a379      	add	r3, pc, #484	; (adr r3, 8007f90 <__ieee754_pow+0x9e0>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	4620      	mov	r0, r4
 8007db2:	460d      	mov	r5, r1
 8007db4:	f7f8 fc18 	bl	80005e8 <__aeabi_dmul>
 8007db8:	ec53 2b19 	vmov	r2, r3, d9
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f7f8 fa58 	bl	8000278 <__aeabi_dsub>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 fa52 	bl	8000278 <__aeabi_dsub>
 8007dd4:	a370      	add	r3, pc, #448	; (adr r3, 8007f98 <__ieee754_pow+0x9e8>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fc05 	bl	80005e8 <__aeabi_dmul>
 8007dde:	a370      	add	r3, pc, #448	; (adr r3, 8007fa0 <__ieee754_pow+0x9f0>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	4620      	mov	r0, r4
 8007dea:	4629      	mov	r1, r5
 8007dec:	f7f8 fbfc 	bl	80005e8 <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 fa40 	bl	800027c <__adddf3>
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	460d      	mov	r5, r1
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4630      	mov	r0, r6
 8007e06:	4639      	mov	r1, r7
 8007e08:	f7f8 fa38 	bl	800027c <__adddf3>
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	4680      	mov	r8, r0
 8007e12:	4689      	mov	r9, r1
 8007e14:	f7f8 fa30 	bl	8000278 <__aeabi_dsub>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4629      	mov	r1, r5
 8007e20:	f7f8 fa2a 	bl	8000278 <__aeabi_dsub>
 8007e24:	4642      	mov	r2, r8
 8007e26:	4606      	mov	r6, r0
 8007e28:	460f      	mov	r7, r1
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fbda 	bl	80005e8 <__aeabi_dmul>
 8007e34:	a35c      	add	r3, pc, #368	; (adr r3, 8007fa8 <__ieee754_pow+0x9f8>)
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	460d      	mov	r5, r1
 8007e3e:	f7f8 fbd3 	bl	80005e8 <__aeabi_dmul>
 8007e42:	a35b      	add	r3, pc, #364	; (adr r3, 8007fb0 <__ieee754_pow+0xa00>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fa16 	bl	8000278 <__aeabi_dsub>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fbca 	bl	80005e8 <__aeabi_dmul>
 8007e54:	a358      	add	r3, pc, #352	; (adr r3, 8007fb8 <__ieee754_pow+0xa08>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 fa0f 	bl	800027c <__adddf3>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fbc1 	bl	80005e8 <__aeabi_dmul>
 8007e66:	a356      	add	r3, pc, #344	; (adr r3, 8007fc0 <__ieee754_pow+0xa10>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 fa04 	bl	8000278 <__aeabi_dsub>
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f7f8 fbb8 	bl	80005e8 <__aeabi_dmul>
 8007e78:	a353      	add	r3, pc, #332	; (adr r3, 8007fc8 <__ieee754_pow+0xa18>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 f9fd 	bl	800027c <__adddf3>
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f7f8 fbaf 	bl	80005e8 <__aeabi_dmul>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 f9f1 	bl	8000278 <__aeabi_dsub>
 8007e96:	4604      	mov	r4, r0
 8007e98:	460d      	mov	r5, r1
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	f7f8 fba1 	bl	80005e8 <__aeabi_dmul>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	ec41 0b19 	vmov	d9, r0, r1
 8007eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f7f8 f9e0 	bl	8000278 <__aeabi_dsub>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	ec51 0b19 	vmov	r0, r1, d9
 8007ec0:	f7f8 fcbc 	bl	800083c <__aeabi_ddiv>
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	463b      	mov	r3, r7
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 fb8a 	bl	80005e8 <__aeabi_dmul>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	f7f8 f9d0 	bl	800027c <__adddf3>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 f9c8 	bl	8000278 <__aeabi_dsub>
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	f7f8 f9c4 	bl	8000278 <__aeabi_dsub>
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	493a      	ldr	r1, [pc, #232]	; (8007fe0 <__ieee754_pow+0xa30>)
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f7f8 f9be 	bl	8000278 <__aeabi_dsub>
 8007efc:	e9cd 0100 	strd	r0, r1, [sp]
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f0a:	da2f      	bge.n	8007f6c <__ieee754_pow+0x9bc>
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	ed9d 0b00 	vldr	d0, [sp]
 8007f12:	f000 f9cd 	bl	80082b0 <scalbn>
 8007f16:	ec51 0b10 	vmov	r0, r1, d0
 8007f1a:	ec53 2b18 	vmov	r2, r3, d8
 8007f1e:	f7ff bbe0 	b.w	80076e2 <__ieee754_pow+0x132>
 8007f22:	4b30      	ldr	r3, [pc, #192]	; (8007fe4 <__ieee754_pow+0xa34>)
 8007f24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007f28:	429e      	cmp	r6, r3
 8007f2a:	f77f af0b 	ble.w	8007d44 <__ieee754_pow+0x794>
 8007f2e:	4b2e      	ldr	r3, [pc, #184]	; (8007fe8 <__ieee754_pow+0xa38>)
 8007f30:	440b      	add	r3, r1
 8007f32:	4303      	orrs	r3, r0
 8007f34:	d00b      	beq.n	8007f4e <__ieee754_pow+0x99e>
 8007f36:	a326      	add	r3, pc, #152	; (adr r3, 8007fd0 <__ieee754_pow+0xa20>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	ec51 0b18 	vmov	r0, r1, d8
 8007f40:	f7f8 fb52 	bl	80005e8 <__aeabi_dmul>
 8007f44:	a322      	add	r3, pc, #136	; (adr r3, 8007fd0 <__ieee754_pow+0xa20>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7ff bbca 	b.w	80076e2 <__ieee754_pow+0x132>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	f7f8 f991 	bl	8000278 <__aeabi_dsub>
 8007f56:	4642      	mov	r2, r8
 8007f58:	464b      	mov	r3, r9
 8007f5a:	f7f8 fdcb 	bl	8000af4 <__aeabi_dcmpge>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aef0 	beq.w	8007d44 <__ieee754_pow+0x794>
 8007f64:	e7e7      	b.n	8007f36 <__ieee754_pow+0x986>
 8007f66:	f04f 0a00 	mov.w	sl, #0
 8007f6a:	e717      	b.n	8007d9c <__ieee754_pow+0x7ec>
 8007f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f70:	4619      	mov	r1, r3
 8007f72:	e7d2      	b.n	8007f1a <__ieee754_pow+0x96a>
 8007f74:	491a      	ldr	r1, [pc, #104]	; (8007fe0 <__ieee754_pow+0xa30>)
 8007f76:	2000      	movs	r0, #0
 8007f78:	f7ff bb9e 	b.w	80076b8 <__ieee754_pow+0x108>
 8007f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f80:	f7ff bb9a 	b.w	80076b8 <__ieee754_pow+0x108>
 8007f84:	9000      	str	r0, [sp, #0]
 8007f86:	f7ff bb76 	b.w	8007676 <__ieee754_pow+0xc6>
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f7ff bb60 	b.w	8007650 <__ieee754_pow+0xa0>
 8007f90:	00000000 	.word	0x00000000
 8007f94:	3fe62e43 	.word	0x3fe62e43
 8007f98:	fefa39ef 	.word	0xfefa39ef
 8007f9c:	3fe62e42 	.word	0x3fe62e42
 8007fa0:	0ca86c39 	.word	0x0ca86c39
 8007fa4:	be205c61 	.word	0xbe205c61
 8007fa8:	72bea4d0 	.word	0x72bea4d0
 8007fac:	3e663769 	.word	0x3e663769
 8007fb0:	c5d26bf1 	.word	0xc5d26bf1
 8007fb4:	3ebbbd41 	.word	0x3ebbbd41
 8007fb8:	af25de2c 	.word	0xaf25de2c
 8007fbc:	3f11566a 	.word	0x3f11566a
 8007fc0:	16bebd93 	.word	0x16bebd93
 8007fc4:	3f66c16c 	.word	0x3f66c16c
 8007fc8:	5555553e 	.word	0x5555553e
 8007fcc:	3fc55555 	.word	0x3fc55555
 8007fd0:	c2f8f359 	.word	0xc2f8f359
 8007fd4:	01a56e1f 	.word	0x01a56e1f
 8007fd8:	3fe00000 	.word	0x3fe00000
 8007fdc:	000fffff 	.word	0x000fffff
 8007fe0:	3ff00000 	.word	0x3ff00000
 8007fe4:	4090cbff 	.word	0x4090cbff
 8007fe8:	3f6f3400 	.word	0x3f6f3400
 8007fec:	652b82fe 	.word	0x652b82fe
 8007ff0:	3c971547 	.word	0x3c971547

08007ff4 <__ieee754_sqrt>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	ec55 4b10 	vmov	r4, r5, d0
 8007ffc:	4e56      	ldr	r6, [pc, #344]	; (8008158 <__ieee754_sqrt+0x164>)
 8007ffe:	43ae      	bics	r6, r5
 8008000:	ee10 0a10 	vmov	r0, s0
 8008004:	ee10 3a10 	vmov	r3, s0
 8008008:	4629      	mov	r1, r5
 800800a:	462a      	mov	r2, r5
 800800c:	d110      	bne.n	8008030 <__ieee754_sqrt+0x3c>
 800800e:	ee10 2a10 	vmov	r2, s0
 8008012:	462b      	mov	r3, r5
 8008014:	f7f8 fae8 	bl	80005e8 <__aeabi_dmul>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 f92c 	bl	800027c <__adddf3>
 8008024:	4604      	mov	r4, r0
 8008026:	460d      	mov	r5, r1
 8008028:	ec45 4b10 	vmov	d0, r4, r5
 800802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008030:	2d00      	cmp	r5, #0
 8008032:	dc10      	bgt.n	8008056 <__ieee754_sqrt+0x62>
 8008034:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008038:	4330      	orrs	r0, r6
 800803a:	d0f5      	beq.n	8008028 <__ieee754_sqrt+0x34>
 800803c:	b15d      	cbz	r5, 8008056 <__ieee754_sqrt+0x62>
 800803e:	ee10 2a10 	vmov	r2, s0
 8008042:	462b      	mov	r3, r5
 8008044:	ee10 0a10 	vmov	r0, s0
 8008048:	f7f8 f916 	bl	8000278 <__aeabi_dsub>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	f7f8 fbf4 	bl	800083c <__aeabi_ddiv>
 8008054:	e7e6      	b.n	8008024 <__ieee754_sqrt+0x30>
 8008056:	1509      	asrs	r1, r1, #20
 8008058:	d076      	beq.n	8008148 <__ieee754_sqrt+0x154>
 800805a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800805e:	07ce      	lsls	r6, r1, #31
 8008060:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008064:	bf5e      	ittt	pl
 8008066:	0fda      	lsrpl	r2, r3, #31
 8008068:	005b      	lslpl	r3, r3, #1
 800806a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800806e:	0fda      	lsrs	r2, r3, #31
 8008070:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008074:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008078:	2000      	movs	r0, #0
 800807a:	106d      	asrs	r5, r5, #1
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	f04f 0e16 	mov.w	lr, #22
 8008082:	4684      	mov	ip, r0
 8008084:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008088:	eb0c 0401 	add.w	r4, ip, r1
 800808c:	4294      	cmp	r4, r2
 800808e:	bfde      	ittt	le
 8008090:	1b12      	suble	r2, r2, r4
 8008092:	eb04 0c01 	addle.w	ip, r4, r1
 8008096:	1840      	addle	r0, r0, r1
 8008098:	0052      	lsls	r2, r2, #1
 800809a:	f1be 0e01 	subs.w	lr, lr, #1
 800809e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80080a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80080a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080aa:	d1ed      	bne.n	8008088 <__ieee754_sqrt+0x94>
 80080ac:	4671      	mov	r1, lr
 80080ae:	2720      	movs	r7, #32
 80080b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80080b4:	4562      	cmp	r2, ip
 80080b6:	eb04 060e 	add.w	r6, r4, lr
 80080ba:	dc02      	bgt.n	80080c2 <__ieee754_sqrt+0xce>
 80080bc:	d113      	bne.n	80080e6 <__ieee754_sqrt+0xf2>
 80080be:	429e      	cmp	r6, r3
 80080c0:	d811      	bhi.n	80080e6 <__ieee754_sqrt+0xf2>
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	eb06 0e04 	add.w	lr, r6, r4
 80080c8:	da43      	bge.n	8008152 <__ieee754_sqrt+0x15e>
 80080ca:	f1be 0f00 	cmp.w	lr, #0
 80080ce:	db40      	blt.n	8008152 <__ieee754_sqrt+0x15e>
 80080d0:	f10c 0801 	add.w	r8, ip, #1
 80080d4:	eba2 020c 	sub.w	r2, r2, ip
 80080d8:	429e      	cmp	r6, r3
 80080da:	bf88      	it	hi
 80080dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80080e0:	1b9b      	subs	r3, r3, r6
 80080e2:	4421      	add	r1, r4
 80080e4:	46c4      	mov	ip, r8
 80080e6:	0052      	lsls	r2, r2, #1
 80080e8:	3f01      	subs	r7, #1
 80080ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80080ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80080f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080f6:	d1dd      	bne.n	80080b4 <__ieee754_sqrt+0xc0>
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d006      	beq.n	800810a <__ieee754_sqrt+0x116>
 80080fc:	1c4c      	adds	r4, r1, #1
 80080fe:	bf13      	iteet	ne
 8008100:	3101      	addne	r1, #1
 8008102:	3001      	addeq	r0, #1
 8008104:	4639      	moveq	r1, r7
 8008106:	f021 0101 	bicne.w	r1, r1, #1
 800810a:	1043      	asrs	r3, r0, #1
 800810c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008110:	0849      	lsrs	r1, r1, #1
 8008112:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008116:	07c2      	lsls	r2, r0, #31
 8008118:	bf48      	it	mi
 800811a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800811e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008122:	460c      	mov	r4, r1
 8008124:	463d      	mov	r5, r7
 8008126:	e77f      	b.n	8008028 <__ieee754_sqrt+0x34>
 8008128:	0ada      	lsrs	r2, r3, #11
 800812a:	3815      	subs	r0, #21
 800812c:	055b      	lsls	r3, r3, #21
 800812e:	2a00      	cmp	r2, #0
 8008130:	d0fa      	beq.n	8008128 <__ieee754_sqrt+0x134>
 8008132:	02d7      	lsls	r7, r2, #11
 8008134:	d50a      	bpl.n	800814c <__ieee754_sqrt+0x158>
 8008136:	f1c1 0420 	rsb	r4, r1, #32
 800813a:	fa23 f404 	lsr.w	r4, r3, r4
 800813e:	1e4d      	subs	r5, r1, #1
 8008140:	408b      	lsls	r3, r1
 8008142:	4322      	orrs	r2, r4
 8008144:	1b41      	subs	r1, r0, r5
 8008146:	e788      	b.n	800805a <__ieee754_sqrt+0x66>
 8008148:	4608      	mov	r0, r1
 800814a:	e7f0      	b.n	800812e <__ieee754_sqrt+0x13a>
 800814c:	0052      	lsls	r2, r2, #1
 800814e:	3101      	adds	r1, #1
 8008150:	e7ef      	b.n	8008132 <__ieee754_sqrt+0x13e>
 8008152:	46e0      	mov	r8, ip
 8008154:	e7be      	b.n	80080d4 <__ieee754_sqrt+0xe0>
 8008156:	bf00      	nop
 8008158:	7ff00000 	.word	0x7ff00000

0800815c <fabs>:
 800815c:	ec51 0b10 	vmov	r0, r1, d0
 8008160:	ee10 2a10 	vmov	r2, s0
 8008164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008168:	ec43 2b10 	vmov	d0, r2, r3
 800816c:	4770      	bx	lr

0800816e <finite>:
 800816e:	b082      	sub	sp, #8
 8008170:	ed8d 0b00 	vstr	d0, [sp]
 8008174:	9801      	ldr	r0, [sp, #4]
 8008176:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800817a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800817e:	0fc0      	lsrs	r0, r0, #31
 8008180:	b002      	add	sp, #8
 8008182:	4770      	bx	lr
 8008184:	0000      	movs	r0, r0
	...

08008188 <nan>:
 8008188:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008190 <nan+0x8>
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	00000000 	.word	0x00000000
 8008194:	7ff80000 	.word	0x7ff80000

08008198 <rint>:
 8008198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800819a:	ec51 0b10 	vmov	r0, r1, d0
 800819e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80081a6:	2e13      	cmp	r6, #19
 80081a8:	ee10 4a10 	vmov	r4, s0
 80081ac:	460b      	mov	r3, r1
 80081ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80081b2:	dc58      	bgt.n	8008266 <rint+0xce>
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	da2b      	bge.n	8008210 <rint+0x78>
 80081b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80081bc:	4302      	orrs	r2, r0
 80081be:	d023      	beq.n	8008208 <rint+0x70>
 80081c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80081c4:	4302      	orrs	r2, r0
 80081c6:	4254      	negs	r4, r2
 80081c8:	4314      	orrs	r4, r2
 80081ca:	0c4b      	lsrs	r3, r1, #17
 80081cc:	0b24      	lsrs	r4, r4, #12
 80081ce:	045b      	lsls	r3, r3, #17
 80081d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80081d4:	ea44 0103 	orr.w	r1, r4, r3
 80081d8:	4b32      	ldr	r3, [pc, #200]	; (80082a4 <rint+0x10c>)
 80081da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80081de:	e9d3 6700 	ldrd	r6, r7, [r3]
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4630      	mov	r0, r6
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7f8 f847 	bl	800027c <__adddf3>
 80081ee:	e9cd 0100 	strd	r0, r1, [sp]
 80081f2:	463b      	mov	r3, r7
 80081f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f8:	4632      	mov	r2, r6
 80081fa:	f7f8 f83d 	bl	8000278 <__aeabi_dsub>
 80081fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008202:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008206:	4639      	mov	r1, r7
 8008208:	ec41 0b10 	vmov	d0, r0, r1
 800820c:	b003      	add	sp, #12
 800820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008210:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <rint+0x110>)
 8008212:	4132      	asrs	r2, r6
 8008214:	ea01 0702 	and.w	r7, r1, r2
 8008218:	4307      	orrs	r7, r0
 800821a:	d0f5      	beq.n	8008208 <rint+0x70>
 800821c:	0851      	lsrs	r1, r2, #1
 800821e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008222:	4314      	orrs	r4, r2
 8008224:	d00c      	beq.n	8008240 <rint+0xa8>
 8008226:	ea23 0201 	bic.w	r2, r3, r1
 800822a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800822e:	2e13      	cmp	r6, #19
 8008230:	fa43 f606 	asr.w	r6, r3, r6
 8008234:	bf0c      	ite	eq
 8008236:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800823a:	2400      	movne	r4, #0
 800823c:	ea42 0306 	orr.w	r3, r2, r6
 8008240:	4918      	ldr	r1, [pc, #96]	; (80082a4 <rint+0x10c>)
 8008242:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008246:	4622      	mov	r2, r4
 8008248:	e9d5 4500 	ldrd	r4, r5, [r5]
 800824c:	4620      	mov	r0, r4
 800824e:	4629      	mov	r1, r5
 8008250:	f7f8 f814 	bl	800027c <__adddf3>
 8008254:	e9cd 0100 	strd	r0, r1, [sp]
 8008258:	e9dd 0100 	ldrd	r0, r1, [sp]
 800825c:	4622      	mov	r2, r4
 800825e:	462b      	mov	r3, r5
 8008260:	f7f8 f80a 	bl	8000278 <__aeabi_dsub>
 8008264:	e7d0      	b.n	8008208 <rint+0x70>
 8008266:	2e33      	cmp	r6, #51	; 0x33
 8008268:	dd07      	ble.n	800827a <rint+0xe2>
 800826a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800826e:	d1cb      	bne.n	8008208 <rint+0x70>
 8008270:	ee10 2a10 	vmov	r2, s0
 8008274:	f7f8 f802 	bl	800027c <__adddf3>
 8008278:	e7c6      	b.n	8008208 <rint+0x70>
 800827a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800827e:	f04f 36ff 	mov.w	r6, #4294967295
 8008282:	40d6      	lsrs	r6, r2
 8008284:	4230      	tst	r0, r6
 8008286:	d0bf      	beq.n	8008208 <rint+0x70>
 8008288:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800828c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008290:	bf1f      	itttt	ne
 8008292:	ea24 0101 	bicne.w	r1, r4, r1
 8008296:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800829a:	fa44 f202 	asrne.w	r2, r4, r2
 800829e:	ea41 0402 	orrne.w	r4, r1, r2
 80082a2:	e7cd      	b.n	8008240 <rint+0xa8>
 80082a4:	08008fd8 	.word	0x08008fd8
 80082a8:	000fffff 	.word	0x000fffff
 80082ac:	00000000 	.word	0x00000000

080082b0 <scalbn>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	ec55 4b10 	vmov	r4, r5, d0
 80082b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80082ba:	4606      	mov	r6, r0
 80082bc:	462b      	mov	r3, r5
 80082be:	b99a      	cbnz	r2, 80082e8 <scalbn+0x38>
 80082c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80082c4:	4323      	orrs	r3, r4
 80082c6:	d036      	beq.n	8008336 <scalbn+0x86>
 80082c8:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <scalbn+0x100>)
 80082ca:	4629      	mov	r1, r5
 80082cc:	ee10 0a10 	vmov	r0, s0
 80082d0:	2200      	movs	r2, #0
 80082d2:	f7f8 f989 	bl	80005e8 <__aeabi_dmul>
 80082d6:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <scalbn+0x104>)
 80082d8:	429e      	cmp	r6, r3
 80082da:	4604      	mov	r4, r0
 80082dc:	460d      	mov	r5, r1
 80082de:	da10      	bge.n	8008302 <scalbn+0x52>
 80082e0:	a32b      	add	r3, pc, #172	; (adr r3, 8008390 <scalbn+0xe0>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	e03a      	b.n	800835e <scalbn+0xae>
 80082e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80082ec:	428a      	cmp	r2, r1
 80082ee:	d10c      	bne.n	800830a <scalbn+0x5a>
 80082f0:	ee10 2a10 	vmov	r2, s0
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f7 ffc0 	bl	800027c <__adddf3>
 80082fc:	4604      	mov	r4, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	e019      	b.n	8008336 <scalbn+0x86>
 8008302:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008306:	460b      	mov	r3, r1
 8008308:	3a36      	subs	r2, #54	; 0x36
 800830a:	4432      	add	r2, r6
 800830c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008310:	428a      	cmp	r2, r1
 8008312:	dd08      	ble.n	8008326 <scalbn+0x76>
 8008314:	2d00      	cmp	r5, #0
 8008316:	a120      	add	r1, pc, #128	; (adr r1, 8008398 <scalbn+0xe8>)
 8008318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831c:	da1c      	bge.n	8008358 <scalbn+0xa8>
 800831e:	a120      	add	r1, pc, #128	; (adr r1, 80083a0 <scalbn+0xf0>)
 8008320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008324:	e018      	b.n	8008358 <scalbn+0xa8>
 8008326:	2a00      	cmp	r2, #0
 8008328:	dd08      	ble.n	800833c <scalbn+0x8c>
 800832a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800832e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008332:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008336:	ec45 4b10 	vmov	d0, r4, r5
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008340:	da19      	bge.n	8008376 <scalbn+0xc6>
 8008342:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008346:	429e      	cmp	r6, r3
 8008348:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800834c:	dd0a      	ble.n	8008364 <scalbn+0xb4>
 800834e:	a112      	add	r1, pc, #72	; (adr r1, 8008398 <scalbn+0xe8>)
 8008350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e2      	bne.n	800831e <scalbn+0x6e>
 8008358:	a30f      	add	r3, pc, #60	; (adr r3, 8008398 <scalbn+0xe8>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f8 f943 	bl	80005e8 <__aeabi_dmul>
 8008362:	e7cb      	b.n	80082fc <scalbn+0x4c>
 8008364:	a10a      	add	r1, pc, #40	; (adr r1, 8008390 <scalbn+0xe0>)
 8008366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0b8      	beq.n	80082e0 <scalbn+0x30>
 800836e:	a10e      	add	r1, pc, #56	; (adr r1, 80083a8 <scalbn+0xf8>)
 8008370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008374:	e7b4      	b.n	80082e0 <scalbn+0x30>
 8008376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800837a:	3236      	adds	r2, #54	; 0x36
 800837c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008380:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008384:	4620      	mov	r0, r4
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <scalbn+0x108>)
 8008388:	2200      	movs	r2, #0
 800838a:	e7e8      	b.n	800835e <scalbn+0xae>
 800838c:	f3af 8000 	nop.w
 8008390:	c2f8f359 	.word	0xc2f8f359
 8008394:	01a56e1f 	.word	0x01a56e1f
 8008398:	8800759c 	.word	0x8800759c
 800839c:	7e37e43c 	.word	0x7e37e43c
 80083a0:	8800759c 	.word	0x8800759c
 80083a4:	fe37e43c 	.word	0xfe37e43c
 80083a8:	c2f8f359 	.word	0xc2f8f359
 80083ac:	81a56e1f 	.word	0x81a56e1f
 80083b0:	43500000 	.word	0x43500000
 80083b4:	ffff3cb0 	.word	0xffff3cb0
 80083b8:	3c900000 	.word	0x3c900000

080083bc <_init>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	bf00      	nop
 80083c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c2:	bc08      	pop	{r3}
 80083c4:	469e      	mov	lr, r3
 80083c6:	4770      	bx	lr

080083c8 <_fini>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	bf00      	nop
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr
