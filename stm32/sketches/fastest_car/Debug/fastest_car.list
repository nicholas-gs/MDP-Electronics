
fastest_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a790  0800a790  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a790  0800a790  0001a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a798  0800a798  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004d30  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004da4  20004da4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020597  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003822  00000000  00000000  0004063b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  00043e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  000453d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ae7  00000000  00000000  00046818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177fc  00000000  00000000  0004d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6c5b  00000000  00000000  00064afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014b756  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060f0  00000000  00000000  0014b7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a49c 	.word	0x0800a49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a49c 	.word	0x0800a49c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Callback function for when USART DMA transmit is done
void DMATransferComplete(DMA_HandleTypeDef* hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
		// Disable the DMA
		huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef+0x24>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <_Z19DMATransferCompleteP19__DMA_HandleTypeDef+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d6a:	615a      	str	r2, [r3, #20]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000218 	.word	0x20000218
 8000d7c:	00000000 	.word	0x00000000

08000d80 <HAL_TIM_IC_CaptureCallback>:
//		osMessageQueuePut(infrared_data_queue, &data, 0U, 0U);
//	}
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	// if the interrupt source is for the ultrasonic echo
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	7f1b      	ldrb	r3, [r3, #28]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	f040 80b0 	bne.w	8000ef2 <HAL_TIM_IC_CaptureCallback+0x172>
	{
		if (Ultrasonic_Is_First_Captured==0) // if the first value is not captured
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2301      	moveq	r3, #1
 8000d9e:	2300      	movne	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d01b      	beq.n	8000dde <HAL_TIM_IC_CaptureCallback+0x5e>
		{
			Ultrasonic_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000da6:	2108      	movs	r1, #8
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f004 f9d7 	bl	800515c <HAL_TIM_ReadCapturedValue>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000db4:	801a      	strh	r2, [r3, #0]
			Ultrasonic_Is_First_Captured = 1;  // set the first captured as true
 8000db6:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6a1a      	ldr	r2, [r3, #32]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000dca:	621a      	str	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a1a      	ldr	r2, [r3, #32]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dda:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
		}
	}
}
 8000ddc:	e089      	b.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0x172>
		else if (Ultrasonic_Is_First_Captured==1)   // if the first is already captured
 8000dde:	4b4a      	ldr	r3, [pc, #296]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	bf0c      	ite	eq
 8000de8:	2301      	moveq	r3, #1
 8000dea:	2300      	movne	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d07f      	beq.n	8000ef2 <HAL_TIM_IC_CaptureCallback+0x172>
			Ultrasonic_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000df2:	2108      	movs	r1, #8
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f004 f9b1 	bl	800515c <HAL_TIM_ReadCapturedValue>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e00:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
			if (Ultrasonic_IC_Val2 > Ultrasonic_IC_Val1)
 8000e0a:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	429a      	cmp	r2, r3
 8000e18:	bf8c      	ite	hi
 8000e1a:	2301      	movhi	r3, #1
 8000e1c:	2300      	movls	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00a      	beq.n	8000e3a <HAL_TIM_IC_CaptureCallback+0xba>
				Ultrasonic_Difference = Ultrasonic_IC_Val2-Ultrasonic_IC_Val1;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	e018      	b.n	8000e6c <HAL_TIM_IC_CaptureCallback+0xec>
			else if (Ultrasonic_IC_Val1 > Ultrasonic_IC_Val2)
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	429a      	cmp	r2, r3
 8000e48:	bf8c      	ite	hi
 8000e4a:	2301      	movhi	r3, #1
 8000e4c:	2300      	movls	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00b      	beq.n	8000e6c <HAL_TIM_IC_CaptureCallback+0xec>
				Ultrasonic_Difference = (0xffff - Ultrasonic_IC_Val1) + Ultrasonic_IC_Val2;
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	4b2a      	ldr	r3, [pc, #168]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000e6a:	801a      	strh	r2, [r3, #0]
			ULTRASONIC_DISTANCE_TYPE distance = ((double)Ultrasonic_Difference * 0.034/2) + ULTRASONIC_OFFSET;
 8000e6c:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb46 	bl	8000504 <__aeabi_ui2d>
 8000e78:	a321      	add	r3, pc, #132	; (adr r3, 8000f00 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fbbb 	bl	80005f8 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	f7ff fcdb 	bl	800084c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000ea4:	f7ff f9f2 	bl	800028c <__adddf3>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	e9c7 2302 	strd	r2, r3, [r7, #8]
			osMessageQueuePut(ultrasonic_readings_queue, &distance, 0U, 0U);
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 0108 	add.w	r1, r7, #8
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f005 ff42 	bl	8006d44 <osMessageQueuePut>
			Ultrasonic_Is_First_Captured = 0; // set it back to false
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a1a      	ldr	r2, [r3, #32]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a12      	ldr	r2, [r2, #32]
 8000ee0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0208 	bic.w	r2, r2, #8
 8000ef0:	60da      	str	r2, [r3, #12]
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	b020c49c 	.word	0xb020c49c
 8000f04:	3fa16872 	.word	0x3fa16872
 8000f08:	200000aa 	.word	0x200000aa
 8000f0c:	200000a4 	.word	0x200000a4
 8000f10:	200000a6 	.word	0x200000a6
 8000f14:	200000a8 	.word	0x200000a8
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	200000ac 	.word	0x200000ac
 8000f20:	200000b0 	.word	0x200000b0

08000f24 <_ZN16Movement_CommandC1Ev>:
struct Movement_Command
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	805a      	strh	r2, [r3, #2]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	809a      	strh	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_UART_RxCpltCallback>:

// Callback function when USART receives data from the RPI.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_UART_RxCpltCallback+0x154>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f040 809d 	bne.w	8001094 <HAL_UART_RxCpltCallback+0x14c>
	{
		bool valid_cmd = false;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
		Movement_Command move_msg;
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ffde 	bl	8000f24 <_ZN16Movement_CommandC1Ev>
		char c1 = rx_buffer[0];
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <HAL_UART_RxCpltCallback+0x158>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	75bb      	strb	r3, [r7, #22]
		char c2 = rx_buffer[1];
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <HAL_UART_RxCpltCallback+0x158>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	757b      	strb	r3, [r7, #21]
		char d[4];
		memcpy(d, (void*)&rx_buffer[2], 3);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2203      	movs	r2, #3
 8000f7a:	494a      	ldr	r1, [pc, #296]	; (80010a4 <HAL_UART_RxCpltCallback+0x15c>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f008 fd61 	bl	8009a44 <memcpy>
		d[3] = '\0';
 8000f82:	2300      	movs	r3, #0
 8000f84:	72fb      	strb	r3, [r7, #11]
		if (c1 == 'F')
 8000f86:	7dbb      	ldrb	r3, [r7, #22]
 8000f88:	2b46      	cmp	r3, #70	; 0x46
 8000f8a:	d135      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0xb0>
		{
			if (c2 == 'W')
 8000f8c:	7d7b      	ldrb	r3, [r7, #21]
 8000f8e:	2b57      	cmp	r3, #87	; 0x57
 8000f90:	d10e      	bne.n	8000fb0 <HAL_UART_RxCpltCallback+0x68>
			{
				move_msg.command = MOVE_FORWARD;
 8000f92:	2301      	movs	r3, #1
 8000f94:	733b      	strb	r3, [r7, #12]
				move_msg.distance_cm = strtol(d, NULL, 10);
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 fede 	bl	8009d60 <strtol>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	81fb      	strh	r3, [r7, #14]
				valid_cmd = true;
 8000faa:	2301      	movs	r3, #1
 8000fac:	75fb      	strb	r3, [r7, #23]
 8000fae:	e05b      	b.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'L')
 8000fb0:	7d7b      	ldrb	r3, [r7, #21]
 8000fb2:	2b4c      	cmp	r3, #76	; 0x4c
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_UART_RxCpltCallback+0x8c>
			{
				move_msg.command = MOVE_FORWARD_LEFT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f008 fecc 	bl	8009d60 <strtol>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
 8000fd2:	e049      	b.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'R')
 8000fd4:	7d7b      	ldrb	r3, [r7, #21]
 8000fd6:	2b52      	cmp	r3, #82	; 0x52
 8000fd8:	d146      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			{
				move_msg.command = MOVE_FORWARD_RIGHT;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f008 feba 	bl	8009d60 <strtol>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
 8000ff6:	e037      	b.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			}
		}
		else if (c1 == 'B')
 8000ff8:	7dbb      	ldrb	r3, [r7, #22]
 8000ffa:	2b42      	cmp	r3, #66	; 0x42
 8000ffc:	d134      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x120>
		{
			if (c2 == 'W')
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	2b57      	cmp	r3, #87	; 0x57
 8001002:	d10e      	bne.n	8001022 <HAL_UART_RxCpltCallback+0xda>
			{
				move_msg.command = MOVE_BACKWARD;
 8001004:	2302      	movs	r3, #2
 8001006:	733b      	strb	r3, [r7, #12]
				move_msg.distance_cm = strtol(d, NULL, 10);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	220a      	movs	r2, #10
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f008 fea5 	bl	8009d60 <strtol>
 8001016:	4603      	mov	r3, r0
 8001018:	b29b      	uxth	r3, r3
 800101a:	81fb      	strh	r3, [r7, #14]
				valid_cmd = true;
 800101c:	2301      	movs	r3, #1
 800101e:	75fb      	strb	r3, [r7, #23]
 8001020:	e022      	b.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'L')
 8001022:	7d7b      	ldrb	r3, [r7, #21]
 8001024:	2b4c      	cmp	r3, #76	; 0x4c
 8001026:	d10e      	bne.n	8001046 <HAL_UART_RxCpltCallback+0xfe>
			{
				move_msg.command = MOVE_BACKWARD_LEFT;
 8001028:	2304      	movs	r3, #4
 800102a:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	220a      	movs	r2, #10
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f008 fe93 	bl	8009d60 <strtol>
 800103a:	4603      	mov	r3, r0
 800103c:	b29b      	uxth	r3, r3
 800103e:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8001040:	2301      	movs	r3, #1
 8001042:	75fb      	strb	r3, [r7, #23]
 8001044:	e010      	b.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			}
			else if (c2 == 'R')
 8001046:	7d7b      	ldrb	r3, [r7, #21]
 8001048:	2b52      	cmp	r3, #82	; 0x52
 800104a:	d10d      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x120>
			{
				move_msg.command = MOVE_BACKWARD_RIGHT;
 800104c:	2306      	movs	r3, #6
 800104e:	733b      	strb	r3, [r7, #12]
				move_msg.angle_deg = strtol(d, NULL, 10);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	220a      	movs	r2, #10
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f008 fe81 	bl	8009d60 <strtol>
 800105e:	4603      	mov	r3, r0
 8001060:	b29b      	uxth	r3, r3
 8001062:	823b      	strh	r3, [r7, #16]
				valid_cmd = true;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
			}
		}
		if (valid_cmd)
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00d      	beq.n	800108a <HAL_UART_RxCpltCallback+0x142>
		{
			started_run = true;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_UART_RxCpltCallback+0x160>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
			stm32_status = COMMAND_RECEIVED_STATUS;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_UART_RxCpltCallback+0x164>)
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
			// Put the command message into the queue
			osMessageQueuePut(movement_command_queue, &move_msg, 0U, 0U);
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_UART_RxCpltCallback+0x168>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	2300      	movs	r3, #0
 8001084:	2200      	movs	r2, #0
 8001086:	f005 fe5d 	bl	8006d44 <osMessageQueuePut>
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, RPI_TO_STM_MSG_SIZE);
 800108a:	2205      	movs	r2, #5
 800108c:	4904      	ldr	r1, [pc, #16]	; (80010a0 <HAL_UART_RxCpltCallback+0x158>)
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <HAL_UART_RxCpltCallback+0x154>)
 8001090:	f004 fe2f 	bl	8005cf2 <HAL_UART_Receive_IT>
	}
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000218 	.word	0x20000218
 80010a0:	20000090 	.word	0x20000090
 80010a4:	20000092 	.word	0x20000092
 80010a8:	2000009d 	.word	0x2000009d
 80010ac:	2000009c 	.word	0x2000009c
 80010b0:	20000098 	.word	0x20000098

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f001 fce0 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f8a4 	bl	8001208 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 fc16 	bl	80018f0 <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 80010c4:	f000 fa50 	bl	8001568 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 80010c8:	f000 f906 	bl	80012d8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80010cc:	f000 f990 	bl	80013f0 <_ZL12MX_TIM2_Initv>
  MX_TIM8_Init();
 80010d0:	f000 fada 	bl	8001688 <_ZL12MX_TIM8_Initv>
  MX_TIM3_Init();
 80010d4:	f000 f9ea 	bl	80014ac <_ZL12MX_TIM3_Initv>
  MX_DMA_Init();
 80010d8:	f000 fbd4 	bl	8001884 <_ZL11MX_DMA_Initv>
  // IMPORTANT! UART_Init must come after DMA_Init.
  // CubeMX has a bug where the order of function call is reversed!!!!
  MX_USART3_UART_Init();
 80010dc:	f000 fba4 	bl	8001828 <_ZL19MX_USART3_UART_Initv>
  // IMPORTANT! ADC1_Init must come after DMA_Init.
  // CubeMX has a bug where the order of function call is reversed!!!!
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  // Init steering PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80010e0:	210c      	movs	r1, #12
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <main+0xf0>)
 80010e4:	f003 f98e 	bl	8004404 <HAL_TIM_PWM_Start>

  // Left Motor Encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <main+0xf4>)
 80010ec:	f003 fc7a 	bl	80049e4 <HAL_TIM_Encoder_Start>
  // Right Motor Encoder
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	482e      	ldr	r0, [pc, #184]	; (80011ac <main+0xf8>)
 80010f4:	f003 fc76 	bl	80049e4 <HAL_TIM_Encoder_Start>

  // Set up the Motors PWM
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80010f8:	2100      	movs	r1, #0
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <main+0xfc>)
 80010fc:	f003 f982 	bl	8004404 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001100:	2104      	movs	r1, #4
 8001102:	482b      	ldr	r0, [pc, #172]	; (80011b0 <main+0xfc>)
 8001104:	f003 f97e 	bl	8004404 <HAL_TIM_PWM_Start>

  // Init DMA send data callback
  HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <main+0x100>)
 800110a:	2100      	movs	r1, #0
 800110c:	482a      	ldr	r0, [pc, #168]	; (80011b8 <main+0x104>)
 800110e:	f002 f8fb 	bl	8003308 <HAL_DMA_RegisterCallback>

  // Init the buffer to receive commands from RPI
  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, RPI_TO_STM_MSG_SIZE);
 8001112:	2205      	movs	r2, #5
 8001114:	4929      	ldr	r1, [pc, #164]	; (80011bc <main+0x108>)
 8001116:	482a      	ldr	r0, [pc, #168]	; (80011c0 <main+0x10c>)
 8001118:	f004 fdeb 	bl	8005cf2 <HAL_UART_Receive_IT>

  // Init interrupts for the timer attached to the ultrasonic sensor echo pin
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800111c:	2108      	movs	r1, #8
 800111e:	4829      	ldr	r0, [pc, #164]	; (80011c4 <main+0x110>)
 8001120:	f003 fa92 	bl	8004648 <HAL_TIM_IC_Start_IT>

  // We have intialized all the hardware components
  stm32_status = COMMAND_READY_STATUS;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <main+0x114>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800112a:	f005 fca1 	bl	8006a70 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  movement_command_queue = osMessageQueueNew(20, sizeof(Movement_Command), NULL);
 800112e:	2200      	movs	r2, #0
 8001130:	2106      	movs	r1, #6
 8001132:	2014      	movs	r0, #20
 8001134:	f005 fd93 	bl	8006c5e <osMessageQueueNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <main+0x118>)
 800113c:	6013      	str	r3, [r2, #0]
  ultrasonic_readings_queue = osMessageQueueNew(10, sizeof(ULTRASONIC_DISTANCE_TYPE), NULL);
 800113e:	2200      	movs	r2, #0
 8001140:	2108      	movs	r1, #8
 8001142:	200a      	movs	r0, #10
 8001144:	f005 fd8b 	bl	8006c5e <osMessageQueueNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <main+0x11c>)
 800114c:	6013      	str	r3, [r2, #0]
  infrared_data_queue = osMessageQueueNew(10, sizeof(Infrared_Data), NULL);
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	200a      	movs	r0, #10
 8001154:	f005 fd83 	bl	8006c5e <osMessageQueueNew>
 8001158:	4603      	mov	r3, r0
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <main+0x120>)
 800115c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <main+0x124>)
 8001160:	2100      	movs	r1, #0
 8001162:	481e      	ldr	r0, [pc, #120]	; (80011dc <main+0x128>)
 8001164:	f005 fcce 	bl	8006b04 <osThreadNew>
 8001168:	4603      	mov	r3, r0
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <main+0x12c>)
 800116c:	6013      	str	r3, [r2, #0]

  /* creation of MovementTask */
  MovementTaskHandle = osThreadNew(movement_task, NULL, &MovementTask_attributes);
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <main+0x130>)
 8001170:	2100      	movs	r1, #0
 8001172:	481d      	ldr	r0, [pc, #116]	; (80011e8 <main+0x134>)
 8001174:	f005 fcc6 	bl	8006b04 <osThreadNew>
 8001178:	4603      	mov	r3, r0
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <main+0x138>)
 800117c:	6013      	str	r3, [r2, #0]

  /* creation of RPITransmitTask */
  RPITransmitTaskHandle = osThreadNew(RPI_Transmit_Task, NULL, &RPITransmitTask_attributes);
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <main+0x13c>)
 8001180:	2100      	movs	r1, #0
 8001182:	481c      	ldr	r0, [pc, #112]	; (80011f4 <main+0x140>)
 8001184:	f005 fcbe 	bl	8006b04 <osThreadNew>
 8001188:	4603      	mov	r3, r0
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <main+0x144>)
 800118c:	6013      	str	r3, [r2, #0]

  /* creation of UltrasonicTask */
  UltrasonicTaskHandle = osThreadNew(ultrasonic_task, NULL, &UltrasonicTask_attributes);
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <main+0x148>)
 8001190:	2100      	movs	r1, #0
 8001192:	481b      	ldr	r0, [pc, #108]	; (8001200 <main+0x14c>)
 8001194:	f005 fcb6 	bl	8006b04 <osThreadNew>
 8001198:	4603      	mov	r3, r0
 800119a:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <main+0x150>)
 800119c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800119e:	f005 fc8b 	bl	8006ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <main+0xee>
 80011a4:	20000188 	.word	0x20000188
 80011a8:	200000f8 	.word	0x200000f8
 80011ac:	20000140 	.word	0x20000140
 80011b0:	200001d0 	.word	0x200001d0
 80011b4:	08000d55 	.word	0x08000d55
 80011b8:	2000025c 	.word	0x2000025c
 80011bc:	20000090 	.word	0x20000090
 80011c0:	20000218 	.word	0x20000218
 80011c4:	200000b0 	.word	0x200000b0
 80011c8:	2000009c 	.word	0x2000009c
 80011cc:	20000098 	.word	0x20000098
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	0800a54c 	.word	0x0800a54c
 80011dc:	08001fbb 	.word	0x08001fbb
 80011e0:	2000031c 	.word	0x2000031c
 80011e4:	0800a570 	.word	0x0800a570
 80011e8:	08001fcd 	.word	0x08001fcd
 80011ec:	20000320 	.word	0x20000320
 80011f0:	0800a594 	.word	0x0800a594
 80011f4:	08002249 	.word	0x08002249
 80011f8:	20000324 	.word	0x20000324
 80011fc:	0800a5b8 	.word	0x0800a5b8
 8001200:	080023b1 	.word	0x080023b1
 8001204:	20000328 	.word	0x20000328

08001208 <_Z18SystemClock_Configv>:

/**
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f008 fc22 	bl	8009a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <_Z18SystemClock_Configv+0xc8>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <_Z18SystemClock_Configv+0xc8>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <_Z18SystemClock_Configv+0xc8>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <_Z18SystemClock_Configv+0xcc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <_Z18SystemClock_Configv+0xcc>)
 8001252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <_Z18SystemClock_Configv+0xcc>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fb2f 	bl	80038dc <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	bf14      	ite	ne
 8001284:	2301      	movne	r3, #1
 8001286:	2300      	moveq	r3, #0
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 800128e:	f001 f8b7 	bl	8002400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001292:	230f      	movs	r3, #15
 8001294:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fd8d 	bl	8003dcc <HAL_RCC_ClockConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80012c2:	f001 f89d 	bl	8002400 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	; 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012f6:	463b      	mov	r3, r7
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001304:	4a39      	ldr	r2, [pc, #228]	; (80013ec <_ZL12MX_TIM1_Initv+0x114>)
 8001306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 800130a:	220f      	movs	r2, #15
 800130c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001314:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001316:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132e:	482e      	ldr	r0, [pc, #184]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001330:	f002 ff4e 	bl	80041d0 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8001344:	f001 f85c 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4619      	mov	r1, r3
 8001354:	4824      	ldr	r0, [pc, #144]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001356:	f003 fe39 	bl	8004fcc <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 800136a:	f001 f849 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001370:	f003 f910 	bl	8004594 <HAL_TIM_IC_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001384:	f001 f83c 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 8001398:	f004 fb7c 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 80013ac:	f001 f828 	bl	8002400 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2208      	movs	r2, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <_ZL12MX_TIM1_Initv+0x110>)
 80013c8:	f003 fca2 	bl	8004d10 <HAL_TIM_IC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 80013dc:	f001 f810 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000b0 	.word	0x200000b0
 80013ec:	40010000 	.word	0x40010000

080013f0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f008 fb2e 	bl	8009a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001434:	2303      	movs	r3, #3
 8001436:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001444:	230a      	movs	r3, #10
 8001446:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001454:	230a      	movs	r3, #10
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001460:	f003 fa1a 	bl	8004898 <HAL_TIM_Encoder_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001474:	f000 ffc4 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <_ZL12MX_TIM2_Initv+0xb8>)
 8001486:	f004 fb05 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800149a:	f000 ffb1 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	; 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000f8 	.word	0x200000f8

080014ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f008 fad0 	bl	8009a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014ca:	4a26      	ldr	r2, [pc, #152]	; (8001564 <_ZL12MX_TIM3_Initv+0xb8>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f6:	2301      	movs	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014fe:	230a      	movs	r3, #10
 8001500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800150e:	230a      	movs	r3, #10
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	4811      	ldr	r0, [pc, #68]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 800151a:	f003 f9bd 	bl	8004898 <HAL_TIM_Encoder_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800152e:	f000 ff67 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <_ZL12MX_TIM3_Initv+0xb4>)
 8001540:	f004 faa8 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001554:	f000 ff54 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000140 	.word	0x20000140
 8001564:	40000400 	.word	0x40000400

08001568 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <_ZL12MX_TIM4_Initv+0x11c>)
 800159c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320-1;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015a0:	f240 123f 	movw	r2, #319	; 0x13f
 80015a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015c0:	482f      	ldr	r0, [pc, #188]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015c2:	f002 fe05 	bl	80041d0 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2300      	moveq	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 80015d6:	f000 ff13 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4826      	ldr	r0, [pc, #152]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 80015e8:	f003 fcf0 	bl	8004fcc <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80015fc:	f000 ff00 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001600:	481f      	ldr	r0, [pc, #124]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 8001602:	f002 fea5 	bl	8004350 <HAL_TIM_PWM_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001616:	f000 fef3 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	4619      	mov	r1, r3
 8001628:	4815      	ldr	r0, [pc, #84]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 800162a:	f004 fa33 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800163e:	f000 fedf 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001642:	2360      	movs	r3, #96	; 0x60
 8001644:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	220c      	movs	r2, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 800165a:	f003 fbf5 	bl	8004e48 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800166e:	f000 fec7 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <_ZL12MX_TIM4_Initv+0x118>)
 8001674:	f001 f80c 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000188 	.word	0x20000188
 8001684:	40000800 	.word	0x40000800

08001688 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2220      	movs	r2, #32
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f008 f9cd 	bl	8009a60 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016c6:	4b56      	ldr	r3, [pc, #344]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016c8:	4a56      	ldr	r2, [pc, #344]	; (8001824 <_ZL12MX_TIM8_Initv+0x19c>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000-1;
 80016d8:	4b51      	ldr	r3, [pc, #324]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016f2:	484b      	ldr	r0, [pc, #300]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80016f4:	f002 fd6c 	bl	80041d0 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8001708:	f000 fe7a 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001716:	4619      	mov	r1, r3
 8001718:	4841      	ldr	r0, [pc, #260]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 800171a:	f003 fc57 	bl	8004fcc <HAL_TIM_ConfigClockSource>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 800172e:	f000 fe67 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001732:	483b      	ldr	r0, [pc, #236]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 8001734:	f002 fe0c 	bl	8004350 <HAL_TIM_PWM_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001748:	f000 fe5a 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001754:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001758:	4619      	mov	r1, r3
 800175a:	4831      	ldr	r0, [pc, #196]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 800175c:	f004 f99a 	bl	8005a94 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8001770:	f000 fe46 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 800179a:	f003 fb55 	bl	8004e48 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 80017ae:	f000 fe27 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	2204      	movs	r2, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4819      	ldr	r0, [pc, #100]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80017bc:	f003 fb44 	bl	8004e48 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	bf14      	ite	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	2300      	moveq	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 80017d0:	f000 fe16 	bl	8002400 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 80017f8:	f004 f9c8 	bl	8005b8c <HAL_TIMEx_ConfigBreakDeadTime>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bf14      	ite	ne
 8001802:	2301      	movne	r3, #1
 8001804:	2300      	moveq	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 800180c:	f000 fdf8 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <_ZL12MX_TIM8_Initv+0x198>)
 8001812:	f000 ff3d 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001816:	bf00      	nop
 8001818:	3758      	adds	r7, #88	; 0x58
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001d0 	.word	0x200001d0
 8001824:	40010400 	.word	0x40010400

08001828 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001860:	f004 f9fa 	bl	8005c58 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001874:	f000 fdc4 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000218 	.word	0x20000218
 8001880:	40004800 	.word	0x40004800

08001884 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a16      	ldr	r2, [pc, #88]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 80018b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <_ZL11MX_DMA_Initv+0x68>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	200e      	movs	r0, #14
 80018c8:	f001 f9d2 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018cc:	200e      	movs	r0, #14
 80018ce:	f001 f9eb 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	2038      	movs	r0, #56	; 0x38
 80018d8:	f001 f9ca 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018dc:	2038      	movs	r0, #56	; 0x38
 80018de:	f001 f9e3 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a3d      	ldr	r2, [pc, #244]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a36      	ldr	r2, [pc, #216]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <_ZL12MX_GPIO_Initv+0x114>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorA_HBridge_1_Pin|MotorA_HBridge_2_Pin|MotorB_HBridge_1_Pin|MotorB_HBridge_2_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	213c      	movs	r1, #60	; 0x3c
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <_ZL12MX_GPIO_Initv+0x118>)
 8001998:	f001 ff86 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ultrasonic_Trig_GPIO_Port, Ultrasonic_Trig_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2110      	movs	r1, #16
 80019a0:	481a      	ldr	r0, [pc, #104]	; (8001a0c <_ZL12MX_GPIO_Initv+0x11c>)
 80019a2:	f001 ff81 	bl	80038a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorA_HBridge_1_Pin MotorA_HBridge_2_Pin MotorB_HBridge_1_Pin MotorB_HBridge_2_Pin */
  GPIO_InitStruct.Pin = MotorA_HBridge_1_Pin|MotorA_HBridge_2_Pin|MotorB_HBridge_1_Pin|MotorB_HBridge_2_Pin;
 80019a6:	233c      	movs	r3, #60	; 0x3c
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <_ZL12MX_GPIO_Initv+0x118>)
 80019be:	f001 fdd7 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <_ZL12MX_GPIO_Initv+0x120>)
 80019dc:	f001 fdc8 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasonic_Trig_Pin */
  GPIO_InitStruct.Pin = Ultrasonic_Trig_Pin;
 80019e0:	2310      	movs	r3, #16
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ultrasonic_Trig_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <_ZL12MX_GPIO_Initv+0x11c>)
 80019f8:	f001 fdba 	bl	8003570 <HAL_GPIO_Init>

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000

08001a14 <_Z17delay_microsecondt>:
/* USER CODE BEGIN 4 */

// Delay the microprocessor. The Timer1 has been set to 1MHZ by the prescalar.
// Thus 1 tick is equal to 1 microsecond.
void delay_microsecond (uint16_t time)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <_Z17delay_microsecondt+0x3c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
	uint16_t dur = time * 2;
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	81fb      	strh	r3, [r7, #14]
	while (__HAL_TIM_GET_COUNTER (&htim1) < dur);
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_Z17delay_microsecondt+0x3c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	bf34      	ite	cc
 8001a38:	2301      	movcc	r3, #1
 8001a3a:	2300      	movcs	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d000      	beq.n	8001a44 <_Z17delay_microsecondt+0x30>
 8001a42:	e7f3      	b.n	8001a2c <_Z17delay_microsecondt+0x18>
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	200000b0 	.word	0x200000b0

08001a54 <_Z11HCSR04_Readv>:

void HCSR04_Read (void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ultrasonic_Trig_GPIO_Port, Ultrasonic_Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	480a      	ldr	r0, [pc, #40]	; (8001a88 <_Z11HCSR04_Readv+0x34>)
 8001a5e:	f001 ff23 	bl	80038a8 <HAL_GPIO_WritePin>
	delay_microsecond(10);  // wait for 10 us
 8001a62:	200a      	movs	r0, #10
 8001a64:	f7ff ffd6 	bl	8001a14 <_Z17delay_microsecondt>
	HAL_GPIO_WritePin(Ultrasonic_Trig_GPIO_Port, Ultrasonic_Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <_Z11HCSR04_Readv+0x34>)
 8001a6e:	f001 ff1b 	bl	80038a8 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3); // Enable interrupts
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <_Z11HCSR04_Readv+0x38>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <_Z11HCSR04_Readv+0x38>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0208 	orr.w	r2, r2, #8
 8001a80:	60da      	str	r2, [r3, #12]
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	200000b0 	.word	0x200000b0

08001a90 <_Z17set_motor_forwardv>:

// Set the H-Bridge to move the wheels forward
void set_motor_forward(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <_Z17set_motor_forwardv+0x30>)
 8001a9a:	f001 ff05 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <_Z17set_motor_forwardv+0x30>)
 8001aa4:	f001 ff00 	bl	80038a8 <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <_Z17set_motor_forwardv+0x30>)
 8001aae:	f001 fefb 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <_Z17set_motor_forwardv+0x30>)
 8001ab8:	f001 fef6 	bl	80038a8 <HAL_GPIO_WritePin>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <_Z18set_motor_backwardv>:

// Set the H-Bridge to move the wheels backward
void set_motor_backward(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2104      	movs	r1, #4
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <_Z18set_motor_backwardv+0x30>)
 8001ace:	f001 feeb 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <_Z18set_motor_backwardv+0x30>)
 8001ad8:	f001 fee6 	bl	80038a8 <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <_Z18set_motor_backwardv+0x30>)
 8001ae2:	f001 fee1 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2120      	movs	r1, #32
 8001aea:	4802      	ldr	r0, [pc, #8]	; (8001af4 <_Z18set_motor_backwardv+0x30>)
 8001aec:	f001 fedc 	bl	80038a8 <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020000 	.word	0x40020000

08001af8 <_Z14set_motor_stopv>:

// Set the H-Bridge to disconnect the wheels from the motor
void set_motor_stop(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  	// Left Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2104      	movs	r1, #4
 8001b00:	4809      	ldr	r0, [pc, #36]	; (8001b28 <_Z14set_motor_stopv+0x30>)
 8001b02:	f001 fed1 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4807      	ldr	r0, [pc, #28]	; (8001b28 <_Z14set_motor_stopv+0x30>)
 8001b0c:	f001 fecc 	bl	80038a8 <HAL_GPIO_WritePin>
	// Right Motor
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <_Z14set_motor_stopv+0x30>)
 8001b16:	f001 fec7 	bl	80038a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <_Z14set_motor_stopv+0x30>)
 8001b20:	f001 fec2 	bl	80038a8 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000

08001b2c <_Z20set_steering_forwardv>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

// Turn the steering forward
void set_steering_forward(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = CENTER_STEERING_PWM;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <_Z20set_steering_forwardv+0x1c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	224b      	movs	r2, #75	; 0x4b
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 8001b38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b3c:	f005 f874 	bl	8006c28 <osDelay>
	disconnect_steering();
 8001b40:	f000 f824 	bl	8001b8c <_Z19disconnect_steeringv>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000188 	.word	0x20000188

08001b4c <_Z18set_steering_rightv>:

// Turn the steering right
void set_steering_right(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = EXTREME_RIGHT_STEERING_PWM;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <_Z18set_steering_rightv+0x1c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	225b      	movs	r2, #91	; 0x5b
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 8001b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b5c:	f005 f864 	bl	8006c28 <osDelay>
	disconnect_steering();
 8001b60:	f000 f814 	bl	8001b8c <_Z19disconnect_steeringv>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000188 	.word	0x20000188

08001b6c <_Z17set_steering_leftv>:

// Turn the steering left
void set_steering_left(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = EXTREME_LEFT_STEERING_PWM;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_Z17set_steering_leftv+0x1c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2231      	movs	r2, #49	; 0x31
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(STEERING_BUFFER_TIME_MS);
 8001b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b7c:	f005 f854 	bl	8006c28 <osDelay>
	disconnect_steering();
 8001b80:	f000 f804 	bl	8001b8c <_Z19disconnect_steeringv>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000188 	.word	0x20000188

08001b8c <_Z19disconnect_steeringv>:

void disconnect_steering(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	htim4.Instance->CCR4 = 0;
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <_Z19disconnect_steeringv+0x18>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(250);
 8001b98:	20fa      	movs	r0, #250	; 0xfa
 8001b9a:	f005 f845 	bl	8006c28 <osDelay>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000188 	.word	0x20000188

08001ba8 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>:
// @param count1: The first timer count
// @param count2: The second timer count
// @param count3: Pointer to the timer handle
// @return The number of counts that elapsed between count1 and count2
uint32_t get_encoder_delta(uint32_t count1, uint32_t count2, TIM_HandleTypeDef* hal_tim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(hal_tim))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	bf0c      	ite	eq
 8001bc2:	2301      	moveq	r3, #1
 8001bc4:	2300      	movne	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00e      	beq.n	8001bea <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x42>
	{
		if (count2 <= count1)
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d803      	bhi.n	8001bdc <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x34>
		{
			return count1 - count2;
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	e014      	b.n	8001c06 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
		else
		{
			return (MOTOR_ENCODER_TIMER_PERIOD - count2) + count1;
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001be6:	33ff      	adds	r3, #255	; 0xff
 8001be8:	e00d      	b.n	8001c06 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
	}
	else
	{
		if (count2 >= count1)
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d303      	bcc.n	8001bfa <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x52>
		{
			return count2 - count1;
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	e005      	b.n	8001c06 <_Z17get_encoder_deltammP17TIM_HandleTypeDef+0x5e>
		}
		else
		{
			return (MOTOR_ENCODER_TIMER_PERIOD - count1) + count2;
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c04:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	0000      	movs	r0, r0
 8001c14:	0000      	movs	r0, r0
	...

08001c18 <_Z25command_to_encoder_counts16Movement_CommandPmS0_>:
// Convert command to encoder wheel encoder count targets.
// Takes care of both straight line movement (where both left & right wheel
// encoder counts are equal), as well as turning, where the
// inner and outer wheels encoder counts are different.
void command_to_encoder_counts(Movement_Command cmd, uint32_t* left_motor_target_ptr, uint32_t* right_motor_target_ptr)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	f107 0408 	add.w	r4, r7, #8
 8001c22:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
	*left_motor_target_ptr = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	*right_motor_target_ptr = 0;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
	if (cmd.command == MOVE_FORWARD || cmd.command == MOVE_BACKWARD)
 8001c36:	7a3b      	ldrb	r3, [r7, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x2a>
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d117      	bne.n	8001c72 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x5a>
	{
		uint32_t ticks = (uint32_t)((double)cmd.distance_cm / (double)DISTANCE_PER_ENCODER_PULSE);
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc5d 	bl	8000504 <__aeabi_ui2d>
 8001c4a:	a3c3      	add	r3, pc, #780	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe fede 	bl	8000a1c <__aeabi_d2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]
		*left_motor_target_ptr = ticks;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]
		*right_motor_target_ptr = ticks;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
		return;
 8001c70:	e169      	b.n	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
	}
	else
	{
		if (cmd.command == MOVE_FORWARD_LEFT)
 8001c72:	7a3b      	ldrb	r3, [r7, #8]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	f040 80b8 	bne.w	8001dea <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x1d2>
		{
			if (cmd.angle_deg == 90)
 8001c7a:	89bb      	ldrh	r3, [r7, #12]
 8001c7c:	2b5a      	cmp	r3, #90	; 0x5a
 8001c7e:	d157      	bne.n	8001d30 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x118>
			{
				*left_motor_target_ptr = (uint32_t)LEFT_TURNING_INNER_TICKS;
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc3e 	bl	8000504 <__aeabi_ui2d>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4bbe      	ldr	r3, [pc, #760]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001c8e:	f7fe fddd 	bl	800084c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	a3ad      	add	r3, pc, #692	; (adr r3, 8001f50 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x338>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcaa 	bl	80005f8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe feb6 	bl	8000a1c <__aeabi_d2uiz>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc26 	bl	8000504 <__aeabi_ui2d>
 8001cb8:	a3a7      	add	r3, pc, #668	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fdc5 	bl	800084c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe fea7 	bl	8000a1c <__aeabi_d2uiz>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	601a      	str	r2, [r3, #0]
				*right_motor_target_ptr = (uint32_t)(LEFT_TURNING_OUTER_TICKS + LEFT_TURNING_90_OUTER_TICKS_OFFSET);
 8001cd4:	89bb      	ldrh	r3, [r7, #12]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc14 	bl	8000504 <__aeabi_ui2d>
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4ba9      	ldr	r3, [pc, #676]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001ce2:	f7fe fdb3 	bl	800084c <__aeabi_ddiv>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4610      	mov	r0, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	a39c      	add	r3, pc, #624	; (adr r3, 8001f60 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x348>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fc80 	bl	80005f8 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	a395      	add	r3, pc, #596	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fda1 	bl	800084c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	a395      	add	r3, pc, #596	; (adr r3, 8001f68 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x350>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fab8 	bl	800028c <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fe7a 	bl	8000a1c <__aeabi_d2uiz>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e10a      	b.n	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
			}
			else if (cmd.angle_deg == 180)
 8001d30:	89bb      	ldrh	r3, [r7, #12]
 8001d32:	2bb4      	cmp	r3, #180	; 0xb4
 8001d34:	f040 8107 	bne.w	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
			{
				*left_motor_target_ptr = (uint32_t)LEFT_TURNING_INNER_TICKS;
 8001d38:	89bb      	ldrh	r3, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fbe2 	bl	8000504 <__aeabi_ui2d>
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b90      	ldr	r3, [pc, #576]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001d46:	f7fe fd81 	bl	800084c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	a37f      	add	r3, pc, #508	; (adr r3, 8001f50 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x338>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc4e 	bl	80005f8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fe5a 	bl	8000a1c <__aeabi_d2uiz>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbca 	bl	8000504 <__aeabi_ui2d>
 8001d70:	a379      	add	r3, pc, #484	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fd69 	bl	800084c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe fe4b 	bl	8000a1c <__aeabi_d2uiz>
 8001d86:	4602      	mov	r2, r0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	601a      	str	r2, [r3, #0]
				*right_motor_target_ptr = (uint32_t)(LEFT_TURNING_OUTER_TICKS + LEFT_TURNING_180_OUTER_TICKS_OFFSET);
 8001d8c:	89bb      	ldrh	r3, [r7, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbb8 	bl	8000504 <__aeabi_ui2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001d9a:	f7fe fd57 	bl	800084c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	a36e      	add	r3, pc, #440	; (adr r3, 8001f60 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x348>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc24 	bl	80005f8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	a367      	add	r3, pc, #412	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fd45 	bl	800084c <__aeabi_ddiv>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f7fe fa5b 	bl	800028c <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe1d 	bl	8000a1c <__aeabi_d2uiz>
 8001de2:	4602      	mov	r2, r0
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e0ad      	b.n	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
			}
		}
		else if(cmd.command == MOVE_FORWARD_RIGHT)
 8001dea:	7a3b      	ldrb	r3, [r7, #8]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	f040 80aa 	bne.w	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
		{
			if (cmd.angle_deg == 90)
 8001df2:	89bb      	ldrh	r3, [r7, #12]
 8001df4:	2b5a      	cmp	r3, #90	; 0x5a
 8001df6:	d152      	bne.n	8001e9e <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x286>
			{
				*right_motor_target_ptr = RIGHT_TURNING_INNER_TICKS;
 8001df8:	89bb      	ldrh	r3, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb82 	bl	8000504 <__aeabi_ui2d>
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b60      	ldr	r3, [pc, #384]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001e06:	f7fe fd21 	bl	800084c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	a357      	add	r3, pc, #348	; (adr r3, 8001f70 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x358>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fbee 	bl	80005f8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	a34c      	add	r3, pc, #304	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fd0f 	bl	800084c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fdf1 	bl	8000a1c <__aeabi_d2uiz>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	601a      	str	r2, [r3, #0]
				*left_motor_target_ptr = (uint32_t)(RIGHT_TURNING_OUTER_TICKS + RIGHT_TURNING_90_OUTER_TICKS_OFFSET);
 8001e40:	89bb      	ldrh	r3, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb5e 	bl	8000504 <__aeabi_ui2d>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001e4e:	f7fe fcfd 	bl	800084c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	a347      	add	r3, pc, #284	; (adr r3, 8001f78 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x360>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbca 	bl	80005f8 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	a33a      	add	r3, pc, #232	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fceb 	bl	800084c <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f7fe fa01 	bl	800028c <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fdc3 	bl	8000a1c <__aeabi_d2uiz>
 8001e96:	4602      	mov	r2, r0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e053      	b.n	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
			}
			else if (cmd.angle_deg == 180)
 8001e9e:	89bb      	ldrh	r3, [r7, #12]
 8001ea0:	2bb4      	cmp	r3, #180	; 0xb4
 8001ea2:	d150      	bne.n	8001f46 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x32e>
			{
				*right_motor_target_ptr = RIGHT_TURNING_INNER_TICKS;
 8001ea4:	89bb      	ldrh	r3, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb2c 	bl	8000504 <__aeabi_ui2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001eb2:	f7fe fccb 	bl	800084c <__aeabi_ddiv>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	a32c      	add	r3, pc, #176	; (adr r3, 8001f70 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x358>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fb98 	bl	80005f8 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	a321      	add	r3, pc, #132	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fcb9 	bl	800084c <__aeabi_ddiv>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fd9b 	bl	8000a1c <__aeabi_d2uiz>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	601a      	str	r2, [r3, #0]
				*left_motor_target_ptr = (uint32_t)(RIGHT_TURNING_OUTER_TICKS + RIGHT_TURNING_180_OUTER_TICKS_OFFSET);
 8001eec:	89bb      	ldrh	r3, [r7, #12]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb08 	bl	8000504 <__aeabi_ui2d>
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x370>)
 8001efa:	f7fe fca7 	bl	800084c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	a31c      	add	r3, pc, #112	; (adr r3, 8001f78 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x360>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	a30f      	add	r3, pc, #60	; (adr r3, 8001f58 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x340>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fc95 	bl	800084c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	a315      	add	r3, pc, #84	; (adr r3, 8001f80 <_Z25command_to_encoder_counts16Movement_CommandPmS0_+0x368>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe f9ac 	bl	800028c <__adddf3>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fd6e 	bl	8000a1c <__aeabi_d2uiz>
 8001f40:	4602      	mov	r2, r0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	f3af 8000 	nop.w
 8001f50:	020c49ba 	.word	0x020c49ba
 8001f54:	405c472b 	.word	0x405c472b
 8001f58:	b0241f9a 	.word	0xb0241f9a
 8001f5c:	3f8c4dde 	.word	0x3f8c4dde
 8001f60:	f3b645a2 	.word	0xf3b645a2
 8001f64:	406ab4fd 	.word	0x406ab4fd
 8001f68:	dc807a58 	.word	0xdc807a58
 8001f6c:	406b2240 	.word	0x406b2240
 8001f70:	ac083127 	.word	0xac083127
 8001f74:	4072da1c 	.word	0x4072da1c
 8001f78:	e5604189 	.word	0xe5604189
 8001f7c:	407922d0 	.word	0x407922d0
 8001f80:	b066c846 	.word	0xb066c846
 8001f84:	4035b500 	.word	0x4035b500
 8001f88:	40768000 	.word	0x40768000

08001f8c <_Z21encoder_within_boundsmm>:

inline bool encoder_within_bounds(uint32_t target, uint32_t delta)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	return (delta >= target) || (target - delta <= ENCODER_DELTA_BOUND);
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d204      	bcs.n	8001fa8 <_Z21encoder_within_boundsmm+0x1c>
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b32      	cmp	r3, #50	; 0x32
 8001fa6:	d801      	bhi.n	8001fac <_Z21encoder_within_boundsmm+0x20>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <_Z21encoder_within_boundsmm+0x22>
 8001fac:	2300      	movs	r3, #0

}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f004 fe30 	bl	8006c28 <osDelay>
 8001fc8:	e7fb      	b.n	8001fc2 <_Z16StartDefaultTaskPv+0x8>
	...

08001fcc <_Z13movement_taskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_movement_task */
void movement_task(void *argument)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b092      	sub	sp, #72	; 0x48
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	uint32_t 	encoder_A_count1, encoder_A_count2, encoder_A_count_delta,
				encoder_B_count1, encoder_B_count2, encoder_B_count_delta;
//	uint32_t 	encoder_A_ticks1, encoder_A_ticks2, encoder_A_ticks_delta,
//				encoder_B_ticks1, encoder_B_ticks2, encoder_B_ticks_delta;

	uint32_t left_motor_target 	= 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
	uint32_t right_motor_target = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
	uint32_t left_motor_delta 	= 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t right_motor_delta 	= 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38

	Movement_Command move_cmd;
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe ff9b 	bl	8000f24 <_ZN16Movement_CommandC1Ev>
	bool toMove = false;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// Disconnect the Motor First
	set_motor_stop();
 8001ff4:	f7ff fd80 	bl	8001af8 <_Z14set_motor_stopv>

	// Set the front wheels to point forward
	set_steering_forward();
 8001ff8:	f7ff fd98 	bl	8001b2c <_Z20set_steering_forwardv>

	// Set initial values for count and ticks for both encoders
	encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001ffc:	4b8d      	ldr	r3, [pc, #564]	; (8002234 <_Z13movement_taskPv+0x268>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
//	encoder_A_ticks1 = HAL_GetTick();
	encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <_Z13movement_taskPv+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
//	encoder_B_ticks1 = HAL_GetTick();

  /* Infinite loop */
  for(;;)
  {
	  if (!toMove)
 800200c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d045      	beq.n	80020a6 <_Z13movement_taskPv+0xda>
	  {
		  osStatus_t status = osMessageQueueGet(movement_command_queue, &move_cmd, NULL, 0);
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <_Z13movement_taskPv+0x270>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f107 0108 	add.w	r1, r7, #8
 8002022:	2300      	movs	r3, #0
 8002024:	2200      	movs	r2, #0
 8002026:	f004 feed 	bl	8006e04 <osMessageQueueGet>
 800202a:	62b8      	str	r0, [r7, #40]	; 0x28
		  if (status == osOK)
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d139      	bne.n	80020a6 <_Z13movement_taskPv+0xda>
		  {

			  // Set H-bridge
			  // Change the H-Bridge settings
			  if (move_cmd.command == MOVE_BACKWARD || move_cmd.command == MOVE_BACKWARD_LEFT
 8002032:	7a3b      	ldrb	r3, [r7, #8]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d005      	beq.n	8002044 <_Z13movement_taskPv+0x78>
 8002038:	7a3b      	ldrb	r3, [r7, #8]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d002      	beq.n	8002044 <_Z13movement_taskPv+0x78>
					  || move_cmd.command == MOVE_BACKWARD_RIGHT)
 800203e:	7a3b      	ldrb	r3, [r7, #8]
 8002040:	2b06      	cmp	r3, #6
 8002042:	d102      	bne.n	800204a <_Z13movement_taskPv+0x7e>
			  {
				  set_motor_backward();
 8002044:	f7ff fd3e 	bl	8001ac4 <_Z18set_motor_backwardv>
 8002048:	e001      	b.n	800204e <_Z13movement_taskPv+0x82>
			  }
			  else
			  {
				  set_motor_forward();
 800204a:	f7ff fd21 	bl	8001a90 <_Z17set_motor_forwardv>
			  }

			  // Set steering
			  if (move_cmd.command == MOVE_FORWARD || move_cmd.command == MOVE_BACKWARD)
 800204e:	7a3b      	ldrb	r3, [r7, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d002      	beq.n	800205a <_Z13movement_taskPv+0x8e>
 8002054:	7a3b      	ldrb	r3, [r7, #8]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d102      	bne.n	8002060 <_Z13movement_taskPv+0x94>
			  {
				  set_steering_forward();
 800205a:	f7ff fd67 	bl	8001b2c <_Z20set_steering_forwardv>
 800205e:	e00a      	b.n	8002076 <_Z13movement_taskPv+0xaa>
			  }
			  else if (move_cmd.command == MOVE_FORWARD_LEFT || move_cmd.command == MOVE_BACKWARD_LEFT)
 8002060:	7a3b      	ldrb	r3, [r7, #8]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d002      	beq.n	800206c <_Z13movement_taskPv+0xa0>
 8002066:	7a3b      	ldrb	r3, [r7, #8]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d102      	bne.n	8002072 <_Z13movement_taskPv+0xa6>
			  {
				  set_steering_left();
 800206c:	f7ff fd7e 	bl	8001b6c <_Z17set_steering_leftv>
 8002070:	e001      	b.n	8002076 <_Z13movement_taskPv+0xaa>
			  }
			  else
			  {
				  set_steering_right();
 8002072:	f7ff fd6b 	bl	8001b4c <_Z18set_steering_rightv>
			  }

			  // Calculate the ticks set points for both motors
			  command_to_encoder_counts(move_cmd, &left_motor_target, &right_motor_target);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	f107 0214 	add.w	r2, r7, #20
 800207e:	f107 0108 	add.w	r1, r7, #8
 8002082:	c903      	ldmia	r1, {r0, r1}
 8002084:	f7ff fdc8 	bl	8001c18 <_Z25command_to_encoder_counts16Movement_CommandPmS0_>

	  	  	  // Reset the other values
			  left_motor_delta 	= 0;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
			  right_motor_delta 	= 0;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38

	  		  // Reset the encoder value
	  	  	  encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <_Z13movement_taskPv+0x268>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
//	  	  	  encoder_A_ticks1 = HAL_GetTick();
	  	  	  encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002098:	4b67      	ldr	r3, [pc, #412]	; (8002238 <_Z13movement_taskPv+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	643b      	str	r3, [r7, #64]	; 0x40
//	  	  	  encoder_B_ticks1 = HAL_GetTick();


			  toMove = true;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  }
	  }

	  if (toMove)
 80020a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80b5 	beq.w	800221a <_Z13movement_taskPv+0x24e>
	  {
		  	  stm32_status = COMMAND_EXECUTING_STATUS;
 80020b0:	4b63      	ldr	r3, [pc, #396]	; (8002240 <_Z13movement_taskPv+0x274>)
 80020b2:	2203      	movs	r2, #3
 80020b4:	701a      	strb	r2, [r3, #0]

		  	  encoder_A_count2 = __HAL_TIM_GET_COUNTER(&htim2);
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <_Z13movement_taskPv+0x268>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
//		  	  encoder_A_ticks2 = HAL_GetTick();
		  	  encoder_B_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 80020be:	4b5e      	ldr	r3, [pc, #376]	; (8002238 <_Z13movement_taskPv+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	623b      	str	r3, [r7, #32]

		  	  // Calculate the ticks delta
//		  	  encoder_A_ticks_delta = encoder_A_ticks2 - encoder_A_ticks1;
//		  	  encoder_B_ticks_delta = encoder_B_ticks2 - encoder_B_ticks1;
		  	  // Calculate the counter delta
		  	  encoder_A_count_delta = get_encoder_delta(encoder_A_count1, encoder_A_count2, &htim2);
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <_Z13movement_taskPv+0x268>)
 80020c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020cc:	f7ff fd6c 	bl	8001ba8 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>
 80020d0:	61f8      	str	r0, [r7, #28]
		  	  encoder_B_count_delta = get_encoder_delta(encoder_B_count1, encoder_B_count2, &htim3);
 80020d2:	4a59      	ldr	r2, [pc, #356]	; (8002238 <_Z13movement_taskPv+0x26c>)
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020d8:	f7ff fd66 	bl	8001ba8 <_Z17get_encoder_deltammP17TIM_HandleTypeDef>
 80020dc:	61b8      	str	r0, [r7, #24]

		  	  left_motor_delta += encoder_A_count_delta;
 80020de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  	  right_motor_delta += encoder_B_count_delta;
 80020e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38

		  	  // The left motor leads the right motor
		  	  if (move_cmd.command == MOVE_FORWARD || move_cmd.command == MOVE_BACKWARD)
 80020ee:	7a3b      	ldrb	r3, [r7, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d002      	beq.n	80020fa <_Z13movement_taskPv+0x12e>
 80020f4:	7a3b      	ldrb	r3, [r7, #8]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d136      	bne.n	8002168 <_Z13movement_taskPv+0x19c>
		  	  {

			  	  if (encoder_within_bounds(left_motor_target, left_motor_delta)) // Stop both motors
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff44 	bl	8001f8c <_Z21encoder_within_boundsmm>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d023      	beq.n	8002152 <_Z13movement_taskPv+0x186>
			  	  {
			  		  left_motor_delta = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	; 0x3c
			  		  right_motor_delta = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
			  		  left_motor_target = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
			  		  right_motor_target = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
					  // Stop both motors
					  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)0);
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <_Z13movement_taskPv+0x278>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)0);
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <_Z13movement_taskPv+0x278>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
					  if (osMessageQueueGetCount(movement_command_queue) == 0)
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <_Z13movement_taskPv+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fec6 	bl	8006ec0 <osMessageQueueGetCount>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <_Z13movement_taskPv+0x17e>
					  {
						  stm32_status = COMMAND_READY_STATUS;
 8002144:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <_Z13movement_taskPv+0x274>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
					  }
					  toMove = false;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			  	  if (encoder_within_bounds(left_motor_target, left_motor_delta)) // Stop both motors
 8002150:	e063      	b.n	800221a <_Z13movement_taskPv+0x24e>
			  	  }
			  	  else
			  	  {
			  		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)STRAIGHT_MOTOR_PWM);
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <_Z13movement_taskPv+0x278>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
			  		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)STRAIGHT_MOTOR_PWM);
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <_Z13movement_taskPv+0x278>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
			  	  if (encoder_within_bounds(left_motor_target, left_motor_delta)) // Stop both motors
 8002166:	e058      	b.n	800221a <_Z13movement_taskPv+0x24e>
			  	  }
		  	  }
		  	  else // The inner motor follows the outer motor
		  	  {
		  		  // Target is the outer wheel
		  		  uint32_t ticks_target = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
		  		  uint32_t ticks_done = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  		  if (move_cmd.command == MOVE_FORWARD_LEFT)
 8002170:	7a3b      	ldrb	r3, [r7, #8]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d104      	bne.n	8002180 <_Z13movement_taskPv+0x1b4>
		  		  {
		  			  ticks_done = right_motor_delta;
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
		  			  ticks_target = right_motor_target;
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
 800217e:	e006      	b.n	800218e <_Z13movement_taskPv+0x1c2>
		  		  }
		  		  else if (move_cmd.command == MOVE_FORWARD_RIGHT)
 8002180:	7a3b      	ldrb	r3, [r7, #8]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d103      	bne.n	800218e <_Z13movement_taskPv+0x1c2>
		  		  {
		  			  ticks_done = left_motor_delta;
 8002186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
		  			  ticks_target = left_motor_target;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
		  		  }

		  		if (encoder_within_bounds(ticks_target, ticks_done))
 800218e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002192:	f7ff fefb 	bl	8001f8c <_Z21encoder_within_boundsmm>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <_Z13movement_taskPv+0x218>
		  		{
		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)0);
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <_Z13movement_taskPv+0x278>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
		  			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)0);
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <_Z13movement_taskPv+0x278>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
			  		  left_motor_delta = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			  		  right_motor_delta = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
			  		  left_motor_target = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
			  		  right_motor_target = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
			  		if (osMessageQueueGetCount(movement_command_queue) == 0)
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <_Z13movement_taskPv+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fe7d 	bl	8006ec0 <osMessageQueueGetCount>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <_Z13movement_taskPv+0x210>
			  		{
//			  			calibrate_steering_center(move_cmd.command);
			  			stm32_status = COMMAND_READY_STATUS;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <_Z13movement_taskPv+0x274>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
			  		}
			  			toMove = false;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021e2:	e01a      	b.n	800221a <_Z13movement_taskPv+0x24e>
		  		}
		  		else
		  		{
		  			if (move_cmd.command == MOVE_FORWARD_LEFT)
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d10a      	bne.n	8002200 <_Z13movement_taskPv+0x234>
		  			{
			  			 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)LEFT_TURNING_MOTOR_PWM);
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <_Z13movement_taskPv+0x278>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
			  			 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)LEFT_TURNING_MOTOR_PWM);
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_Z13movement_taskPv+0x278>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
 80021fe:	e00c      	b.n	800221a <_Z13movement_taskPv+0x24e>
		  			}
		  			else if (move_cmd.command == MOVE_FORWARD_RIGHT)
 8002200:	7a3b      	ldrb	r3, [r7, #8]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d109      	bne.n	800221a <_Z13movement_taskPv+0x24e>
		  			{
			  			 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (uint16_t)RIGHT_TURNING_MOTOR_PWM);
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <_Z13movement_taskPv+0x278>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f640 228c 	movw	r2, #2700	; 0xa8c
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
			  			 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, (uint16_t)RIGHT_TURNING_MOTOR_PWM);
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <_Z13movement_taskPv+0x278>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f640 228c 	movw	r2, #2700	; 0xa8c
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
		  		}
		  	  }
	  }

	  // Restart the process again
  	  encoder_A_count1 = __HAL_TIM_GET_COUNTER(&htim2);
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <_Z13movement_taskPv+0x268>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
//  	  encoder_A_ticks1 = HAL_GetTick();
  	  encoder_B_count1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <_Z13movement_taskPv+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	643b      	str	r3, [r7, #64]	; 0x40
//  	  encoder_B_ticks1 = HAL_GetTick();

  	  osDelay(25);
 800222a:	2019      	movs	r0, #25
 800222c:	f004 fcfc 	bl	8006c28 <osDelay>
  }
 8002230:	e6ec      	b.n	800200c <_Z13movement_taskPv+0x40>
 8002232:	bf00      	nop
 8002234:	200000f8 	.word	0x200000f8
 8002238:	20000140 	.word	0x20000140
 800223c:	20000098 	.word	0x20000098
 8002240:	2000009c 	.word	0x2000009c
 8002244:	200001d0 	.word	0x200001d0

08002248 <_Z17RPI_Transmit_TaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RPI_Transmit_Task */
void RPI_Transmit_Task(void *argument)
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b09e      	sub	sp, #120	; 0x78
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Encode STM32 status
	  sprintf(command_str, "CM%.3hu", (uint16_t)stm32_status);
 8002250:	4b4a      	ldr	r3, [pc, #296]	; (800237c <_Z17RPI_Transmit_TaskPv+0x134>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800225c:	4948      	ldr	r1, [pc, #288]	; (8002380 <_Z17RPI_Transmit_TaskPv+0x138>)
 800225e:	4618      	mov	r0, r3
 8002260:	f007 fcda 	bl	8009c18 <siprintf>

	  ultrasonic_osStatus = osMessageQueueGet(ultrasonic_readings_queue, &ultrasonic_distance, NULL, 0);
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <_Z17RPI_Transmit_TaskPv+0x13c>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	f004 fdc8 	bl	8006e04 <osMessageQueueGet>
 8002274:	66f8      	str	r0, [r7, #108]	; 0x6c
	  if (ultrasonic_osStatus != osOK)
 8002276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <_Z17RPI_Transmit_TaskPv+0x46>
	  {
		  strcpy(ultrasonic_str, "USxxx"); // Copy over null-terminating character as well
 800227c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002280:	4a41      	ldr	r2, [pc, #260]	; (8002388 <_Z17RPI_Transmit_TaskPv+0x140>)
 8002282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002286:	6018      	str	r0, [r3, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	8019      	strh	r1, [r3, #0]
 800228c:	e00e      	b.n	80022ac <_Z17RPI_Transmit_TaskPv+0x64>
	  }
	  else
	  {
		  sprintf(ultrasonic_str, "US%.3hu", (uint16_t)ultrasonic_distance);
 800228e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fbc1 	bl	8000a1c <__aeabi_d2uiz>
 800229a:	4603      	mov	r3, r0
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022a4:	4939      	ldr	r1, [pc, #228]	; (800238c <_Z17RPI_Transmit_TaskPv+0x144>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f007 fcb6 	bl	8009c18 <siprintf>
	  }

	  infrared_osStatus = osMessageQueueGet(infrared_data_queue, &infrared_data, NULL, 0);
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <_Z17RPI_Transmit_TaskPv+0x148>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80022b4:	2300      	movs	r3, #0
 80022b6:	2200      	movs	r2, #0
 80022b8:	f004 fda4 	bl	8006e04 <osMessageQueueGet>
 80022bc:	66b8      	str	r0, [r7, #104]	; 0x68
	  if (infrared_osStatus != osOK)
 80022be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <_Z17RPI_Transmit_TaskPv+0x8a>
	  {
		  strcpy(infrared_str, "ILxxx,IRxxx"); // Copy over null-terminating character as well
 80022c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c8:	4a32      	ldr	r2, [pc, #200]	; (8002394 <_Z17RPI_Transmit_TaskPv+0x14c>)
 80022ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80022cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022d0:	e009      	b.n	80022e6 <_Z17RPI_Transmit_TaskPv+0x9e>
	  }
	  else
	  {
		  sprintf(infrared_str, "IL%.3hu,IR%.3hu", infrared_data.left_distance, infrared_data.right_distance);
 80022d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80022d6:	461a      	mov	r2, r3
 80022d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80022dc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80022e0:	492d      	ldr	r1, [pc, #180]	; (8002398 <_Z17RPI_Transmit_TaskPv+0x150>)
 80022e2:	f007 fc99 	bl	8009c18 <siprintf>
	  }

	  // Concat all information into a string
	  memset(transmit_msg, 0, sizeof(transmit_msg));
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	2223      	movs	r2, #35	; 0x23
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 fbb6 	bl	8009a60 <memset>
	  sprintf(transmit_msg, "%s,%s,%s", command_str, ultrasonic_str, infrared_str);
 80022f4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80022f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022fc:	f107 000c 	add.w	r0, r7, #12
 8002300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	460b      	mov	r3, r1
 8002308:	4924      	ldr	r1, [pc, #144]	; (800239c <_Z17RPI_Transmit_TaskPv+0x154>)
 800230a:	f007 fc85 	bl	8009c18 <siprintf>
	  strcat(transmit_msg, "\n");
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ff5c 	bl	80001d0 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	4413      	add	r3, r2
 8002322:	491f      	ldr	r1, [pc, #124]	; (80023a0 <_Z17RPI_Transmit_TaskPv+0x158>)
 8002324:	461a      	mov	r2, r3
 8002326:	460b      	mov	r3, r1
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	8013      	strh	r3, [r2, #0]

	  // Enable the DMA to start a transfer process
	  huart3.Instance->CR3 |= USART_CR3_DMAT;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <_Z17RPI_Transmit_TaskPv+0x15c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <_Z17RPI_Transmit_TaskPv+0x15c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233a:	615a      	str	r2, [r3, #20]
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 800233c:	f107 040c 	add.w	r4, r7, #12
	  		  		(uint32_t)&huart3.Instance->DR, strlen(transmit_msg) + 1);
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <_Z17RPI_Transmit_TaskPv+0x15c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3304      	adds	r3, #4
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 8002346:	461d      	mov	r5, r3
	  		  		(uint32_t)&huart3.Instance->DR, strlen(transmit_msg) + 1);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4618      	mov	r0, r3
 800234e:	f7fd ff3f 	bl	80001d0 <strlen>
 8002352:	4603      	mov	r3, r0
 8002354:	3301      	adds	r3, #1
	  HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)transmit_msg,
 8002356:	462a      	mov	r2, r5
 8002358:	4621      	mov	r1, r4
 800235a:	4813      	ldr	r0, [pc, #76]	; (80023a8 <_Z17RPI_Transmit_TaskPv+0x160>)
 800235c:	f000 fd60 	bl	8002e20 <HAL_DMA_Start_IT>

	  if (started_run)
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <_Z17RPI_Transmit_TaskPv+0x164>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <_Z17RPI_Transmit_TaskPv+0x12c>
	  {
		  osDelay(1000);
 800236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236e:	f004 fc5b 	bl	8006c28 <osDelay>
 8002372:	e76d      	b.n	8002250 <_Z17RPI_Transmit_TaskPv+0x8>
	  }
	  else
	  {
		  osDelay(100);
 8002374:	2064      	movs	r0, #100	; 0x64
 8002376:	f004 fc57 	bl	8006c28 <osDelay>
	  sprintf(command_str, "CM%.3hu", (uint16_t)stm32_status);
 800237a:	e769      	b.n	8002250 <_Z17RPI_Transmit_TaskPv+0x8>
 800237c:	2000009c 	.word	0x2000009c
 8002380:	0800a4f0 	.word	0x0800a4f0
 8002384:	200000ac 	.word	0x200000ac
 8002388:	0800a4f8 	.word	0x0800a4f8
 800238c:	0800a500 	.word	0x0800a500
 8002390:	200000a0 	.word	0x200000a0
 8002394:	0800a508 	.word	0x0800a508
 8002398:	0800a514 	.word	0x0800a514
 800239c:	0800a524 	.word	0x0800a524
 80023a0:	0800a530 	.word	0x0800a530
 80023a4:	20000218 	.word	0x20000218
 80023a8:	2000025c 	.word	0x2000025c
 80023ac:	2000009d 	.word	0x2000009d

080023b0 <_Z15ultrasonic_taskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_task */
void ultrasonic_task(void *argument)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_task */
  /* Infinite loop */
  for(;;)
  {
	  HCSR04_Read();
 80023b8:	f7ff fb4c 	bl	8001a54 <_Z11HCSR04_Readv>
	  if (started_run)
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <_Z15ultrasonic_taskPv+0x28>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <_Z15ultrasonic_taskPv+0x20>
	  {
		  osDelay(1000);
 80023c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ca:	f004 fc2d 	bl	8006c28 <osDelay>
 80023ce:	e7f3      	b.n	80023b8 <_Z15ultrasonic_taskPv+0x8>
	  }
	  else
	  {
		  osDelay(100);
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	f004 fc29 	bl	8006c28 <osDelay>
	  HCSR04_Read();
 80023d6:	e7ef      	b.n	80023b8 <_Z15ultrasonic_taskPv+0x8>
 80023d8:	2000009d 	.word	0x2000009d

080023dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ee:	f000 fb67 	bl	8002ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40001000 	.word	0x40001000

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_MspInit+0x54>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <HAL_MspInit+0x54>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <HAL_MspInit+0x54>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_MspInit+0x54>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_MspInit+0x54>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_MspInit+0x54>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	210f      	movs	r1, #15
 800244e:	f06f 0001 	mvn.w	r0, #1
 8002452:	f000 fc0d 	bl	8002c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a31      	ldr	r2, [pc, #196]	; (8002548 <HAL_TIM_Base_MspInit+0xe4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d135      	bne.n	80024f2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a2f      	ldr	r2, [pc, #188]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Ultrasonic_Echo_Pin;
 80024be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Ultrasonic_Echo_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	481d      	ldr	r0, [pc, #116]	; (8002550 <HAL_TIM_Base_MspInit+0xec>)
 80024dc:	f001 f848 	bl	8003570 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2105      	movs	r1, #5
 80024e4:	201b      	movs	r0, #27
 80024e6:	f000 fbc3 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024ea:	201b      	movs	r0, #27
 80024ec:	f000 fbdc 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024f0:	e026      	b.n	8002540 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_TIM_Base_MspInit+0xf0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	e012      	b.n	8002540 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_TIM_Base_MspInit+0xf4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10d      	bne.n	8002540 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 800252a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	6453      	str	r3, [r2, #68]	; 0x44
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_TIM_Base_MspInit+0xe8>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40010000 	.word	0x40010000
 800254c:	40023800 	.word	0x40023800
 8002550:	40021000 	.word	0x40021000
 8002554:	40000800 	.word	0x40000800
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d14b      	bne.n	8002616 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a3e      	ldr	r2, [pc, #248]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a37      	ldr	r2, [pc, #220]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a30      	ldr	r2, [pc, #192]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MotorA_Encoder_Signal_2_Pin;
 80025d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorA_Encoder_Signal_2_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	4825      	ldr	r0, [pc, #148]	; (8002684 <HAL_TIM_Encoder_MspInit+0x128>)
 80025f0:	f000 ffbe 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MotorA_Encoder_Signal_1_Pin;
 80025f4:	2308      	movs	r3, #8
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002604:	2301      	movs	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MotorA_Encoder_Signal_1_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	481e      	ldr	r0, [pc, #120]	; (8002688 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002610:	f000 ffae 	bl	8003570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002614:	e030      	b.n	8002678 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <HAL_TIM_Encoder_MspInit+0x130>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d12b      	bne.n	8002678 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
 8002630:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_TIM_Encoder_MspInit+0x124>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorB_Encoder_Signal_1_Pin|MotorB_Encoder_Signal_2_Pin;
 8002658:	23c0      	movs	r3, #192	; 0xc0
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002668:	2302      	movs	r3, #2
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	4619      	mov	r1, r3
 8002672:	4804      	ldr	r0, [pc, #16]	; (8002684 <HAL_TIM_Encoder_MspInit+0x128>)
 8002674:	f000 ff7c 	bl	8003570 <HAL_GPIO_Init>
}
 8002678:	bf00      	nop
 800267a:	3730      	adds	r7, #48	; 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	40020000 	.word	0x40020000
 8002688:	40020400 	.word	0x40020400
 800268c:	40000400 	.word	0x40000400

08002690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_TIM_MspPostInit+0xb0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11f      	bne.n	80026f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = Steering_PWM_Pin;
 80026ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026e0:	2302      	movs	r3, #2
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Steering_PWM_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	4817      	ldr	r0, [pc, #92]	; (8002748 <HAL_TIM_MspPostInit+0xb8>)
 80026ec:	f000 ff40 	bl	8003570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80026f0:	e022      	b.n	8002738 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_TIM_MspPostInit+0xbc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11d      	bne.n	8002738 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6313      	str	r3, [r2, #48]	; 0x30
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_TIM_MspPostInit+0xb4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MotorA_PWM_Pin|MotorB_PWM_Pin;
 8002718:	23c0      	movs	r3, #192	; 0xc0
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2300      	movs	r3, #0
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002728:	2303      	movs	r3, #3
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <HAL_TIM_MspPostInit+0xc0>)
 8002734:	f000 ff1c 	bl	8003570 <HAL_GPIO_Init>
}
 8002738:	bf00      	nop
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40000800 	.word	0x40000800
 8002744:	40023800 	.word	0x40023800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40010400 	.word	0x40010400
 8002750:	40020800 	.word	0x40020800

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a34      	ldr	r2, [pc, #208]	; (8002844 <HAL_UART_MspInit+0xf0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d162      	bne.n	800283c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_UART_MspInit+0xf4>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a32      	ldr	r2, [pc, #200]	; (8002848 <HAL_UART_MspInit+0xf4>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_UART_MspInit+0xf4>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <HAL_UART_MspInit+0xf4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a2b      	ldr	r2, [pc, #172]	; (8002848 <HAL_UART_MspInit+0xf4>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_UART_MspInit+0xf4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STM32_RPI_TX_Pin|STM32_RPI_RX_Pin;
 80027ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c0:	2307      	movs	r3, #7
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	4820      	ldr	r0, [pc, #128]	; (800284c <HAL_UART_MspInit+0xf8>)
 80027cc:	f000 fed0 	bl	8003570 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_UART_MspInit+0x100>)
 80027d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_UART_MspInit+0xfc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_UART_MspInit+0xfc>)
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_UART_MspInit+0xfc>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_UART_MspInit+0xfc>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002810:	480f      	ldr	r0, [pc, #60]	; (8002850 <HAL_UART_MspInit+0xfc>)
 8002812:	f000 fa57 	bl	8002cc4 <HAL_DMA_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800281c:	f7ff fdf0 	bl	8002400 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <HAL_UART_MspInit+0xfc>)
 8002824:	635a      	str	r2, [r3, #52]	; 0x34
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_UART_MspInit+0xfc>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2105      	movs	r1, #5
 8002830:	2027      	movs	r0, #39	; 0x27
 8002832:	f000 fa1d 	bl	8002c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002836:	2027      	movs	r0, #39	; 0x27
 8002838:	f000 fa36 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40004800 	.word	0x40004800
 8002848:	40023800 	.word	0x40023800
 800284c:	40020800 	.word	0x40020800
 8002850:	2000025c 	.word	0x2000025c
 8002854:	40026058 	.word	0x40026058

08002858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	2036      	movs	r0, #54	; 0x36
 800286e:	f000 f9ff 	bl	8002c70 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002872:	2036      	movs	r0, #54	; 0x36
 8002874:	f000 fa18 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_InitTick+0xa0>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_InitTick+0xa0>)
 8002882:	f043 0310 	orr.w	r3, r3, #16
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_InitTick+0xa0>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002894:	f107 0210 	add.w	r2, r7, #16
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fc64 	bl	800416c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028a4:	f001 fc3a 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80028a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_InitTick+0xa4>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	3b01      	subs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_InitTick+0xa8>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_InitTick+0xac>)
 80028bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_InitTick+0xa8>)
 80028c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_InitTick+0xa8>)
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_InitTick+0xa8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_InitTick+0xa8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80028d8:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_InitTick+0xa8>)
 80028da:	f001 fc79 	bl	80041d0 <HAL_TIM_Base_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80028e4:	4806      	ldr	r0, [pc, #24]	; (8002900 <HAL_InitTick+0xa8>)
 80028e6:	f001 fcc3 	bl	8004270 <HAL_TIM_Base_Start_IT>
 80028ea:	4603      	mov	r3, r0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3730      	adds	r7, #48	; 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	20004d08 	.word	0x20004d08
 8002904:	40001000 	.word	0x40001000

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <DMA1_Stream3_IRQHandler+0x10>)
 800293a:	f000 fb5b 	bl	8002ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000025c 	.word	0x2000025c

08002948 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <TIM1_CC_IRQHandler+0x10>)
 800294e:	f002 f8d7 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200000b0 	.word	0x200000b0

0800295c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <USART3_IRQHandler+0x10>)
 8002962:	f003 f9f7 	bl	8005d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000218 	.word	0x20000218

08002970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <TIM6_DAC_IRQHandler+0x10>)
 8002976:	f002 f8c3 	bl	8004b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20004d08 	.word	0x20004d08

08002984 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA2_Stream0_IRQHandler+0x10>)
 800298a:	f000 fb33 	bl	8002ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200002bc 	.word	0x200002bc

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f007 f810 	bl	80099ec <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20020000 	.word	0x20020000
 80029f8:	00000400 	.word	0x00000400
 80029fc:	2000032c 	.word	0x2000032c
 8002a00:	20004da8 	.word	0x20004da8

08002a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <SystemInit+0x20>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <SystemInit+0x20>)
 8002a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a2c:	480d      	ldr	r0, [pc, #52]	; (8002a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2e:	490e      	ldr	r1, [pc, #56]	; (8002a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a30:	4a0e      	ldr	r2, [pc, #56]	; (8002a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a44:	4c0b      	ldr	r4, [pc, #44]	; (8002a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a52:	f7ff ffd7 	bl	8002a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a56:	f006 ffcf 	bl	80099f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5a:	f7fe fb2b 	bl	80010b4 <main>
  bx  lr    
 8002a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a6c:	0800a7a0 	.word	0x0800a7a0
  ldr r2, =_sbss
 8002a70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a74:	20004da4 	.word	0x20004da4

08002a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_Init+0x40>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_Init+0x40>)
 8002a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a07      	ldr	r2, [pc, #28]	; (8002abc <HAL_Init+0x40>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f000 f8d8 	bl	8002c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aaa:	200f      	movs	r0, #15
 8002aac:	f7ff fed4 	bl	8002858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab0:	f7ff fcac 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00

08002ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x20>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x24>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_IncTick+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	20004d50 	.word	0x20004d50

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20004d50 	.word	0x20004d50

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff4c 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c82:	f7ff ff61 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff ffb1 	bl	8002bf4 <NVIC_EncodePriority>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff80 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff54 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff ff0a 	bl	8002ae8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e099      	b.n	8002e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d00:	e00f      	b.n	8002d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff fef1 	bl	8002ae8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d908      	bls.n	8002d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e078      	b.n	8002e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e8      	bne.n	8002d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_DMA_Init+0x158>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4313      	orrs	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d117      	bne.n	8002de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00e      	beq.n	8002de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fb55 	bl	8003478 <DMA_CheckFifoParam>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002de2:	2301      	movs	r3, #1
 8002de4:	e016      	b.n	8002e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fb0c 	bl	800340c <DMA_CalcBaseAndBitshift>
 8002df4:	4603      	mov	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	223f      	movs	r2, #63	; 0x3f
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	f010803f 	.word	0xf010803f

08002e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_DMA_Start_IT+0x26>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e040      	b.n	8002ec8 <HAL_DMA_Start_IT+0xa8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12f      	bne.n	8002eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa9e 	bl	80033b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	223f      	movs	r2, #63	; 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0216 	orr.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d007      	beq.n	8002ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0208 	orr.w	r2, r2, #8
 8002ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e005      	b.n	8002ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7ff fe03 	bl	8002ae8 <HAL_GetTick>
 8002ee2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d008      	beq.n	8002f02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e052      	b.n	8002fa8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0216 	bic.w	r2, r2, #22
 8002f10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_DMA_Abort+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0208 	bic.w	r2, r2, #8
 8002f40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f52:	e013      	b.n	8002f7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f54:	f7ff fdc8 	bl	8002ae8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d90c      	bls.n	8002f7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e015      	b.n	8002fa8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e4      	bne.n	8002f54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	223f      	movs	r2, #63	; 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00c      	b.n	8002fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_DMA_IRQHandler+0x258>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a92      	ldr	r2, [pc, #584]	; (8003250 <HAL_DMA_IRQHandler+0x25c>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0a9b      	lsrs	r3, r3, #10
 800300c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	2208      	movs	r2, #8
 8003020:	409a      	lsls	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01a      	beq.n	8003060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2208      	movs	r2, #8
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2201      	movs	r2, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f043 0202 	orr.w	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	2204      	movs	r2, #4
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2204      	movs	r2, #4
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0204 	orr.w	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	2210      	movs	r2, #16
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d043      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d03c      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2210      	movs	r2, #16
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d018      	beq.n	8003136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d024      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
 8003122:	e01f      	b.n	8003164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
 8003134:	e016      	b.n	8003164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0208 	bic.w	r2, r2, #8
 8003152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2220      	movs	r2, #32
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 808e 	beq.w	8003292 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8086 	beq.w	8003292 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2220      	movs	r2, #32
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b05      	cmp	r3, #5
 800319c:	d136      	bne.n	800320c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0216 	bic.w	r2, r2, #22
 80031ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <HAL_DMA_IRQHandler+0x1da>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0208 	bic.w	r2, r2, #8
 80031dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	223f      	movs	r2, #63	; 0x3f
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d07d      	beq.n	80032fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
        }
        return;
 800320a:	e078      	b.n	80032fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01c      	beq.n	8003254 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d108      	bne.n	800323a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	2b00      	cmp	r3, #0
 800322e:	d030      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
 8003238:	e02b      	b.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d027      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
 800324a:	e022      	b.n	8003292 <HAL_DMA_IRQHandler+0x29e>
 800324c:	20000000 	.word	0x20000000
 8003250:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0210 	bic.w	r2, r2, #16
 8003270:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	2b00      	cmp	r3, #0
 8003298:	d032      	beq.n	8003300 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2205      	movs	r2, #5
 80032aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3301      	adds	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d307      	bcc.n	80032da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f2      	bne.n	80032be <HAL_DMA_IRQHandler+0x2ca>
 80032d8:	e000      	b.n	80032dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
 80032fc:	e000      	b.n	8003300 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032fe:	bf00      	nop
    }
  }
}
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	460b      	mov	r3, r1
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_DMA_RegisterCallback+0x20>
 8003324:	2302      	movs	r3, #2
 8003326:	e03c      	b.n	80033a2 <HAL_DMA_RegisterCallback+0x9a>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d129      	bne.n	8003390 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d829      	bhi.n	8003396 <HAL_DMA_RegisterCallback+0x8e>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <HAL_DMA_RegisterCallback+0x40>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	08003361 	.word	0x08003361
 800334c:	08003369 	.word	0x08003369
 8003350:	08003371 	.word	0x08003371
 8003354:	08003379 	.word	0x08003379
 8003358:	08003381 	.word	0x08003381
 800335c:	08003389 	.word	0x08003389
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8003366:	e017      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800336e:	e013      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8003376:	e00f      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800337e:	e00b      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8003386:	e007      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800338e:	e003      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
 8003394:	e000      	b.n	8003398 <HAL_DMA_RegisterCallback+0x90>
      break;
 8003396:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop

080033b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d108      	bne.n	80033f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ee:	e007      	b.n	8003400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3b10      	subs	r3, #16
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <DMA_CalcBaseAndBitshift+0x64>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <DMA_CalcBaseAndBitshift+0x68>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d909      	bls.n	800344e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	; 0x58
 800344c:	e007      	b.n	800345e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	aaaaaaab 	.word	0xaaaaaaab
 8003474:	0800a5f4 	.word	0x0800a5f4

08003478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11f      	bne.n	80034d2 <DMA_CheckFifoParam+0x5a>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d856      	bhi.n	8003546 <DMA_CheckFifoParam+0xce>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x28>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	08003547 	.word	0x08003547
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d046      	beq.n	800354a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e043      	b.n	800354a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ca:	d140      	bne.n	800354e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e03d      	b.n	800354e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d121      	bne.n	8003520 <DMA_CheckFifoParam+0xa8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d837      	bhi.n	8003552 <DMA_CheckFifoParam+0xda>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <DMA_CheckFifoParam+0x70>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	080034ff 	.word	0x080034ff
 80034f0:	080034f9 	.word	0x080034f9
 80034f4:	08003511 	.word	0x08003511
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e030      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d025      	beq.n	8003556 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e022      	b.n	8003556 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003518:	d11f      	bne.n	800355a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800351e:	e01c      	b.n	800355a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d903      	bls.n	800352e <DMA_CheckFifoParam+0xb6>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d003      	beq.n	8003534 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800352c:	e018      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
      break;
 8003532:	e015      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e00b      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 8003546:	bf00      	nop
 8003548:	e00a      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e008      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e006      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;   
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
    }
  } 
  
  return status; 
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	e16b      	b.n	8003864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	f040 815a 	bne.w	800385e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d005      	beq.n	80035c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d130      	bne.n	8003624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f8:	2201      	movs	r2, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 0201 	and.w	r2, r3, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d017      	beq.n	8003660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d123      	bne.n	80036b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	08da      	lsrs	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3208      	adds	r2, #8
 8003674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	220f      	movs	r2, #15
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	08da      	lsrs	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3208      	adds	r2, #8
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80b4 	beq.w	800385e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b60      	ldr	r3, [pc, #384]	; (800387c <HAL_GPIO_Init+0x30c>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a5f      	ldr	r2, [pc, #380]	; (800387c <HAL_GPIO_Init+0x30c>)
 8003700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b5d      	ldr	r3, [pc, #372]	; (800387c <HAL_GPIO_Init+0x30c>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003712:	4a5b      	ldr	r2, [pc, #364]	; (8003880 <HAL_GPIO_Init+0x310>)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a52      	ldr	r2, [pc, #328]	; (8003884 <HAL_GPIO_Init+0x314>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d02b      	beq.n	8003796 <HAL_GPIO_Init+0x226>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a51      	ldr	r2, [pc, #324]	; (8003888 <HAL_GPIO_Init+0x318>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d025      	beq.n	8003792 <HAL_GPIO_Init+0x222>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a50      	ldr	r2, [pc, #320]	; (800388c <HAL_GPIO_Init+0x31c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01f      	beq.n	800378e <HAL_GPIO_Init+0x21e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4f      	ldr	r2, [pc, #316]	; (8003890 <HAL_GPIO_Init+0x320>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d019      	beq.n	800378a <HAL_GPIO_Init+0x21a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4e      	ldr	r2, [pc, #312]	; (8003894 <HAL_GPIO_Init+0x324>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_GPIO_Init+0x216>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4d      	ldr	r2, [pc, #308]	; (8003898 <HAL_GPIO_Init+0x328>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00d      	beq.n	8003782 <HAL_GPIO_Init+0x212>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4c      	ldr	r2, [pc, #304]	; (800389c <HAL_GPIO_Init+0x32c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <HAL_GPIO_Init+0x20e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4b      	ldr	r2, [pc, #300]	; (80038a0 <HAL_GPIO_Init+0x330>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d101      	bne.n	800377a <HAL_GPIO_Init+0x20a>
 8003776:	2307      	movs	r3, #7
 8003778:	e00e      	b.n	8003798 <HAL_GPIO_Init+0x228>
 800377a:	2308      	movs	r3, #8
 800377c:	e00c      	b.n	8003798 <HAL_GPIO_Init+0x228>
 800377e:	2306      	movs	r3, #6
 8003780:	e00a      	b.n	8003798 <HAL_GPIO_Init+0x228>
 8003782:	2305      	movs	r3, #5
 8003784:	e008      	b.n	8003798 <HAL_GPIO_Init+0x228>
 8003786:	2304      	movs	r3, #4
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x228>
 800378a:	2303      	movs	r3, #3
 800378c:	e004      	b.n	8003798 <HAL_GPIO_Init+0x228>
 800378e:	2302      	movs	r3, #2
 8003790:	e002      	b.n	8003798 <HAL_GPIO_Init+0x228>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_GPIO_Init+0x228>
 8003796:	2300      	movs	r3, #0
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f002 0203 	and.w	r2, r2, #3
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	4093      	lsls	r3, r2
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a8:	4935      	ldr	r1, [pc, #212]	; (8003880 <HAL_GPIO_Init+0x310>)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_GPIO_Init+0x334>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037da:	4a32      	ldr	r2, [pc, #200]	; (80038a4 <HAL_GPIO_Init+0x334>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037e0:	4b30      	ldr	r3, [pc, #192]	; (80038a4 <HAL_GPIO_Init+0x334>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <HAL_GPIO_Init+0x334>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_GPIO_Init+0x334>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <HAL_GPIO_Init+0x334>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_GPIO_Init+0x334>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_GPIO_Init+0x334>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3301      	adds	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	f67f ae90 	bls.w	800358c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40013800 	.word	0x40013800
 8003884:	40020000 	.word	0x40020000
 8003888:	40020400 	.word	0x40020400
 800388c:	40020800 	.word	0x40020800
 8003890:	40020c00 	.word	0x40020c00
 8003894:	40021000 	.word	0x40021000
 8003898:	40021400 	.word	0x40021400
 800389c:	40021800 	.word	0x40021800
 80038a0:	40021c00 	.word	0x40021c00
 80038a4:	40013c00 	.word	0x40013c00

080038a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
 80038b4:	4613      	mov	r3, r2
 80038b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b8:	787b      	ldrb	r3, [r7, #1]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038c4:	e003      	b.n	80038ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	041a      	lsls	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	619a      	str	r2, [r3, #24]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e264      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d075      	beq.n	80039e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	4ba3      	ldr	r3, [pc, #652]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d00c      	beq.n	8003920 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003906:	4ba0      	ldr	r3, [pc, #640]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390e:	2b08      	cmp	r3, #8
 8003910:	d112      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003912:	4b9d      	ldr	r3, [pc, #628]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d10b      	bne.n	8003938 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	4b99      	ldr	r3, [pc, #612]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d05b      	beq.n	80039e4 <HAL_RCC_OscConfig+0x108>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d157      	bne.n	80039e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e23f      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x74>
 8003942:	4b91      	ldr	r3, [pc, #580]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a90      	ldr	r2, [pc, #576]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x98>
 800395a:	4b8b      	ldr	r3, [pc, #556]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a8a      	ldr	r2, [pc, #552]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a87      	ldr	r2, [pc, #540]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xb0>
 8003974:	4b84      	ldr	r3, [pc, #528]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a83      	ldr	r2, [pc, #524]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a80      	ldr	r2, [pc, #512]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff f8a8 	bl	8002ae8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399c:	f7ff f8a4 	bl	8002ae8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e204      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xc0>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7ff f894 	bl	8002ae8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c4:	f7ff f890 	bl	8002ae8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1f0      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0xe8>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	4b65      	ldr	r3, [pc, #404]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039fe:	4b62      	ldr	r3, [pc, #392]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1c4      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b56      	ldr	r3, [pc, #344]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4952      	ldr	r1, [pc, #328]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <HAL_RCC_OscConfig+0x2b0>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7ff f849 	bl	8002ae8 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7ff f845 	bl	8002ae8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e1a5      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4940      	ldr	r1, [pc, #256]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCC_OscConfig+0x2b0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7ff f828 	bl	8002ae8 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7ff f824 	bl	8002ae8 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e184      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d030      	beq.n	8003b28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b30      	ldr	r3, [pc, #192]	; (8003b90 <HAL_RCC_OscConfig+0x2b4>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7ff f808 	bl	8002ae8 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003adc:	f7ff f804 	bl	8002ae8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e164      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	4b26      	ldr	r3, [pc, #152]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x200>
 8003afa:	e015      	b.n	8003b28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_OscConfig+0x2b4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fe fff1 	bl	8002ae8 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0a:	f7fe ffed 	bl	8002ae8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e14d      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80a0 	beq.w	8003c76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x2b8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d121      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <HAL_RCC_OscConfig+0x2b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <HAL_RCC_OscConfig+0x2b8>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe ffb3 	bl	8002ae8 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e011      	b.n	8003baa <HAL_RCC_OscConfig+0x2ce>
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470000 	.word	0x42470000
 8003b90:	42470e80 	.word	0x42470e80
 8003b94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fe ffa6 	bl	8002ae8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e106      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b85      	ldr	r3, [pc, #532]	; (8003dc0 <HAL_RCC_OscConfig+0x4e4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2f0>
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a80      	ldr	r2, [pc, #512]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	e01c      	b.n	8003c06 <HAL_RCC_OscConfig+0x32a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d10c      	bne.n	8003bee <HAL_RCC_OscConfig+0x312>
 8003bd4:	4b7b      	ldr	r3, [pc, #492]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a7a      	ldr	r2, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	f043 0304 	orr.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
 8003bec:	e00b      	b.n	8003c06 <HAL_RCC_OscConfig+0x32a>
 8003bee:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a74      	ldr	r2, [pc, #464]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a71      	ldr	r2, [pc, #452]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d015      	beq.n	8003c3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fe ff6b 	bl	8002ae8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe ff67 	bl	8002ae8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0c5      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ee      	beq.n	8003c16 <HAL_RCC_OscConfig+0x33a>
 8003c38:	e014      	b.n	8003c64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3a:	f7fe ff55 	bl	8002ae8 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fe ff51 	bl	8002ae8 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0af      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d105      	bne.n	8003c76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6a:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	4a55      	ldr	r2, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 809b 	beq.w	8003db6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c80:	4b50      	ldr	r3, [pc, #320]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d05c      	beq.n	8003d46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d141      	bne.n	8003d18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x4ec>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fe ff25 	bl	8002ae8 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fe ff21 	bl	8002ae8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e081      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb4:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	019b      	lsls	r3, r3, #6
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	4937      	ldr	r1, [pc, #220]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_RCC_OscConfig+0x4ec>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fefa 	bl	8002ae8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe fef6 	bl	8002ae8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e056      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x41c>
 8003d16:	e04e      	b.n	8003db6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCC_OscConfig+0x4ec>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fe fee3 	bl	8002ae8 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d26:	f7fe fedf 	bl	8002ae8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e03f      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d38:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x44a>
 8003d44:	e037      	b.n	8003db6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e032      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <HAL_RCC_OscConfig+0x4e8>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d028      	beq.n	8003db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d121      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d11a      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d001      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470060 	.word	0x42470060

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0cc      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d90c      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b8      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e38:	4b53      	ldr	r3, [pc, #332]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	494d      	ldr	r1, [pc, #308]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d119      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e067      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4934      	ldr	r1, [pc, #208]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe fe14 	bl	8002ae8 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fe fe10 	bl	8002ae8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04f      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d20c      	bcs.n	8003f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e032      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4916      	ldr	r1, [pc, #88]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f52:	f000 f821 	bl	8003f98 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490a      	ldr	r1, [pc, #40]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	4a09      	ldr	r2, [pc, #36]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fc70 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023c00 	.word	0x40023c00
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	0800a5dc 	.word	0x0800a5dc
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000004 	.word	0x20000004

08003f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	6079      	str	r1, [r7, #4]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	60f9      	str	r1, [r7, #12]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003faa:	2100      	movs	r1, #0
 8003fac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fae:	4952      	ldr	r1, [pc, #328]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fb0:	6889      	ldr	r1, [r1, #8]
 8003fb2:	f001 010c 	and.w	r1, r1, #12
 8003fb6:	2908      	cmp	r1, #8
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003fba:	2908      	cmp	r1, #8
 8003fbc:	f200 8094 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x150>
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x32>
 8003fc4:	2904      	cmp	r1, #4
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x38>
 8003fc8:	e08e      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fca:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCC_GetSysClockFreq+0x164>)
 8003fcc:	60bb      	str	r3, [r7, #8]
       break;
 8003fce:	e08e      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fd2:	60bb      	str	r3, [r7, #8]
      break;
 8003fd4:	e08b      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fd6:	4948      	ldr	r1, [pc, #288]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fd8:	6849      	ldr	r1, [r1, #4]
 8003fda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003fde:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fe0:	4945      	ldr	r1, [pc, #276]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fe2:	6849      	ldr	r1, [r1, #4]
 8003fe4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d024      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fec:	4942      	ldr	r1, [pc, #264]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fee:	6849      	ldr	r1, [r1, #4]
 8003ff0:	0989      	lsrs	r1, r1, #6
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ffc:	f04f 0500 	mov.w	r5, #0
 8004000:	ea00 0204 	and.w	r2, r0, r4
 8004004:	ea01 0305 	and.w	r3, r1, r5
 8004008:	493d      	ldr	r1, [pc, #244]	; (8004100 <HAL_RCC_GetSysClockFreq+0x168>)
 800400a:	fb01 f003 	mul.w	r0, r1, r3
 800400e:	2100      	movs	r1, #0
 8004010:	fb01 f102 	mul.w	r1, r1, r2
 8004014:	1844      	adds	r4, r0, r1
 8004016:	493a      	ldr	r1, [pc, #232]	; (8004100 <HAL_RCC_GetSysClockFreq+0x168>)
 8004018:	fba2 0101 	umull	r0, r1, r2, r1
 800401c:	1863      	adds	r3, r4, r1
 800401e:	4619      	mov	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	f7fc fd18 	bl	8000a5c <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e04a      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	461a      	mov	r2, r3
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	ea02 0400 	and.w	r4, r2, r0
 800404e:	ea03 0501 	and.w	r5, r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	014b      	lsls	r3, r1, #5
 8004060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004064:	0142      	lsls	r2, r0, #5
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	1b00      	subs	r0, r0, r4
 800406c:	eb61 0105 	sbc.w	r1, r1, r5
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	018b      	lsls	r3, r1, #6
 800407a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800407e:	0182      	lsls	r2, r0, #6
 8004080:	1a12      	subs	r2, r2, r0
 8004082:	eb63 0301 	sbc.w	r3, r3, r1
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	00d9      	lsls	r1, r3, #3
 8004090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004094:	00d0      	lsls	r0, r2, #3
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	1912      	adds	r2, r2, r4
 800409c:	eb45 0303 	adc.w	r3, r5, r3
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0299      	lsls	r1, r3, #10
 80040aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040ae:	0290      	lsls	r0, r2, #10
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f7fc fccc 	bl	8000a5c <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	60bb      	str	r3, [r7, #8]
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <HAL_RCC_GetSysClockFreq+0x164>)
 80040ea:	60bb      	str	r3, [r7, #8]
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	68bb      	ldr	r3, [r7, #8]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdb0      	pop	{r4, r5, r7, pc}
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	017d7840 	.word	0x017d7840

08004104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	0800a5ec 	.word	0x0800a5ec

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	0800a5ec 	.word	0x0800a5ec

0800416c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	220f      	movs	r2, #15
 800417a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0203 	and.w	r2, r3, #3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_GetClockConfig+0x5c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	08db      	lsrs	r3, r3, #3
 80041a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <HAL_RCC_GetClockConfig+0x60>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0207 	and.w	r2, r3, #7
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40023c00 	.word	0x40023c00

080041d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e041      	b.n	8004266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe f934 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f001 f806 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d001      	beq.n	8004288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e04e      	b.n	8004326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_TIM_Base_Start_IT+0xc4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d01d      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_Base_Start_IT+0xc8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1e      	ldr	r2, [pc, #120]	; (800433c <HAL_TIM_Base_Start_IT+0xcc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Base_Start_IT+0xd0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_TIM_Base_Start_IT+0xd4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_TIM_Base_Start_IT+0xd8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_TIM_Base_Start_IT+0x80>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_Base_Start_IT+0xdc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b06      	cmp	r3, #6
 8004300:	d010      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e007      	b.n	8004324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40001800 	.word	0x40001800

08004350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e041      	b.n	80043e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f839 	bl	80043ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 ff46 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x24>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e022      	b.n	800446e <HAL_TIM_PWM_Start+0x6a>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d109      	bne.n	8004442 <HAL_TIM_PWM_Start+0x3e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b01      	cmp	r3, #1
 8004438:	bf14      	ite	ne
 800443a:	2301      	movne	r3, #1
 800443c:	2300      	moveq	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	e015      	b.n	800446e <HAL_TIM_PWM_Start+0x6a>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d109      	bne.n	800445c <HAL_TIM_PWM_Start+0x58>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e008      	b.n	800446e <HAL_TIM_PWM_Start+0x6a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07c      	b.n	8004570 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d104      	bne.n	8004486 <HAL_TIM_PWM_Start+0x82>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	e013      	b.n	80044ae <HAL_TIM_PWM_Start+0xaa>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d104      	bne.n	8004496 <HAL_TIM_PWM_Start+0x92>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	e00b      	b.n	80044ae <HAL_TIM_PWM_Start+0xaa>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0xa2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044a4:	e003      	b.n	80044ae <HAL_TIM_PWM_Start+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fac6 	bl	8005a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2d      	ldr	r2, [pc, #180]	; (8004578 <HAL_TIM_PWM_Start+0x174>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_PWM_Start+0xcc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2c      	ldr	r2, [pc, #176]	; (800457c <HAL_TIM_PWM_Start+0x178>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_PWM_Start+0xd0>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_TIM_PWM_Start+0xd2>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a22      	ldr	r2, [pc, #136]	; (8004578 <HAL_TIM_PWM_Start+0x174>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d01d      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_TIM_PWM_Start+0x17c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <HAL_TIM_PWM_Start+0x180>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIM_PWM_Start+0x184>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_TIM_PWM_Start+0x178>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIM_PWM_Start+0x188>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIM_PWM_Start+0x136>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <HAL_TIM_PWM_Start+0x18c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d111      	bne.n	800455e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b06      	cmp	r3, #6
 800454a:	d010      	beq.n	800456e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	e007      	b.n	800456e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40010000 	.word	0x40010000
 800457c:	40010400 	.word	0x40010400
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40014000 	.word	0x40014000
 8004590:	40001800 	.word	0x40001800

08004594 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e041      	b.n	800462a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f839 	bl	8004632 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f000 fe24 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_TIM_IC_Start_IT+0x1e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e013      	b.n	800468e <HAL_TIM_IC_Start_IT+0x46>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d104      	bne.n	8004676 <HAL_TIM_IC_Start_IT+0x2e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e00b      	b.n	800468e <HAL_TIM_IC_Start_IT+0x46>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d104      	bne.n	8004686 <HAL_TIM_IC_Start_IT+0x3e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e003      	b.n	800468e <HAL_TIM_IC_Start_IT+0x46>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468c:	b2db      	uxtb	r3, r3
 800468e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_TIM_IC_Start_IT+0x58>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e013      	b.n	80046c8 <HAL_TIM_IC_Start_IT+0x80>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d104      	bne.n	80046b0 <HAL_TIM_IC_Start_IT+0x68>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e00b      	b.n	80046c8 <HAL_TIM_IC_Start_IT+0x80>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d104      	bne.n	80046c0 <HAL_TIM_IC_Start_IT+0x78>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e003      	b.n	80046c8 <HAL_TIM_IC_Start_IT+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ca:	7bbb      	ldrb	r3, [r7, #14]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d102      	bne.n	80046d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80046d0:	7b7b      	ldrb	r3, [r7, #13]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d001      	beq.n	80046da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0cc      	b.n	8004874 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_IC_Start_IT+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e8:	e013      	b.n	8004712 <HAL_TIM_IC_Start_IT+0xca>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_IC_Start_IT+0xb2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_IC_Start_IT+0xca>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_IC_Start_IT+0xc2>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	e003      	b.n	8004712 <HAL_TIM_IC_Start_IT+0xca>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <HAL_TIM_IC_Start_IT+0xda>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004720:	e013      	b.n	800474a <HAL_TIM_IC_Start_IT+0x102>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d104      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0xea>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004730:	e00b      	b.n	800474a <HAL_TIM_IC_Start_IT+0x102>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d104      	bne.n	8004742 <HAL_TIM_IC_Start_IT+0xfa>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004740:	e003      	b.n	800474a <HAL_TIM_IC_Start_IT+0x102>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d841      	bhi.n	80047d4 <HAL_TIM_IC_Start_IT+0x18c>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <HAL_TIM_IC_Start_IT+0x110>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	0800478d 	.word	0x0800478d
 800475c:	080047d5 	.word	0x080047d5
 8004760:	080047d5 	.word	0x080047d5
 8004764:	080047d5 	.word	0x080047d5
 8004768:	0800479f 	.word	0x0800479f
 800476c:	080047d5 	.word	0x080047d5
 8004770:	080047d5 	.word	0x080047d5
 8004774:	080047d5 	.word	0x080047d5
 8004778:	080047b1 	.word	0x080047b1
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047d5 	.word	0x080047d5
 8004784:	080047d5 	.word	0x080047d5
 8004788:	080047c3 	.word	0x080047c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0202 	orr.w	r2, r2, #2
 800479a:	60da      	str	r2, [r3, #12]
      break;
 800479c:	e01d      	b.n	80047da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0204 	orr.w	r2, r2, #4
 80047ac:	60da      	str	r2, [r3, #12]
      break;
 80047ae:	e014      	b.n	80047da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0208 	orr.w	r2, r2, #8
 80047be:	60da      	str	r2, [r3, #12]
      break;
 80047c0:	e00b      	b.n	80047da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0210 	orr.w	r2, r2, #16
 80047d0:	60da      	str	r2, [r3, #12]
      break;
 80047d2:	e002      	b.n	80047da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d148      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2201      	movs	r2, #1
 80047e6:	6839      	ldr	r1, [r7, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f001 f92d 	bl	8005a48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a22      	ldr	r2, [pc, #136]	; (800487c <HAL_TIM_IC_Start_IT+0x234>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d022      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d01d      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIM_IC_Start_IT+0x238>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d018      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_TIM_IC_Start_IT+0x23c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIM_IC_Start_IT+0x240>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <HAL_TIM_IC_Start_IT+0x244>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_TIM_IC_Start_IT+0x248>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_TIM_IC_Start_IT+0x1f6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_TIM_IC_Start_IT+0x24c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b06      	cmp	r3, #6
 800484e:	d010      	beq.n	8004872 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	e007      	b.n	8004872 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40010400 	.word	0x40010400
 8004890:	40014000 	.word	0x40014000
 8004894:	40001800 	.word	0x40001800

08004898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e097      	b.n	80049dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d106      	bne.n	80048c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7fd fe4b 	bl	800255c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f000 fc97 	bl	8005220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	4313      	orrs	r3, r2
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004938:	f023 030c 	bic.w	r3, r3, #12
 800493c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	4313      	orrs	r3, r2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	011a      	lsls	r2, r3, #4
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	031b      	lsls	r3, r3, #12
 8004968:	4313      	orrs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	4313      	orrs	r3, r2
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a1a:	7b7b      	ldrb	r3, [r7, #13]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e069      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a34:	e031      	b.n	8004a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d110      	bne.n	8004a5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d102      	bne.n	8004a48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a42:	7b3b      	ldrb	r3, [r7, #12]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e055      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5c:	e01d      	b.n	8004a9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d108      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a64:	7bbb      	ldrb	r3, [r7, #14]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a6a:	7b7b      	ldrb	r3, [r7, #13]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d102      	bne.n	8004a76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a70:	7b3b      	ldrb	r3, [r7, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e03e      	b.n	8004af8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIM_Encoder_Start+0xc4>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d008      	beq.n	8004ab8 <HAL_TIM_Encoder_Start+0xd4>
 8004aa6:	e00f      	b.n	8004ac8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 ffc9 	bl	8005a48 <TIM_CCxChannelCmd>
      break;
 8004ab6:	e016      	b.n	8004ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	2104      	movs	r1, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 ffc1 	bl	8005a48 <TIM_CCxChannelCmd>
      break;
 8004ac6:	e00e      	b.n	8004ae6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 ffb9 	bl	8005a48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2201      	movs	r2, #1
 8004adc:	2104      	movs	r1, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ffb2 	bl	8005a48 <TIM_CCxChannelCmd>
      break;
 8004ae4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0202 	mvn.w	r2, #2
 8004b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f91c 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fb4a 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb51 	bl	80051f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d122      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d11b      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0204 	mvn.w	r2, #4
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fc f8f2 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fb20 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb27 	bl	80051f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc f8c8 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 faf6 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fafd 	bl	80051f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0210 	mvn.w	r2, #16
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc f89e 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 facc 	bl	80051e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fad3 	bl	80051f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0201 	mvn.w	r2, #1
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd fbac 	bl	80023dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 ffca 	bl	8005c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa98 	bl	800520c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0220 	mvn.w	r2, #32
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 ff94 	bl	8005c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e088      	b.n	8004e40 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f000 fcb8 	bl	80056c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 020c 	bic.w	r2, r2, #12
 8004d5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	619a      	str	r2, [r3, #24]
 8004d72:	e060      	b.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d11c      	bne.n	8004db4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fd3c 	bl	8005806 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6999      	ldr	r1, [r3, #24]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
 8004db2:	e040      	b.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11b      	bne.n	8004df2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f000 fd89 	bl	80058e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 020c 	bic.w	r2, r2, #12
 8004ddc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	e021      	b.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d11c      	bne.n	8004e32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f000 fda6 	bl	8005958 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69d9      	ldr	r1, [r3, #28]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	61da      	str	r2, [r3, #28]
 8004e30:	e001      	b.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0ae      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	f200 809f 	bhi.w	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004eb1 	.word	0x08004eb1
 8004e80:	08004fb5 	.word	0x08004fb5
 8004e84:	08004fb5 	.word	0x08004fb5
 8004e88:	08004fb5 	.word	0x08004fb5
 8004e8c:	08004ef1 	.word	0x08004ef1
 8004e90:	08004fb5 	.word	0x08004fb5
 8004e94:	08004fb5 	.word	0x08004fb5
 8004e98:	08004fb5 	.word	0x08004fb5
 8004e9c:	08004f33 	.word	0x08004f33
 8004ea0:	08004fb5 	.word	0x08004fb5
 8004ea4:	08004fb5 	.word	0x08004fb5
 8004ea8:	08004fb5 	.word	0x08004fb5
 8004eac:	08004f73 	.word	0x08004f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa52 	bl	8005360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0208 	orr.w	r2, r2, #8
 8004eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6999      	ldr	r1, [r3, #24]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	619a      	str	r2, [r3, #24]
      break;
 8004eee:	e064      	b.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 faa2 	bl	8005440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	021a      	lsls	r2, r3, #8
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	619a      	str	r2, [r3, #24]
      break;
 8004f30:	e043      	b.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 faf7 	bl	800552c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0208 	orr.w	r2, r2, #8
 8004f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0204 	bic.w	r2, r2, #4
 8004f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	61da      	str	r2, [r3, #28]
      break;
 8004f70:	e023      	b.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fb4b 	bl	8005614 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69d9      	ldr	r1, [r3, #28]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	021a      	lsls	r2, r3, #8
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	61da      	str	r2, [r3, #28]
      break;
 8004fb2:	e002      	b.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e0b4      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x186>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	d03e      	beq.n	80050a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005026:	f200 8087 	bhi.w	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	f000 8086 	beq.w	800513e <HAL_TIM_ConfigClockSource+0x172>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005036:	d87f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b70      	cmp	r3, #112	; 0x70
 800503a:	d01a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xa6>
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d87b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b60      	cmp	r3, #96	; 0x60
 8005042:	d050      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d877      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b50      	cmp	r3, #80	; 0x50
 800504a:	d03c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xfa>
 800504c:	2b50      	cmp	r3, #80	; 0x50
 800504e:	d873      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d058      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0x13a>
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d86f      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b30      	cmp	r3, #48	; 0x30
 800505a:	d064      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 800505c:	2b30      	cmp	r3, #48	; 0x30
 800505e:	d86b      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b20      	cmp	r3, #32
 8005062:	d060      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d867      	bhi.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05c      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b10      	cmp	r3, #16
 800506e:	d05a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0x15a>
 8005070:	e062      	b.n	8005138 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6899      	ldr	r1, [r3, #8]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f000 fcc1 	bl	8005a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	609a      	str	r2, [r3, #8]
      break;
 800509e:	e04f      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f000 fcaa 	bl	8005a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c2:	609a      	str	r2, [r3, #8]
      break;
 80050c4:	e03c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fb68 	bl	80057a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2150      	movs	r1, #80	; 0x50
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc77 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 80050e4:	e02c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	6859      	ldr	r1, [r3, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f000 fbc4 	bl	8005880 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2160      	movs	r1, #96	; 0x60
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc67 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005104:	e01c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6859      	ldr	r1, [r3, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	461a      	mov	r2, r3
 8005114:	f000 fb48 	bl	80057a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fc57 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005124:	e00c      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f000 fc4e 	bl	80059d2 <TIM_ITRx_SetConfig>
      break;
 8005136:	e003      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e000      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800513e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d831      	bhi.n	80051d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051b7 	.word	0x080051b7
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051d5 	.word	0x080051d5
 80051a8:	080051cb 	.word	0x080051cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	60fb      	str	r3, [r7, #12]

      break;
 80051b4:	e00f      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	60fb      	str	r3, [r7, #12]

      break;
 80051be:	e00a      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c6:	60fb      	str	r3, [r7, #12]

      break;
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	60fb      	str	r3, [r7, #12]

      break;
 80051d2:	e000      	b.n	80051d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80051d4:	bf00      	nop
  }

  return tmpreg;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a40      	ldr	r2, [pc, #256]	; (8005334 <TIM_Base_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <TIM_Base_SetConfig+0x40>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d00f      	beq.n	8005260 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3d      	ldr	r2, [pc, #244]	; (8005338 <TIM_Base_SetConfig+0x118>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00b      	beq.n	8005260 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3c      	ldr	r2, [pc, #240]	; (800533c <TIM_Base_SetConfig+0x11c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3b      	ldr	r2, [pc, #236]	; (8005340 <TIM_Base_SetConfig+0x120>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3a      	ldr	r2, [pc, #232]	; (8005344 <TIM_Base_SetConfig+0x124>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <TIM_Base_SetConfig+0x114>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d02b      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d027      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <TIM_Base_SetConfig+0x118>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d023      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2b      	ldr	r2, [pc, #172]	; (800533c <TIM_Base_SetConfig+0x11c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01f      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <TIM_Base_SetConfig+0x120>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01b      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a29      	ldr	r2, [pc, #164]	; (8005344 <TIM_Base_SetConfig+0x124>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d017      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a28      	ldr	r2, [pc, #160]	; (8005348 <TIM_Base_SetConfig+0x128>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a27      	ldr	r2, [pc, #156]	; (800534c <TIM_Base_SetConfig+0x12c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00f      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <TIM_Base_SetConfig+0x130>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00b      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <TIM_Base_SetConfig+0x134>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <TIM_Base_SetConfig+0x138>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a23      	ldr	r2, [pc, #140]	; (800535c <TIM_Base_SetConfig+0x13c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d108      	bne.n	80052e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <TIM_Base_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_Base_SetConfig+0xf8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <TIM_Base_SetConfig+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d103      	bne.n	8005320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	615a      	str	r2, [r3, #20]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40010400 	.word	0x40010400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800
 8005354:	40001800 	.word	0x40001800
 8005358:	40001c00 	.word	0x40001c00
 800535c:	40002000 	.word	0x40002000

08005360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f023 0201 	bic.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f023 0302 	bic.w	r3, r3, #2
 80053a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a20      	ldr	r2, [pc, #128]	; (8005438 <TIM_OC1_SetConfig+0xd8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC1_SetConfig+0x64>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <TIM_OC1_SetConfig+0xdc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10c      	bne.n	80053de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0308 	bic.w	r3, r3, #8
 80053ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a15      	ldr	r2, [pc, #84]	; (8005438 <TIM_OC1_SetConfig+0xd8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_OC1_SetConfig+0x8e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <TIM_OC1_SetConfig+0xdc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d111      	bne.n	8005412 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40010000 	.word	0x40010000
 800543c:	40010400 	.word	0x40010400

08005440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0210 	bic.w	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0320 	bic.w	r3, r3, #32
 800548a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a22      	ldr	r2, [pc, #136]	; (8005524 <TIM_OC2_SetConfig+0xe4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC2_SetConfig+0x68>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a21      	ldr	r2, [pc, #132]	; (8005528 <TIM_OC2_SetConfig+0xe8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10d      	bne.n	80054c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	; (8005524 <TIM_OC2_SetConfig+0xe4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_OC2_SetConfig+0x94>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a16      	ldr	r2, [pc, #88]	; (8005528 <TIM_OC2_SetConfig+0xe8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d113      	bne.n	80054fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40010400 	.word	0x40010400

0800552c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a21      	ldr	r2, [pc, #132]	; (800560c <TIM_OC3_SetConfig+0xe0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_OC3_SetConfig+0x66>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a20      	ldr	r2, [pc, #128]	; (8005610 <TIM_OC3_SetConfig+0xe4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d10d      	bne.n	80055ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <TIM_OC3_SetConfig+0xe0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_OC3_SetConfig+0x92>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <TIM_OC3_SetConfig+0xe4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d113      	bne.n	80055e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	621a      	str	r2, [r3, #32]
}
 8005600:	bf00      	nop
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40010000 	.word	0x40010000
 8005610:	40010400 	.word	0x40010400

08005614 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800565e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <TIM_OC4_SetConfig+0xa4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC4_SetConfig+0x68>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a11      	ldr	r2, [pc, #68]	; (80056bc <TIM_OC4_SetConfig+0xa8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d109      	bne.n	8005690 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40010400 	.word	0x40010400

080056c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a28      	ldr	r2, [pc, #160]	; (800578c <TIM_TI1_SetConfig+0xcc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d017      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a25      	ldr	r2, [pc, #148]	; (8005790 <TIM_TI1_SetConfig+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4a24      	ldr	r2, [pc, #144]	; (8005794 <TIM_TI1_SetConfig+0xd4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a23      	ldr	r2, [pc, #140]	; (8005798 <TIM_TI1_SetConfig+0xd8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <TIM_TI1_SetConfig+0xdc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <TIM_TI1_SetConfig+0xe0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_TI1_SetConfig+0x66>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <TIM_TI1_SetConfig+0xe4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <TIM_TI1_SetConfig+0x6a>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <TIM_TI1_SetConfig+0x6c>
 800572a:	2300      	movs	r3, #0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0303 	bic.w	r3, r3, #3
 8005736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e003      	b.n	800574a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	b2db      	uxtb	r3, r3
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f023 030a 	bic.w	r3, r3, #10
 8005764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 030a 	and.w	r3, r3, #10
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40010400 	.word	0x40010400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40001800 	.word	0x40001800

080057a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f023 0201 	bic.w	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 030a 	bic.w	r3, r3, #10
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005806:	b480      	push	{r7}
 8005808:	b087      	sub	sp, #28
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f023 0210 	bic.w	r2, r3, #16
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	031b      	lsls	r3, r3, #12
 800584a:	b29b      	uxth	r3, r3
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005858:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f023 0210 	bic.w	r2, r3, #16
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	031b      	lsls	r3, r3, #12
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800591c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	b2db      	uxtb	r3, r3
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005930:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	621a      	str	r2, [r3, #32]
}
 800594c:	bf00      	nop
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005996:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	b29b      	uxth	r3, r3
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	031b      	lsls	r3, r3, #12
 80059b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f043 0307 	orr.w	r3, r3, #7
 80059f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	021a      	lsls	r2, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 031f 	and.w	r3, r3, #31
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e05a      	b.n	8005b62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d01d      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a18      	ldr	r2, [pc, #96]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10c      	bne.n	8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40010400 	.word	0x40010400
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40001800 	.word	0x40001800

08005b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e03d      	b.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e03f      	b.n	8005cea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fd68 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fcdb 	bl	8006658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d11d      	bne.n	8005d48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_UART_Receive_IT+0x26>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e016      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Receive_IT+0x38>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e00f      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fab6 	bl	80062b0 <UART_Start_Receive_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b0ba      	sub	sp, #232	; 0xe8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_UART_IRQHandler+0x66>
 8005da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fb95 	bl	80064e2 <UART_Receive_IT>
      return;
 8005db8:	e256      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80de 	beq.w	8005f80 <HAL_UART_IRQHandler+0x22c>
 8005dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80d1 	beq.w	8005f80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_UART_IRQHandler+0xae>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <HAL_UART_IRQHandler+0xd2>
 8005e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f043 0202 	orr.w	r2, r3, #2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_UART_IRQHandler+0xf6>
 8005e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	f043 0204 	orr.w	r2, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d011      	beq.n	8005e7a <HAL_UART_IRQHandler+0x126>
 8005e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 81ed 	beq.w	800625e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14e>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb20 	bl	80064e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_UART_IRQHandler+0x17a>
 8005ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04f      	beq.n	8005f6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa28 	bl	8006324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d141      	bne.n	8005f66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1d9      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d013      	beq.n	8005f5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	4a7d      	ldr	r2, [pc, #500]	; (8006130 <HAL_UART_IRQHandler+0x3dc>)
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd f834 	bl	8002fb0 <HAL_DMA_Abort_IT>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e00e      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f990 	bl	8006284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e00a      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f98c 	bl	8006284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	e006      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f988 	bl	8006284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f7a:	e170      	b.n	800625e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	bf00      	nop
    return;
 8005f7e:	e16e      	b.n	800625e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 814a 	bne.w	800621e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8143 	beq.w	800621e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 813c 	beq.w	800621e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	f040 80b4 	bne.w	8006134 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8140 	beq.w	8006262 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fea:	429a      	cmp	r2, r3
 8005fec:	f080 8139 	bcs.w	8006262 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ff6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006002:	f000 8088 	beq.w	8006116 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800601c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800603e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800604a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800607a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800607e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e1      	bne.n	8006052 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800609e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e3      	bne.n	80060d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	4618      	mov	r0, r3
 8006112:	f7fc fedd 	bl	8002ed0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800611e:	b29b      	uxth	r3, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	b29b      	uxth	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f8b6 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800612c:	e099      	b.n	8006262 <HAL_UART_IRQHandler+0x50e>
 800612e:	bf00      	nop
 8006130:	080063eb 	.word	0x080063eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 808b 	beq.w	8006266 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8086 	beq.w	8006266 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800617e:	647a      	str	r2, [r7, #68]	; 0x44
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e3      	bne.n	800615a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3314      	adds	r3, #20
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	623b      	str	r3, [r7, #32]
   return(result);
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3314      	adds	r3, #20
 80061b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061b6:	633a      	str	r2, [r7, #48]	; 0x30
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e3      	bne.n	8006192 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061fc:	61fa      	str	r2, [r7, #28]
 80061fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	617b      	str	r3, [r7, #20]
   return(result);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e3      	bne.n	80061d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f83e 	bl	8006298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800621c:	e023      	b.n	8006266 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_UART_IRQHandler+0x4ea>
 800622a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8eb 	bl	8006412 <UART_Transmit_IT>
    return;
 800623c:	e014      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <HAL_UART_IRQHandler+0x514>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f92b 	bl	80064b2 <UART_EndTransmit_IT>
    return;
 800625c:	e004      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
    return;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
      return;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
      return;
 8006266:	bf00      	nop
  }
}
 8006268:	37e8      	adds	r7, #232	; 0xe8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2222      	movs	r2, #34	; 0x22
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0220 	orr.w	r2, r2, #32
 8006314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b095      	sub	sp, #84	; 0x54
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634c:	643a      	str	r2, [r7, #64]	; 0x40
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e5      	bne.n	800632c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	2b01      	cmp	r3, #1
 800639a:	d119      	bne.n	80063d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063bc:	61ba      	str	r2, [r7, #24]
 80063be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063de:	bf00      	nop
 80063e0:	3754      	adds	r7, #84	; 0x54
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff3d 	bl	8006284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b21      	cmp	r3, #33	; 0x21
 8006424:	d13e      	bne.n	80064a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642e:	d114      	bne.n	800645a <UART_Transmit_IT+0x48>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	621a      	str	r2, [r3, #32]
 8006458:	e008      	b.n	800646c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6211      	str	r1, [r2, #32]
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4619      	mov	r1, r3
 800647a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fecc 	bl	8006270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b08c      	sub	sp, #48	; 0x30
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b22      	cmp	r3, #34	; 0x22
 80064f4:	f040 80ab 	bne.w	800664e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d117      	bne.n	8006532 <UART_Receive_IT+0x50>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d113      	bne.n	8006532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	b29a      	uxth	r2, r3
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	; 0x28
 8006530:	e026      	b.n	8006580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006544:	d007      	beq.n	8006556 <UART_Receive_IT+0x74>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <UART_Receive_IT+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e008      	b.n	8006576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006570:	b2da      	uxtb	r2, r3
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4619      	mov	r1, r3
 800658e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006590:	2b00      	cmp	r3, #0
 8006592:	d15a      	bne.n	800664a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0220 	bic.w	r2, r2, #32
 80065a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d135      	bne.n	8006640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	623a      	str	r2, [r7, #32]
 80065fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69f9      	ldr	r1, [r7, #28]
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	61bb      	str	r3, [r7, #24]
   return(result);
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b10      	cmp	r3, #16
 800661a:	d10a      	bne.n	8006632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fe2d 	bl	8006298 <HAL_UARTEx_RxEventCallback>
 800663e:	e002      	b.n	8006646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fa fc81 	bl	8000f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e002      	b.n	8006650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e000      	b.n	8006650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800664e:	2302      	movs	r3, #2
  }
}
 8006650:	4618      	mov	r0, r3
 8006652:	3730      	adds	r7, #48	; 0x30
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b09f      	sub	sp, #124	; 0x7c
 800665e:	af00      	add	r7, sp, #0
 8006660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	ea40 0301 	orr.w	r3, r0, r1
 8006678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	431a      	orrs	r2, r3
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	431a      	orrs	r2, r3
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800669c:	f021 010c 	bic.w	r1, r1, #12
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	6999      	ldr	r1, [r3, #24]
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	ea40 0301 	orr.w	r3, r0, r1
 80066c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4bc5      	ldr	r3, [pc, #788]	; (80069dc <UART_SetConfig+0x384>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d004      	beq.n	80066d6 <UART_SetConfig+0x7e>
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4bc3      	ldr	r3, [pc, #780]	; (80069e0 <UART_SetConfig+0x388>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d103      	bne.n	80066de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d6:	f7fd fd35 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80066da:	6778      	str	r0, [r7, #116]	; 0x74
 80066dc:	e002      	b.n	80066e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066de:	f7fd fd1d 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80066e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	f040 80b6 	bne.w	800685c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f2:	461c      	mov	r4, r3
 80066f4:	f04f 0500 	mov.w	r5, #0
 80066f8:	4622      	mov	r2, r4
 80066fa:	462b      	mov	r3, r5
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006700:	415b      	adcs	r3, r3
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006708:	1912      	adds	r2, r2, r4
 800670a:	eb45 0303 	adc.w	r3, r5, r3
 800670e:	f04f 0000 	mov.w	r0, #0
 8006712:	f04f 0100 	mov.w	r1, #0
 8006716:	00d9      	lsls	r1, r3, #3
 8006718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800671c:	00d0      	lsls	r0, r2, #3
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	1911      	adds	r1, r2, r4
 8006724:	6639      	str	r1, [r7, #96]	; 0x60
 8006726:	416b      	adcs	r3, r5
 8006728:	667b      	str	r3, [r7, #100]	; 0x64
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	461a      	mov	r2, r3
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	1891      	adds	r1, r2, r2
 8006736:	63b9      	str	r1, [r7, #56]	; 0x38
 8006738:	415b      	adcs	r3, r3
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006744:	f7fa f98a 	bl	8000a5c <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4ba5      	ldr	r3, [pc, #660]	; (80069e4 <UART_SetConfig+0x38c>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	011e      	lsls	r6, r3, #4
 8006756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006758:	461c      	mov	r4, r3
 800675a:	f04f 0500 	mov.w	r5, #0
 800675e:	4622      	mov	r2, r4
 8006760:	462b      	mov	r3, r5
 8006762:	1891      	adds	r1, r2, r2
 8006764:	6339      	str	r1, [r7, #48]	; 0x30
 8006766:	415b      	adcs	r3, r3
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
 800676a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800676e:	1912      	adds	r2, r2, r4
 8006770:	eb45 0303 	adc.w	r3, r5, r3
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	00d9      	lsls	r1, r3, #3
 800677e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006782:	00d0      	lsls	r0, r2, #3
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	1911      	adds	r1, r2, r4
 800678a:	65b9      	str	r1, [r7, #88]	; 0x58
 800678c:	416b      	adcs	r3, r5
 800678e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	461a      	mov	r2, r3
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	1891      	adds	r1, r2, r2
 800679c:	62b9      	str	r1, [r7, #40]	; 0x28
 800679e:	415b      	adcs	r3, r3
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067aa:	f7fa f957 	bl	8000a5c <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4b8c      	ldr	r3, [pc, #560]	; (80069e4 <UART_SetConfig+0x38c>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	2164      	movs	r1, #100	; 0x64
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	3332      	adds	r3, #50	; 0x32
 80067c6:	4a87      	ldr	r2, [pc, #540]	; (80069e4 <UART_SetConfig+0x38c>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067d4:	441e      	add	r6, r3
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	4618      	mov	r0, r3
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	1894      	adds	r4, r2, r2
 80067e4:	623c      	str	r4, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	1812      	adds	r2, r2, r0
 80067f0:	eb41 0303 	adc.w	r3, r1, r3
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	f04f 0500 	mov.w	r5, #0
 80067fc:	00dd      	lsls	r5, r3, #3
 80067fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006802:	00d4      	lsls	r4, r2, #3
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	1814      	adds	r4, r2, r0
 800680a:	653c      	str	r4, [r7, #80]	; 0x50
 800680c:	414b      	adcs	r3, r1
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	461a      	mov	r2, r3
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	1891      	adds	r1, r2, r2
 800681c:	61b9      	str	r1, [r7, #24]
 800681e:	415b      	adcs	r3, r3
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800682a:	f7fa f917 	bl	8000a5c <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4b6c      	ldr	r3, [pc, #432]	; (80069e4 <UART_SetConfig+0x38c>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <UART_SetConfig+0x38c>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 0207 	and.w	r2, r3, #7
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4432      	add	r2, r6
 8006858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800685a:	e0b9      	b.n	80069d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800685c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685e:	461c      	mov	r4, r3
 8006860:	f04f 0500 	mov.w	r5, #0
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	1891      	adds	r1, r2, r2
 800686a:	6139      	str	r1, [r7, #16]
 800686c:	415b      	adcs	r3, r3
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006874:	1912      	adds	r2, r2, r4
 8006876:	eb45 0303 	adc.w	r3, r5, r3
 800687a:	f04f 0000 	mov.w	r0, #0
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	00d9      	lsls	r1, r3, #3
 8006884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006888:	00d0      	lsls	r0, r2, #3
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	eb12 0804 	adds.w	r8, r2, r4
 8006892:	eb43 0905 	adc.w	r9, r3, r5
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ae:	0082      	lsls	r2, r0, #2
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7fa f8d2 	bl	8000a5c <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <UART_SetConfig+0x38c>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011e      	lsls	r6, r3, #4
 80068c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c8:	4618      	mov	r0, r3
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	1894      	adds	r4, r2, r2
 80068d4:	60bc      	str	r4, [r7, #8]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068de:	1812      	adds	r2, r2, r0
 80068e0:	eb41 0303 	adc.w	r3, r1, r3
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	f04f 0500 	mov.w	r5, #0
 80068ec:	00dd      	lsls	r5, r3, #3
 80068ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068f2:	00d4      	lsls	r4, r2, #3
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	1814      	adds	r4, r2, r0
 80068fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80068fc:	414b      	adcs	r3, r1
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006918:	0082      	lsls	r2, r0, #2
 800691a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800691e:	f7fa f89d 	bl	8000a5c <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <UART_SetConfig+0x38c>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <UART_SetConfig+0x38c>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	441e      	add	r6, r3
 8006948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694a:	4618      	mov	r0, r3
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	1894      	adds	r4, r2, r2
 8006956:	603c      	str	r4, [r7, #0]
 8006958:	415b      	adcs	r3, r3
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	1812      	adds	r2, r2, r0
 8006962:	eb41 0303 	adc.w	r3, r1, r3
 8006966:	f04f 0400 	mov.w	r4, #0
 800696a:	f04f 0500 	mov.w	r5, #0
 800696e:	00dd      	lsls	r5, r3, #3
 8006970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006974:	00d4      	lsls	r4, r2, #3
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	eb12 0a00 	adds.w	sl, r2, r0
 800697e:	eb43 0b01 	adc.w	fp, r3, r1
 8006982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	008b      	lsls	r3, r1, #2
 8006996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800699a:	0082      	lsls	r2, r0, #2
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7fa f85c 	bl	8000a5c <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <UART_SetConfig+0x38c>)
 80069aa:	fba3 1302 	umull	r1, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	2164      	movs	r1, #100	; 0x64
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	3332      	adds	r3, #50	; 0x32
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <UART_SetConfig+0x38c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4432      	add	r2, r6
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	377c      	adds	r7, #124	; 0x7c
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40011400 	.word	0x40011400
 80069e4:	51eb851f 	.word	0x51eb851f

080069e8 <__NVIC_SetPriority>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	db0a      	blt.n	8006a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	490c      	ldr	r1, [pc, #48]	; (8006a34 <__NVIC_SetPriority+0x4c>)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	0112      	lsls	r2, r2, #4
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a10:	e00a      	b.n	8006a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	4908      	ldr	r1, [pc, #32]	; (8006a38 <__NVIC_SetPriority+0x50>)
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	0112      	lsls	r2, r2, #4
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	440b      	add	r3, r1
 8006a26:	761a      	strb	r2, [r3, #24]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	e000e100 	.word	0xe000e100
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <SysTick_Handler+0x1c>)
 8006a42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a44:	f001 ff6e 	bl	8008924 <xTaskGetSchedulerState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a4e:	f002 fd53 	bl	80094f8 <xPortSysTickHandler>
  }
}
 8006a52:	bf00      	nop
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	e000e010 	.word	0xe000e010

08006a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a60:	2100      	movs	r1, #0
 8006a62:	f06f 0004 	mvn.w	r0, #4
 8006a66:	f7ff ffbf 	bl	80069e8 <__NVIC_SetPriority>
#endif
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a76:	f3ef 8305 	mrs	r3, IPSR
 8006a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a82:	f06f 0305 	mvn.w	r3, #5
 8006a86:	607b      	str	r3, [r7, #4]
 8006a88:	e00c      	b.n	8006aa4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <osKernelInitialize+0x44>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <osKernelInitialize+0x44>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	e002      	b.n	8006aa4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aa4:	687b      	ldr	r3, [r7, #4]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000330 	.word	0x20000330

08006ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006aca:	f06f 0305 	mvn.w	r3, #5
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	e010      	b.n	8006af4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <osKernelStart+0x48>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d109      	bne.n	8006aee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ada:	f7ff ffbf 	bl	8006a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ade:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <osKernelStart+0x48>)
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ae4:	f001 fac2 	bl	800806c <vTaskStartScheduler>
      stat = osOK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	e002      	b.n	8006af4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006af4:	687b      	ldr	r3, [r7, #4]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000330 	.word	0x20000330

08006b04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08e      	sub	sp, #56	; 0x38
 8006b08:	af04      	add	r7, sp, #16
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b14:	f3ef 8305 	mrs	r3, IPSR
 8006b18:	617b      	str	r3, [r7, #20]
  return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d17e      	bne.n	8006c1e <osThreadNew+0x11a>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d07b      	beq.n	8006c1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b2a:	2318      	movs	r3, #24
 8006b2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d045      	beq.n	8006bca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <osThreadNew+0x48>
        name = attr->name;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <osThreadNew+0x6e>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b38      	cmp	r3, #56	; 0x38
 8006b64:	d805      	bhi.n	8006b72 <osThreadNew+0x6e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <osThreadNew+0x72>
        return (NULL);
 8006b72:	2300      	movs	r3, #0
 8006b74:	e054      	b.n	8006c20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00e      	beq.n	8006bac <osThreadNew+0xa8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2bbb      	cmp	r3, #187	; 0xbb
 8006b94:	d90a      	bls.n	8006bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <osThreadNew+0xa8>
        mem = 1;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	e010      	b.n	8006bce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <osThreadNew+0xca>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <osThreadNew+0xca>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <osThreadNew+0xca>
          mem = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e001      	b.n	8006bce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d110      	bne.n	8006bf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f001 f852 	bl	8007c94 <xTaskCreateStatic>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	e013      	b.n	8006c1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 f89d 	bl	8007d4e <xTaskCreate>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d001      	beq.n	8006c1e <osThreadNew+0x11a>
            hTask = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c1e:	693b      	ldr	r3, [r7, #16]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3728      	adds	r7, #40	; 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c30:	f3ef 8305 	mrs	r3, IPSR
 8006c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <osDelay+0x1c>
    stat = osErrorISR;
 8006c3c:	f06f 0305 	mvn.w	r3, #5
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e007      	b.n	8006c54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f9d8 	bl	8008004 <vTaskDelay>
    }
  }

  return (stat);
 8006c54:	68fb      	ldr	r3, [r7, #12]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b08a      	sub	sp, #40	; 0x28
 8006c62:	af02      	add	r7, sp, #8
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6e:	f3ef 8305 	mrs	r3, IPSR
 8006c72:	613b      	str	r3, [r7, #16]
  return(result);
 8006c74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d15f      	bne.n	8006d3a <osMessageQueueNew+0xdc>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d05c      	beq.n	8006d3a <osMessageQueueNew+0xdc>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d059      	beq.n	8006d3a <osMessageQueueNew+0xdc>
    mem = -1;
 8006c86:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d029      	beq.n	8006ce6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d012      	beq.n	8006cc0 <osMessageQueueNew+0x62>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b4f      	cmp	r3, #79	; 0x4f
 8006ca0:	d90e      	bls.n	8006cc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695a      	ldr	r2, [r3, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <osMessageQueueNew+0x62>
        mem = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e014      	b.n	8006cea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d110      	bne.n	8006cea <osMessageQueueNew+0x8c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d108      	bne.n	8006cea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <osMessageQueueNew+0x8c>
          mem = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	e001      	b.n	8006cea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10b      	bne.n	8006d08 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	9100      	str	r1, [sp, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa4e 	bl	80071a0 <xQueueGenericCreateStatic>
 8006d04:	61f8      	str	r0, [r7, #28]
 8006d06:	e008      	b.n	8006d1a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d0e:	2200      	movs	r2, #0
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fabc 	bl	8007290 <xQueueGenericCreate>
 8006d18:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e001      	b.n	8006d32 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	69f8      	ldr	r0, [r7, #28]
 8006d36:	f000 ff4f 	bl	8007bd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d3a:	69fb      	ldr	r3, [r7, #28]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5c:	f3ef 8305 	mrs	r3, IPSR
 8006d60:	617b      	str	r3, [r7, #20]
  return(result);
 8006d62:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d028      	beq.n	8006dba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <osMessageQueuePut+0x36>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <osMessageQueuePut+0x36>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006d7a:	f06f 0303 	mvn.w	r3, #3
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e038      	b.n	8006df4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d86:	f107 0210 	add.w	r2, r7, #16
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	69b8      	ldr	r0, [r7, #24]
 8006d90:	f000 fbda 	bl	8007548 <xQueueGenericSendFromISR>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d003      	beq.n	8006da2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006d9a:	f06f 0302 	mvn.w	r3, #2
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e028      	b.n	8006df4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d025      	beq.n	8006df4 <osMessageQueuePut+0xb0>
 8006da8:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <osMessageQueuePut+0xbc>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	e01c      	b.n	8006df4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <osMessageQueuePut+0x82>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006dc6:	f06f 0303 	mvn.w	r3, #3
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e012      	b.n	8006df4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006dce:	2300      	movs	r3, #0
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	69b8      	ldr	r0, [r7, #24]
 8006dd6:	f000 fab9 	bl	800734c <xQueueGenericSend>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d009      	beq.n	8006df4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006de6:	f06f 0301 	mvn.w	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	e002      	b.n	8006df4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006dee:	f06f 0302 	mvn.w	r3, #2
 8006df2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006df4:	69fb      	ldr	r3, [r7, #28]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e1a:	f3ef 8305 	mrs	r3, IPSR
 8006e1e:	617b      	str	r3, [r7, #20]
  return(result);
 8006e20:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d028      	beq.n	8006e78 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <osMessageQueueGet+0x34>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <osMessageQueueGet+0x34>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006e38:	f06f 0303 	mvn.w	r3, #3
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e037      	b.n	8006eb0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e44:	f107 0310 	add.w	r3, r7, #16
 8006e48:	461a      	mov	r2, r3
 8006e4a:	68b9      	ldr	r1, [r7, #8]
 8006e4c:	69b8      	ldr	r0, [r7, #24]
 8006e4e:	f000 fcf7 	bl	8007840 <xQueueReceiveFromISR>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d003      	beq.n	8006e60 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006e58:	f06f 0302 	mvn.w	r3, #2
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	e027      	b.n	8006eb0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d024      	beq.n	8006eb0 <osMessageQueueGet+0xac>
 8006e66:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <osMessageQueueGet+0xb8>)
 8006e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	e01b      	b.n	8006eb0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <osMessageQueueGet+0x80>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006e84:	f06f 0303 	mvn.w	r3, #3
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e011      	b.n	8006eb0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	69b8      	ldr	r0, [r7, #24]
 8006e92:	f000 fbf5 	bl	8007680 <xQueueReceive>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d009      	beq.n	8006eb0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006ea2:	f06f 0301 	mvn.w	r3, #1
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	e002      	b.n	8006eb0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006eaa:	f06f 0302 	mvn.w	r3, #2
 8006eae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006eb0:	69fb      	ldr	r3, [r7, #28]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	e00e      	b.n	8006ef6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed8:	f3ef 8305 	mrs	r3, IPSR
 8006edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ede:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006ee4:	6938      	ldr	r0, [r7, #16]
 8006ee6:	f000 fd49 	bl	800797c <uxQueueMessagesWaitingFromISR>
 8006eea:	6178      	str	r0, [r7, #20]
 8006eec:	e003      	b.n	8006ef6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006eee:	6938      	ldr	r0, [r7, #16]
 8006ef0:	f000 fd26 	bl	8007940 <uxQueueMessagesWaiting>
 8006ef4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006ef6:	697b      	ldr	r3, [r7, #20]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8006f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4a06      	ldr	r2, [pc, #24]	; (8006f30 <vApplicationGetIdleTaskMemory+0x30>)
 8006f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	601a      	str	r2, [r3, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000334 	.word	0x20000334
 8006f30:	200003f0 	.word	0x200003f0

08006f34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a07      	ldr	r2, [pc, #28]	; (8006f60 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4a06      	ldr	r2, [pc, #24]	; (8006f64 <vApplicationGetTimerTaskMemory+0x30>)
 8006f4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	200005f0 	.word	0x200005f0
 8006f64:	200006ac 	.word	0x200006ac

08006f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f103 0208 	add.w	r2, r3, #8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f103 0208 	add.w	r2, r3, #8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f103 0208 	add.w	r2, r3, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d103      	bne.n	800702a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e00c      	b.n	8007044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3308      	adds	r3, #8
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <vListInsert+0x2e>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	429a      	cmp	r2, r3
 8007042:	d2f6      	bcs.n	8007032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	601a      	str	r2, [r3, #0]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6892      	ldr	r2, [r2, #8]
 8007092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6852      	ldr	r2, [r2, #4]
 800709c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d103      	bne.n	80070b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070fa:	f002 f96b 	bl	80093d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	441a      	add	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	3b01      	subs	r3, #1
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007130:	fb01 f303 	mul.w	r3, r1, r3
 8007134:	441a      	add	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d114      	bne.n	800717a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01a      	beq.n	800718e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fa1f 	bl	80085a0 <xTaskRemoveFromEventList>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d012      	beq.n	800718e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007168:	4b0c      	ldr	r3, [pc, #48]	; (800719c <xQueueGenericReset+0xcc>)
 800716a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	e009      	b.n	800718e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3310      	adds	r3, #16
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fef2 	bl	8006f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3324      	adds	r3, #36	; 0x24
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff feed 	bl	8006f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800718e:	f002 f951 	bl	8009434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007192:	2301      	movs	r3, #1
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <xQueueGenericCreateStatic+0x52>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <xQueueGenericCreateStatic+0x56>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGenericCreateStatic+0x58>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	623b      	str	r3, [r7, #32]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <xQueueGenericCreateStatic+0x7e>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <xQueueGenericCreateStatic+0x82>
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <xQueueGenericCreateStatic+0x84>
 8007222:	2300      	movs	r3, #0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	61fb      	str	r3, [r7, #28]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800723e:	2350      	movs	r3, #80	; 0x50
 8007240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b50      	cmp	r3, #80	; 0x50
 8007246:	d00a      	beq.n	800725e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	61bb      	str	r3, [r7, #24]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800725e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f83f 	bl	8007304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007288:	4618      	mov	r0, r3
 800728a:	3730      	adds	r7, #48	; 0x30
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007290:	b580      	push	{r7, lr}
 8007292:	b08a      	sub	sp, #40	; 0x28
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	613b      	str	r3, [r7, #16]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3350      	adds	r3, #80	; 0x50
 80072c8:	4618      	mov	r0, r3
 80072ca:	f002 f9a5 	bl	8009618 <pvPortMalloc>
 80072ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d011      	beq.n	80072fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3350      	adds	r3, #80	; 0x50
 80072de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072e8:	79fa      	ldrb	r2, [r7, #7]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f805 	bl	8007304 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072fa:	69bb      	ldr	r3, [r7, #24]
	}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e002      	b.n	8007326 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007332:	2101      	movs	r1, #1
 8007334:	69b8      	ldr	r0, [r7, #24]
 8007336:	f7ff fecb 	bl	80070d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	; 0x38
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800735a:	2300      	movs	r3, #0
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericSend+0x32>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <xQueueGenericSend+0x40>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSend+0x44>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSend+0x46>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xQueueGenericSend+0x60>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <xQueueGenericSend+0x6e>
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <xQueueGenericSend+0x72>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <xQueueGenericSend+0x74>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <xQueueGenericSend+0x8e>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	623b      	str	r3, [r7, #32]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073da:	f001 faa3 	bl	8008924 <xTaskGetSchedulerState>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <xQueueGenericSend+0x9e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <xQueueGenericSend+0xa2>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <xQueueGenericSend+0xa4>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <xQueueGenericSend+0xbe>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	61fb      	str	r3, [r7, #28]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800740a:	f001 ffe3 	bl	80093d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <xQueueGenericSend+0xd4>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d129      	bne.n	8007474 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007426:	f000 fac7 	bl	80079b8 <prvCopyDataToQueue>
 800742a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d010      	beq.n	8007456 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	4618      	mov	r0, r3
 800743a:	f001 f8b1 	bl	80085a0 <xTaskRemoveFromEventList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d013      	beq.n	800746c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007444:	4b3f      	ldr	r3, [pc, #252]	; (8007544 <xQueueGenericSend+0x1f8>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	e00a      	b.n	800746c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800745c:	4b39      	ldr	r3, [pc, #228]	; (8007544 <xQueueGenericSend+0x1f8>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800746c:	f001 ffe2 	bl	8009434 <vPortExitCritical>
				return pdPASS;
 8007470:	2301      	movs	r3, #1
 8007472:	e063      	b.n	800753c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800747a:	f001 ffdb 	bl	8009434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800747e:	2300      	movs	r3, #0
 8007480:	e05c      	b.n	800753c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f8eb 	bl	8008668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007496:	f001 ffcd 	bl	8009434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800749a:	f000 fe57 	bl	800814c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800749e:	f001 ff99 	bl	80093d4 <vPortEnterCritical>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d103      	bne.n	80074b8 <xQueueGenericSend+0x16c>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d103      	bne.n	80074ce <xQueueGenericSend+0x182>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ce:	f001 ffb1 	bl	8009434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074d2:	1d3a      	adds	r2, r7, #4
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f8da 	bl	8008694 <xTaskCheckForTimeOut>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d124      	bne.n	8007530 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e8:	f000 fb5e 	bl	8007ba8 <prvIsQueueFull>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d018      	beq.n	8007524 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	3310      	adds	r3, #16
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f800 	bl	8008500 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007502:	f000 fae9 	bl	8007ad8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007506:	f000 fe2f 	bl	8008168 <xTaskResumeAll>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	f47f af7c 	bne.w	800740a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <xQueueGenericSend+0x1f8>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	e772      	b.n	800740a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007526:	f000 fad7 	bl	8007ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800752a:	f000 fe1d 	bl	8008168 <xTaskResumeAll>
 800752e:	e76c      	b.n	800740a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007532:	f000 fad1 	bl	8007ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007536:	f000 fe17 	bl	8008168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800753a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800753c:	4618      	mov	r0, r3
 800753e:	3738      	adds	r7, #56	; 0x38
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b090      	sub	sp, #64	; 0x40
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <xQueueGenericSendFromISR+0x3c>
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <xQueueGenericSendFromISR+0x40>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <xQueueGenericSendFromISR+0x42>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSendFromISR+0x6a>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <xQueueGenericSendFromISR+0x6e>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <xQueueGenericSendFromISR+0x70>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	623b      	str	r3, [r7, #32]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075d2:	f001 ffe1 	bl	8009598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075d6:	f3ef 8211 	mrs	r2, BASEPRI
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	61fa      	str	r2, [r7, #28]
 80075ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d302      	bcc.n	8007604 <xQueueGenericSendFromISR+0xbc>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d12f      	bne.n	8007664 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800760a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800761a:	f000 f9cd 	bl	80079b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800761e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d112      	bne.n	800764e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d016      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	4618      	mov	r0, r3
 8007636:	f000 ffb3 	bl	80085a0 <xTaskRemoveFromEventList>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	e007      	b.n	800765e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800764e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007652:	3301      	adds	r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	b25a      	sxtb	r2, r3
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800765e:	2301      	movs	r3, #1
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007662:	e001      	b.n	8007668 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007664:	2300      	movs	r3, #0
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007672:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007676:	4618      	mov	r0, r3
 8007678:	3740      	adds	r7, #64	; 0x40
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08c      	sub	sp, #48	; 0x30
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <xQueueReceive+0x30>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	623b      	str	r3, [r7, #32]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <xQueueReceive+0x3e>
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <xQueueReceive+0x42>
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <xQueueReceive+0x44>
 80076c2:	2300      	movs	r3, #0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueReceive+0x5e>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	61fb      	str	r3, [r7, #28]
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076de:	f001 f921 	bl	8008924 <xTaskGetSchedulerState>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <xQueueReceive+0x6e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <xQueueReceive+0x72>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <xQueueReceive+0x74>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <xQueueReceive+0x8e>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	61bb      	str	r3, [r7, #24]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800770e:	f001 fe61 	bl	80093d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01f      	beq.n	800775e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007722:	f000 f9b3 	bl	8007a8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00f      	beq.n	8007756 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	3310      	adds	r3, #16
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ff30 	bl	80085a0 <xTaskRemoveFromEventList>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007746:	4b3d      	ldr	r3, [pc, #244]	; (800783c <xQueueReceive+0x1bc>)
 8007748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007756:	f001 fe6d 	bl	8009434 <vPortExitCritical>
				return pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	e069      	b.n	8007832 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d103      	bne.n	800776c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007764:	f001 fe66 	bl	8009434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007768:	2300      	movs	r3, #0
 800776a:	e062      	b.n	8007832 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d106      	bne.n	8007780 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007772:	f107 0310 	add.w	r3, r7, #16
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ff76 	bl	8008668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007780:	f001 fe58 	bl	8009434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007784:	f000 fce2 	bl	800814c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007788:	f001 fe24 	bl	80093d4 <vPortEnterCritical>
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007792:	b25b      	sxtb	r3, r3
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d103      	bne.n	80077a2 <xQueueReceive+0x122>
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a8:	b25b      	sxtb	r3, r3
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d103      	bne.n	80077b8 <xQueueReceive+0x138>
 80077b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b8:	f001 fe3c 	bl	8009434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077bc:	1d3a      	adds	r2, r7, #4
 80077be:	f107 0310 	add.w	r3, r7, #16
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 ff65 	bl	8008694 <xTaskCheckForTimeOut>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d123      	bne.n	8007818 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d2:	f000 f9d3 	bl	8007b7c <prvIsQueueEmpty>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d017      	beq.n	800780c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	3324      	adds	r3, #36	; 0x24
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 fe8b 	bl	8008500 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ec:	f000 f974 	bl	8007ad8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f0:	f000 fcba 	bl	8008168 <xTaskResumeAll>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d189      	bne.n	800770e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80077fa:	4b10      	ldr	r3, [pc, #64]	; (800783c <xQueueReceive+0x1bc>)
 80077fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	e780      	b.n	800770e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800780c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780e:	f000 f963 	bl	8007ad8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007812:	f000 fca9 	bl	8008168 <xTaskResumeAll>
 8007816:	e77a      	b.n	800770e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781a:	f000 f95d 	bl	8007ad8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800781e:	f000 fca3 	bl	8008168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007824:	f000 f9aa 	bl	8007b7c <prvIsQueueEmpty>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	f43f af6f 	beq.w	800770e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007832:	4618      	mov	r0, r3
 8007834:	3730      	adds	r7, #48	; 0x30
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	623b      	str	r3, [r7, #32]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d103      	bne.n	800787a <xQueueReceiveFromISR+0x3a>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <xQueueReceiveFromISR+0x3e>
 800787a:	2301      	movs	r3, #1
 800787c:	e000      	b.n	8007880 <xQueueReceiveFromISR+0x40>
 800787e:	2300      	movs	r3, #0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	61fb      	str	r3, [r7, #28]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800789a:	f001 fe7d 	bl	8009598 <vPortValidateInterruptPriority>
	__asm volatile
 800789e:	f3ef 8211 	mrs	r2, BASEPRI
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61ba      	str	r2, [r7, #24]
 80078b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02f      	beq.n	8007926 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d4:	f000 f8da 	bl	8007a8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	1e5a      	subs	r2, r3, #1
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80078e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d112      	bne.n	8007910 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	3310      	adds	r3, #16
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fe52 	bl	80085a0 <xTaskRemoveFromEventList>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00e      	beq.n	8007920 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	e007      	b.n	8007920 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007914:	3301      	adds	r3, #1
 8007916:	b2db      	uxtb	r3, r3
 8007918:	b25a      	sxtb	r2, r3
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007920:	2301      	movs	r3, #1
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
 8007924:	e001      	b.n	800792a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f383 8811 	msr	BASEPRI, r3
}
 8007934:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007938:	4618      	mov	r0, r3
 800793a:	3738      	adds	r7, #56	; 0x38
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	60bb      	str	r3, [r7, #8]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007964:	f001 fd36 	bl	80093d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800796e:	f001 fd61 	bl	8009434 <vPortExitCritical>

	return uxReturn;
 8007972:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80079aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d14d      	bne.n	8007a7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ffbc 	bl	8008960 <xTaskPriorityDisinherit>
 80079e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	609a      	str	r2, [r3, #8]
 80079f0:	e043      	b.n	8007a7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d119      	bne.n	8007a2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6858      	ldr	r0, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	461a      	mov	r2, r3
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	f002 f81e 	bl	8009a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d32b      	bcc.n	8007a7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	e026      	b.n	8007a7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	68d8      	ldr	r0, [r3, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	461a      	mov	r2, r3
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	f002 f804 	bl	8009a44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a44:	425b      	negs	r3, r3
 8007a46:	441a      	add	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d207      	bcs.n	8007a68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	425b      	negs	r3, r3
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d105      	bne.n	8007a7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a82:	697b      	ldr	r3, [r7, #20]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	441a      	add	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d303      	bcc.n	8007ac0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68d9      	ldr	r1, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6838      	ldr	r0, [r7, #0]
 8007acc:	f001 ffba 	bl	8009a44 <memcpy>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ae0:	f001 fc78 	bl	80093d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aec:	e011      	b.n	8007b12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d012      	beq.n	8007b1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3324      	adds	r3, #36	; 0x24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fd50 	bl	80085a0 <xTaskRemoveFromEventList>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b06:	f000 fe27 	bl	8008758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dce9      	bgt.n	8007aee <prvUnlockQueue+0x16>
 8007b1a:	e000      	b.n	8007b1e <prvUnlockQueue+0x46>
					break;
 8007b1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	22ff      	movs	r2, #255	; 0xff
 8007b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 fc85 	bl	8009434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b2a:	f001 fc53 	bl	80093d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b36:	e011      	b.n	8007b5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3310      	adds	r3, #16
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fd2b 	bl	80085a0 <xTaskRemoveFromEventList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b50:	f000 fe02 	bl	8008758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b54:	7bbb      	ldrb	r3, [r7, #14]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dce9      	bgt.n	8007b38 <prvUnlockQueue+0x60>
 8007b64:	e000      	b.n	8007b68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b70:	f001 fc60 	bl	8009434 <vPortExitCritical>
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b84:	f001 fc26 	bl	80093d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e001      	b.n	8007b9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b9a:	f001 fc4b 	bl	8009434 <vPortExitCritical>

	return xReturn;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bb0:	f001 fc10 	bl	80093d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d102      	bne.n	8007bc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e001      	b.n	8007bca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bca:	f001 fc33 	bl	8009434 <vPortExitCritical>

	return xReturn;
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e014      	b.n	8007c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007be8:	4a0f      	ldr	r2, [pc, #60]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bf4:	490c      	ldr	r1, [pc, #48]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	; (8007c28 <vQueueAddToRegistry+0x50>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	4413      	add	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c0a:	e006      	b.n	8007c1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b07      	cmp	r3, #7
 8007c16:	d9e7      	bls.n	8007be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20004d54 	.word	0x20004d54

08007c2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c3c:	f001 fbca 	bl	80093d4 <vPortEnterCritical>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c46:	b25b      	sxtb	r3, r3
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d103      	bne.n	8007c56 <vQueueWaitForMessageRestricted+0x2a>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d103      	bne.n	8007c6c <vQueueWaitForMessageRestricted+0x40>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6c:	f001 fbe2 	bl	8009434 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fc61 	bl	8008548 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c86:	6978      	ldr	r0, [r7, #20]
 8007c88:	f7ff ff26 	bl	8007ad8 <prvUnlockQueue>
	}
 8007c8c:	bf00      	nop
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	623b      	str	r3, [r7, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xTaskCreateStatic+0x46>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	61fb      	str	r3, [r7, #28]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cda:	23bc      	movs	r3, #188	; 0xbc
 8007cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2bbc      	cmp	r3, #188	; 0xbc
 8007ce2:	d00a      	beq.n	8007cfa <xTaskCreateStatic+0x66>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61bb      	str	r3, [r7, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01e      	beq.n	8007d40 <xTaskCreateStatic+0xac>
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01b      	beq.n	8007d40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2202      	movs	r2, #2
 8007d16:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9303      	str	r3, [sp, #12]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	9302      	str	r3, [sp, #8]
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f850 	bl	8007dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d3a:	f000 f8f3 	bl	8007f24 <prvAddNewTaskToReadyList>
 8007d3e:	e001      	b.n	8007d44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d44:	697b      	ldr	r3, [r7, #20]
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08c      	sub	sp, #48	; 0x30
 8007d52:	af04      	add	r7, sp, #16
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d5e:	88fb      	ldrh	r3, [r7, #6]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fc58 	bl	8009618 <pvPortMalloc>
 8007d68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d70:	20bc      	movs	r0, #188	; 0xbc
 8007d72:	f001 fc51 	bl	8009618 <pvPortMalloc>
 8007d76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	631a      	str	r2, [r3, #48]	; 0x30
 8007d84:	e005      	b.n	8007d92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d86:	6978      	ldr	r0, [r7, #20]
 8007d88:	f001 fd12 	bl	80097b0 <vPortFree>
 8007d8c:	e001      	b.n	8007d92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f80e 	bl	8007dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dbc:	69f8      	ldr	r0, [r7, #28]
 8007dbe:	f000 f8b1 	bl	8007f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	61bb      	str	r3, [r7, #24]
 8007dc6:	e002      	b.n	8007dce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007dce:	69bb      	ldr	r3, [r7, #24]
	}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	461a      	mov	r2, r3
 8007df0:	21a5      	movs	r1, #165	; 0xa5
 8007df2:	f001 fe35 	bl	8009a60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	3b01      	subs	r3, #1
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	617b      	str	r3, [r7, #20]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d01f      	beq.n	8007e76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e012      	b.n	8007e62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	7819      	ldrb	r1, [r3, #0]
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	3334      	adds	r3, #52	; 0x34
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d9e9      	bls.n	8007e3c <prvInitialiseNewTask+0x64>
 8007e68:	e000      	b.n	8007e6c <prvInitialiseNewTask+0x94>
			{
				break;
 8007e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e74:	e003      	b.n	8007e7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	2b37      	cmp	r3, #55	; 0x37
 8007e82:	d901      	bls.n	8007e88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e84:	2337      	movs	r3, #55	; 0x37
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f882 	bl	8006fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff f87d 	bl	8006fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	3354      	adds	r3, #84	; 0x54
 8007ed8:	2260      	movs	r2, #96	; 0x60
 8007eda:	2100      	movs	r1, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fdbf 	bl	8009a60 <memset>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	4a0c      	ldr	r2, [pc, #48]	; (8007f18 <prvInitialiseNewTask+0x140>)
 8007ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <prvInitialiseNewTask+0x144>)
 8007eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	4a0b      	ldr	r2, [pc, #44]	; (8007f20 <prvInitialiseNewTask+0x148>)
 8007ef2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	69b8      	ldr	r0, [r7, #24]
 8007efa:	f001 f941 	bl	8009180 <pxPortInitialiseStack>
 8007efe:	4602      	mov	r2, r0
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f10:	bf00      	nop
 8007f12:	3720      	adds	r7, #32
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	0800a61c 	.word	0x0800a61c
 8007f1c:	0800a63c 	.word	0x0800a63c
 8007f20:	0800a5fc 	.word	0x0800a5fc

08007f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f2c:	f001 fa52 	bl	80093d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f30:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <prvAddNewTaskToReadyList+0xc4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <prvAddNewTaskToReadyList+0xc4>)
 8007f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f3a:	4b2c      	ldr	r3, [pc, #176]	; (8007fec <prvAddNewTaskToReadyList+0xc8>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f42:	4a2a      	ldr	r2, [pc, #168]	; (8007fec <prvAddNewTaskToReadyList+0xc8>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f48:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <prvAddNewTaskToReadyList+0xc4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d110      	bne.n	8007f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f50:	f000 fc26 	bl	80087a0 <prvInitialiseTaskLists>
 8007f54:	e00d      	b.n	8007f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f56:	4b26      	ldr	r3, [pc, #152]	; (8007ff0 <prvAddNewTaskToReadyList+0xcc>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f5e:	4b23      	ldr	r3, [pc, #140]	; (8007fec <prvAddNewTaskToReadyList+0xc8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d802      	bhi.n	8007f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f6c:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <prvAddNewTaskToReadyList+0xc8>)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f72:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <prvAddNewTaskToReadyList+0xd0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <prvAddNewTaskToReadyList+0xd0>)
 8007f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <prvAddNewTaskToReadyList+0xd0>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <prvAddNewTaskToReadyList+0xd4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d903      	bls.n	8007f98 <prvAddNewTaskToReadyList+0x74>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <prvAddNewTaskToReadyList+0xd4>)
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <prvAddNewTaskToReadyList+0xd8>)
 8007fa6:	441a      	add	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f7ff f807 	bl	8006fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fb4:	f001 fa3e 	bl	8009434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <prvAddNewTaskToReadyList+0xcc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00e      	beq.n	8007fde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <prvAddNewTaskToReadyList+0xc8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d207      	bcs.n	8007fde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <prvAddNewTaskToReadyList+0xdc>)
 8007fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000f80 	.word	0x20000f80
 8007fec:	20000aac 	.word	0x20000aac
 8007ff0:	20000f8c 	.word	0x20000f8c
 8007ff4:	20000f9c 	.word	0x20000f9c
 8007ff8:	20000f88 	.word	0x20000f88
 8007ffc:	20000ab0 	.word	0x20000ab0
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <vTaskDelay+0x60>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <vTaskDelay+0x30>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60bb      	str	r3, [r7, #8]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008034:	f000 f88a 	bl	800814c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fcfe 	bl	8008a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008040:	f000 f892 	bl	8008168 <xTaskResumeAll>
 8008044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d107      	bne.n	800805c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <vTaskDelay+0x64>)
 800804e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000fa8 	.word	0x20000fa8
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800807a:	463a      	mov	r2, r7
 800807c:	1d39      	adds	r1, r7, #4
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe ff3c 	bl	8006f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	9202      	str	r2, [sp, #8]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2300      	movs	r3, #0
 8008098:	460a      	mov	r2, r1
 800809a:	4924      	ldr	r1, [pc, #144]	; (800812c <vTaskStartScheduler+0xc0>)
 800809c:	4824      	ldr	r0, [pc, #144]	; (8008130 <vTaskStartScheduler+0xc4>)
 800809e:	f7ff fdf9 	bl	8007c94 <xTaskCreateStatic>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4a23      	ldr	r2, [pc, #140]	; (8008134 <vTaskStartScheduler+0xc8>)
 80080a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080a8:	4b22      	ldr	r3, [pc, #136]	; (8008134 <vTaskStartScheduler+0xc8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080b0:	2301      	movs	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e001      	b.n	80080ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d102      	bne.n	80080c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080c0:	f000 fd10 	bl	8008ae4 <xTimerCreateTimerTask>
 80080c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d11b      	bne.n	8008104 <vTaskStartScheduler+0x98>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	613b      	str	r3, [r7, #16]
}
 80080de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <vTaskStartScheduler+0xcc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3354      	adds	r3, #84	; 0x54
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <vTaskStartScheduler+0xd0>)
 80080e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080ea:	4b15      	ldr	r3, [pc, #84]	; (8008140 <vTaskStartScheduler+0xd4>)
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <vTaskStartScheduler+0xd8>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <vTaskStartScheduler+0xdc>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080fe:	f001 f8c7 	bl	8009290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008102:	e00e      	b.n	8008122 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d10a      	bne.n	8008122 <vTaskStartScheduler+0xb6>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vTaskStartScheduler+0xb4>
}
 8008122:	bf00      	nop
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	0800a534 	.word	0x0800a534
 8008130:	08008771 	.word	0x08008771
 8008134:	20000fa4 	.word	0x20000fa4
 8008138:	20000aac 	.word	0x20000aac
 800813c:	20000010 	.word	0x20000010
 8008140:	20000fa0 	.word	0x20000fa0
 8008144:	20000f8c 	.word	0x20000f8c
 8008148:	20000f84 	.word	0x20000f84

0800814c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008150:	4b04      	ldr	r3, [pc, #16]	; (8008164 <vTaskSuspendAll+0x18>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3301      	adds	r3, #1
 8008156:	4a03      	ldr	r2, [pc, #12]	; (8008164 <vTaskSuspendAll+0x18>)
 8008158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20000fa8 	.word	0x20000fa8

08008168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008176:	4b42      	ldr	r3, [pc, #264]	; (8008280 <xTaskResumeAll+0x118>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <xTaskResumeAll+0x2c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	603b      	str	r3, [r7, #0]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008194:	f001 f91e 	bl	80093d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008198:	4b39      	ldr	r3, [pc, #228]	; (8008280 <xTaskResumeAll+0x118>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3b01      	subs	r3, #1
 800819e:	4a38      	ldr	r2, [pc, #224]	; (8008280 <xTaskResumeAll+0x118>)
 80081a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a2:	4b37      	ldr	r3, [pc, #220]	; (8008280 <xTaskResumeAll+0x118>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d162      	bne.n	8008270 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081aa:	4b36      	ldr	r3, [pc, #216]	; (8008284 <xTaskResumeAll+0x11c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d05e      	beq.n	8008270 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081b2:	e02f      	b.n	8008214 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	4b34      	ldr	r3, [pc, #208]	; (8008288 <xTaskResumeAll+0x120>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3318      	adds	r3, #24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe ff5b 	bl	800707c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe ff56 	bl	800707c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	4b2d      	ldr	r3, [pc, #180]	; (800828c <xTaskResumeAll+0x124>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d903      	bls.n	80081e4 <xTaskResumeAll+0x7c>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	4a2a      	ldr	r2, [pc, #168]	; (800828c <xTaskResumeAll+0x124>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4a27      	ldr	r2, [pc, #156]	; (8008290 <xTaskResumeAll+0x128>)
 80081f2:	441a      	add	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fe fee1 	bl	8006fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008204:	4b23      	ldr	r3, [pc, #140]	; (8008294 <xTaskResumeAll+0x12c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800820e:	4b22      	ldr	r3, [pc, #136]	; (8008298 <xTaskResumeAll+0x130>)
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008214:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <xTaskResumeAll+0x120>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1cb      	bne.n	80081b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008222:	f000 fb5f 	bl	80088e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008226:	4b1d      	ldr	r3, [pc, #116]	; (800829c <xTaskResumeAll+0x134>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008232:	f000 f847 	bl	80082c4 <xTaskIncrementTick>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <xTaskResumeAll+0x130>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3b01      	subs	r3, #1
 8008246:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f1      	bne.n	8008232 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800824e:	4b13      	ldr	r3, [pc, #76]	; (800829c <xTaskResumeAll+0x134>)
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008254:	4b10      	ldr	r3, [pc, #64]	; (8008298 <xTaskResumeAll+0x130>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d009      	beq.n	8008270 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008260:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <xTaskResumeAll+0x138>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008270:	f001 f8e0 	bl	8009434 <vPortExitCritical>

	return xAlreadyYielded;
 8008274:	68bb      	ldr	r3, [r7, #8]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000fa8 	.word	0x20000fa8
 8008284:	20000f80 	.word	0x20000f80
 8008288:	20000f40 	.word	0x20000f40
 800828c:	20000f88 	.word	0x20000f88
 8008290:	20000ab0 	.word	0x20000ab0
 8008294:	20000aac 	.word	0x20000aac
 8008298:	20000f94 	.word	0x20000f94
 800829c:	20000f90 	.word	0x20000f90
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <xTaskGetTickCount+0x1c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082b0:	687b      	ldr	r3, [r7, #4]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000f84 	.word	0x20000f84

080082c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ce:	4b4f      	ldr	r3, [pc, #316]	; (800840c <xTaskIncrementTick+0x148>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 808f 	bne.w	80083f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082d8:	4b4d      	ldr	r3, [pc, #308]	; (8008410 <xTaskIncrementTick+0x14c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082e0:	4a4b      	ldr	r2, [pc, #300]	; (8008410 <xTaskIncrementTick+0x14c>)
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d120      	bne.n	800832e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082ec:	4b49      	ldr	r3, [pc, #292]	; (8008414 <xTaskIncrementTick+0x150>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <xTaskIncrementTick+0x48>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	603b      	str	r3, [r7, #0]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <xTaskIncrementTick+0x46>
 800830c:	4b41      	ldr	r3, [pc, #260]	; (8008414 <xTaskIncrementTick+0x150>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	4b41      	ldr	r3, [pc, #260]	; (8008418 <xTaskIncrementTick+0x154>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a3f      	ldr	r2, [pc, #252]	; (8008414 <xTaskIncrementTick+0x150>)
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	4a3f      	ldr	r2, [pc, #252]	; (8008418 <xTaskIncrementTick+0x154>)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	4b3e      	ldr	r3, [pc, #248]	; (800841c <xTaskIncrementTick+0x158>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	4a3d      	ldr	r2, [pc, #244]	; (800841c <xTaskIncrementTick+0x158>)
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	f000 fadb 	bl	80088e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800832e:	4b3c      	ldr	r3, [pc, #240]	; (8008420 <xTaskIncrementTick+0x15c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	429a      	cmp	r2, r3
 8008336:	d349      	bcc.n	80083cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008338:	4b36      	ldr	r3, [pc, #216]	; (8008414 <xTaskIncrementTick+0x150>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008342:	4b37      	ldr	r3, [pc, #220]	; (8008420 <xTaskIncrementTick+0x15c>)
 8008344:	f04f 32ff 	mov.w	r2, #4294967295
 8008348:	601a      	str	r2, [r3, #0]
					break;
 800834a:	e03f      	b.n	80083cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800834c:	4b31      	ldr	r3, [pc, #196]	; (8008414 <xTaskIncrementTick+0x150>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d203      	bcs.n	800836c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008364:	4a2e      	ldr	r2, [pc, #184]	; (8008420 <xTaskIncrementTick+0x15c>)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800836a:	e02f      	b.n	80083cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	3304      	adds	r3, #4
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fe83 	bl	800707c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	3318      	adds	r3, #24
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fe7a 	bl	800707c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838c:	4b25      	ldr	r3, [pc, #148]	; (8008424 <xTaskIncrementTick+0x160>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d903      	bls.n	800839c <xTaskIncrementTick+0xd8>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	4a22      	ldr	r2, [pc, #136]	; (8008424 <xTaskIncrementTick+0x160>)
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <xTaskIncrementTick+0x164>)
 80083aa:	441a      	add	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe fe05 	bl	8006fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <xTaskIncrementTick+0x168>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d3b8      	bcc.n	8008338 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ca:	e7b5      	b.n	8008338 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083cc:	4b17      	ldr	r3, [pc, #92]	; (800842c <xTaskIncrementTick+0x168>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4915      	ldr	r1, [pc, #84]	; (8008428 <xTaskIncrementTick+0x164>)
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d901      	bls.n	80083e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083e8:	4b11      	ldr	r3, [pc, #68]	; (8008430 <xTaskIncrementTick+0x16c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	e004      	b.n	8008400 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <xTaskIncrementTick+0x170>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	4a0d      	ldr	r2, [pc, #52]	; (8008434 <xTaskIncrementTick+0x170>)
 80083fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008400:	697b      	ldr	r3, [r7, #20]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000fa8 	.word	0x20000fa8
 8008410:	20000f84 	.word	0x20000f84
 8008414:	20000f38 	.word	0x20000f38
 8008418:	20000f3c 	.word	0x20000f3c
 800841c:	20000f98 	.word	0x20000f98
 8008420:	20000fa0 	.word	0x20000fa0
 8008424:	20000f88 	.word	0x20000f88
 8008428:	20000ab0 	.word	0x20000ab0
 800842c:	20000aac 	.word	0x20000aac
 8008430:	20000f94 	.word	0x20000f94
 8008434:	20000f90 	.word	0x20000f90

08008438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800843e:	4b2a      	ldr	r3, [pc, #168]	; (80084e8 <vTaskSwitchContext+0xb0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008446:	4b29      	ldr	r3, [pc, #164]	; (80084ec <vTaskSwitchContext+0xb4>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800844c:	e046      	b.n	80084dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800844e:	4b27      	ldr	r3, [pc, #156]	; (80084ec <vTaskSwitchContext+0xb4>)
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008454:	4b26      	ldr	r3, [pc, #152]	; (80084f0 <vTaskSwitchContext+0xb8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	e010      	b.n	800847e <vTaskSwitchContext+0x46>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <vTaskSwitchContext+0x40>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	607b      	str	r3, [r7, #4]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <vTaskSwitchContext+0x3e>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3b01      	subs	r3, #1
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	491d      	ldr	r1, [pc, #116]	; (80084f4 <vTaskSwitchContext+0xbc>)
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0e4      	beq.n	800845c <vTaskSwitchContext+0x24>
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <vTaskSwitchContext+0xbc>)
 800849e:	4413      	add	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	605a      	str	r2, [r3, #4]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3308      	adds	r3, #8
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d104      	bne.n	80084c2 <vTaskSwitchContext+0x8a>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4a0b      	ldr	r2, [pc, #44]	; (80084f8 <vTaskSwitchContext+0xc0>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	4a08      	ldr	r2, [pc, #32]	; (80084f0 <vTaskSwitchContext+0xb8>)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084d2:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <vTaskSwitchContext+0xc0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3354      	adds	r3, #84	; 0x54
 80084d8:	4a08      	ldr	r2, [pc, #32]	; (80084fc <vTaskSwitchContext+0xc4>)
 80084da:	6013      	str	r3, [r2, #0]
}
 80084dc:	bf00      	nop
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20000fa8 	.word	0x20000fa8
 80084ec:	20000f94 	.word	0x20000f94
 80084f0:	20000f88 	.word	0x20000f88
 80084f4:	20000ab0 	.word	0x20000ab0
 80084f8:	20000aac 	.word	0x20000aac
 80084fc:	20000010 	.word	0x20000010

08008500 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008526:	4b07      	ldr	r3, [pc, #28]	; (8008544 <vTaskPlaceOnEventList+0x44>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3318      	adds	r3, #24
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7fe fd6b 	bl	800700a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008534:	2101      	movs	r1, #1
 8008536:	6838      	ldr	r0, [r7, #0]
 8008538:	f000 fa80 	bl	8008a3c <prvAddCurrentTaskToDelayedList>
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000aac 	.word	0x20000aac

08008548 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	617b      	str	r3, [r7, #20]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <vTaskPlaceOnEventListRestricted+0x54>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3318      	adds	r3, #24
 8008576:	4619      	mov	r1, r3
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7fe fd22 	bl	8006fc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008584:	f04f 33ff 	mov.w	r3, #4294967295
 8008588:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	68b8      	ldr	r0, [r7, #8]
 800858e:	f000 fa55 	bl	8008a3c <prvAddCurrentTaskToDelayedList>
	}
 8008592:	bf00      	nop
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000aac 	.word	0x20000aac

080085a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	60fb      	str	r3, [r7, #12]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	3318      	adds	r3, #24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fd53 	bl	800707c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d6:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <xTaskRemoveFromEventList+0xb0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d11d      	bne.n	800861a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fd4a 	bl	800707c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	4b19      	ldr	r3, [pc, #100]	; (8008654 <xTaskRemoveFromEventList+0xb4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d903      	bls.n	80085fc <xTaskRemoveFromEventList+0x5c>
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	4a16      	ldr	r2, [pc, #88]	; (8008654 <xTaskRemoveFromEventList+0xb4>)
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4a13      	ldr	r2, [pc, #76]	; (8008658 <xTaskRemoveFromEventList+0xb8>)
 800860a:	441a      	add	r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3304      	adds	r3, #4
 8008610:	4619      	mov	r1, r3
 8008612:	4610      	mov	r0, r2
 8008614:	f7fe fcd5 	bl	8006fc2 <vListInsertEnd>
 8008618:	e005      	b.n	8008626 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	3318      	adds	r3, #24
 800861e:	4619      	mov	r1, r3
 8008620:	480e      	ldr	r0, [pc, #56]	; (800865c <xTaskRemoveFromEventList+0xbc>)
 8008622:	f7fe fcce 	bl	8006fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <xTaskRemoveFromEventList+0xc0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d905      	bls.n	8008640 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008638:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <xTaskRemoveFromEventList+0xc4>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e001      	b.n	8008644 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008644:	697b      	ldr	r3, [r7, #20]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000fa8 	.word	0x20000fa8
 8008654:	20000f88 	.word	0x20000f88
 8008658:	20000ab0 	.word	0x20000ab0
 800865c:	20000f40 	.word	0x20000f40
 8008660:	20000aac 	.word	0x20000aac
 8008664:	20000f94 	.word	0x20000f94

08008668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <vTaskInternalSetTimeOutState+0x24>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <vTaskInternalSetTimeOutState+0x28>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	605a      	str	r2, [r3, #4]
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	20000f98 	.word	0x20000f98
 8008690:	20000f84 	.word	0x20000f84

08008694 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	613b      	str	r3, [r7, #16]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086d6:	f000 fe7d 	bl	80093d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086da:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <xTaskCheckForTimeOut+0xbc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d102      	bne.n	80086fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	61fb      	str	r3, [r7, #28]
 80086f8:	e023      	b.n	8008742 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <xTaskCheckForTimeOut+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d007      	beq.n	8008716 <xTaskCheckForTimeOut+0x82>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	429a      	cmp	r2, r3
 800870e:	d302      	bcc.n	8008716 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	e015      	b.n	8008742 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	429a      	cmp	r2, r3
 800871e:	d20b      	bcs.n	8008738 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7ff ff9b 	bl	8008668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	e004      	b.n	8008742 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800873e:	2301      	movs	r3, #1
 8008740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008742:	f000 fe77 	bl	8009434 <vPortExitCritical>

	return xReturn;
 8008746:	69fb      	ldr	r3, [r7, #28]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3720      	adds	r7, #32
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20000f84 	.word	0x20000f84
 8008754:	20000f98 	.word	0x20000f98

08008758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800875c:	4b03      	ldr	r3, [pc, #12]	; (800876c <vTaskMissedYield+0x14>)
 800875e:	2201      	movs	r2, #1
 8008760:	601a      	str	r2, [r3, #0]
}
 8008762:	bf00      	nop
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000f94 	.word	0x20000f94

08008770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008778:	f000 f852 	bl	8008820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800877c:	4b06      	ldr	r3, [pc, #24]	; (8008798 <prvIdleTask+0x28>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d9f9      	bls.n	8008778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <prvIdleTask+0x2c>)
 8008786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008794:	e7f0      	b.n	8008778 <prvIdleTask+0x8>
 8008796:	bf00      	nop
 8008798:	20000ab0 	.word	0x20000ab0
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	e00c      	b.n	80087c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4a12      	ldr	r2, [pc, #72]	; (8008800 <prvInitialiseTaskLists+0x60>)
 80087b8:	4413      	add	r3, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fbd4 	bl	8006f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3301      	adds	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b37      	cmp	r3, #55	; 0x37
 80087ca:	d9ef      	bls.n	80087ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087cc:	480d      	ldr	r0, [pc, #52]	; (8008804 <prvInitialiseTaskLists+0x64>)
 80087ce:	f7fe fbcb 	bl	8006f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087d2:	480d      	ldr	r0, [pc, #52]	; (8008808 <prvInitialiseTaskLists+0x68>)
 80087d4:	f7fe fbc8 	bl	8006f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d8:	480c      	ldr	r0, [pc, #48]	; (800880c <prvInitialiseTaskLists+0x6c>)
 80087da:	f7fe fbc5 	bl	8006f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087de:	480c      	ldr	r0, [pc, #48]	; (8008810 <prvInitialiseTaskLists+0x70>)
 80087e0:	f7fe fbc2 	bl	8006f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087e4:	480b      	ldr	r0, [pc, #44]	; (8008814 <prvInitialiseTaskLists+0x74>)
 80087e6:	f7fe fbbf 	bl	8006f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <prvInitialiseTaskLists+0x78>)
 80087ec:	4a05      	ldr	r2, [pc, #20]	; (8008804 <prvInitialiseTaskLists+0x64>)
 80087ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <prvInitialiseTaskLists+0x7c>)
 80087f2:	4a05      	ldr	r2, [pc, #20]	; (8008808 <prvInitialiseTaskLists+0x68>)
 80087f4:	601a      	str	r2, [r3, #0]
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000ab0 	.word	0x20000ab0
 8008804:	20000f10 	.word	0x20000f10
 8008808:	20000f24 	.word	0x20000f24
 800880c:	20000f40 	.word	0x20000f40
 8008810:	20000f54 	.word	0x20000f54
 8008814:	20000f6c 	.word	0x20000f6c
 8008818:	20000f38 	.word	0x20000f38
 800881c:	20000f3c 	.word	0x20000f3c

08008820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008826:	e019      	b.n	800885c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008828:	f000 fdd4 	bl	80093d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <prvCheckTasksWaitingTermination+0x50>)
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fc1f 	bl	800707c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <prvCheckTasksWaitingTermination+0x54>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3b01      	subs	r3, #1
 8008844:	4a0b      	ldr	r2, [pc, #44]	; (8008874 <prvCheckTasksWaitingTermination+0x54>)
 8008846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008848:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <prvCheckTasksWaitingTermination+0x58>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3b01      	subs	r3, #1
 800884e:	4a0a      	ldr	r2, [pc, #40]	; (8008878 <prvCheckTasksWaitingTermination+0x58>)
 8008850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008852:	f000 fdef 	bl	8009434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f810 	bl	800887c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <prvCheckTasksWaitingTermination+0x58>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e1      	bne.n	8008828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000f54 	.word	0x20000f54
 8008874:	20000f80 	.word	0x20000f80
 8008878:	20000f68 	.word	0x20000f68

0800887c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3354      	adds	r3, #84	; 0x54
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f959 	bl	8009b40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008894:	2b00      	cmp	r3, #0
 8008896:	d108      	bne.n	80088aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ff87 	bl	80097b0 <vPortFree>
				vPortFree( pxTCB );
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 ff84 	bl	80097b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088a8:	e018      	b.n	80088dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d103      	bne.n	80088bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 ff7b 	bl	80097b0 <vPortFree>
	}
 80088ba:	e00f      	b.n	80088dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d00a      	beq.n	80088dc <prvDeleteTCB+0x60>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60fb      	str	r3, [r7, #12]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <prvDeleteTCB+0x5e>
	}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <prvResetNextTaskUnblockTime+0x38>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 80088f6:	f04f 32ff 	mov.w	r2, #4294967295
 80088fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088fc:	e008      	b.n	8008910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <prvResetNextTaskUnblockTime+0x38>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20000f38 	.word	0x20000f38
 8008920:	20000fa0 	.word	0x20000fa0

08008924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <xTaskGetSchedulerState+0x34>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008932:	2301      	movs	r3, #1
 8008934:	607b      	str	r3, [r7, #4]
 8008936:	e008      	b.n	800894a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008938:	4b08      	ldr	r3, [pc, #32]	; (800895c <xTaskGetSchedulerState+0x38>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008940:	2302      	movs	r3, #2
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	e001      	b.n	800894a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800894a:	687b      	ldr	r3, [r7, #4]
	}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000f8c 	.word	0x20000f8c
 800895c:	20000fa8 	.word	0x20000fa8

08008960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d056      	beq.n	8008a24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008976:	4b2e      	ldr	r3, [pc, #184]	; (8008a30 <xTaskPriorityDisinherit+0xd0>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	429a      	cmp	r2, r3
 800897e:	d00a      	beq.n	8008996 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60bb      	str	r3, [r7, #8]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b8:	1e5a      	subs	r2, r3, #1
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d02c      	beq.n	8008a24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d128      	bne.n	8008a24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fb50 	bl	800707c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <xTaskPriorityDisinherit+0xd4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d903      	bls.n	8008a04 <xTaskPriorityDisinherit+0xa4>
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	4a0c      	ldr	r2, [pc, #48]	; (8008a34 <xTaskPriorityDisinherit+0xd4>)
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <xTaskPriorityDisinherit+0xd8>)
 8008a12:	441a      	add	r2, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f7fe fad1 	bl	8006fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a24:	697b      	ldr	r3, [r7, #20]
	}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000aac 	.word	0x20000aac
 8008a34:	20000f88 	.word	0x20000f88
 8008a38:	20000ab0 	.word	0x20000ab0

08008a3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <prvAddCurrentTaskToDelayedList+0x90>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a4c:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fe fb12 	bl	800707c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d10a      	bne.n	8008a76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4819      	ldr	r0, [pc, #100]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a70:	f7fe faa7 	bl	8006fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a74:	e026      	b.n	8008ac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a7e:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d209      	bcs.n	8008aa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe fab5 	bl	800700a <vListInsert>
}
 8008aa0:	e010      	b.n	8008ac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f7fe faab 	bl	800700a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ab4:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d202      	bcs.n	8008ac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008abe:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	6013      	str	r3, [r2, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000f84 	.word	0x20000f84
 8008ad0:	20000aac 	.word	0x20000aac
 8008ad4:	20000f6c 	.word	0x20000f6c
 8008ad8:	20000f3c 	.word	0x20000f3c
 8008adc:	20000f38 	.word	0x20000f38
 8008ae0:	20000fa0 	.word	0x20000fa0

08008ae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08a      	sub	sp, #40	; 0x28
 8008ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008aee:	f000 fb07 	bl	8009100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <xTimerCreateTimerTask+0x80>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d021      	beq.n	8008b3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b02:	1d3a      	adds	r2, r7, #4
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	f107 030c 	add.w	r3, r7, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fa11 	bl	8006f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	9202      	str	r2, [sp, #8]
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	460a      	mov	r2, r1
 8008b24:	4910      	ldr	r1, [pc, #64]	; (8008b68 <xTimerCreateTimerTask+0x84>)
 8008b26:	4811      	ldr	r0, [pc, #68]	; (8008b6c <xTimerCreateTimerTask+0x88>)
 8008b28:	f7ff f8b4 	bl	8007c94 <xTaskCreateStatic>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4a10      	ldr	r2, [pc, #64]	; (8008b70 <xTimerCreateTimerTask+0x8c>)
 8008b30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b32:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <xTimerCreateTimerTask+0x8c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	613b      	str	r3, [r7, #16]
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b5a:	697b      	ldr	r3, [r7, #20]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000fdc 	.word	0x20000fdc
 8008b68:	0800a53c 	.word	0x0800a53c
 8008b6c:	08008ca9 	.word	0x08008ca9
 8008b70:	20000fe0 	.word	0x20000fe0

08008b74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	623b      	str	r3, [r7, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ba2:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <xTimerGenericCommand+0x98>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d02a      	beq.n	8008c00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	dc18      	bgt.n	8008bee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bbc:	f7ff feb2 	bl	8008924 <xTaskGetSchedulerState>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d109      	bne.n	8008bda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <xTimerGenericCommand+0x98>)
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	f107 0110 	add.w	r1, r7, #16
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd2:	f7fe fbbb 	bl	800734c <xQueueGenericSend>
 8008bd6:	6278      	str	r0, [r7, #36]	; 0x24
 8008bd8:	e012      	b.n	8008c00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <xTimerGenericCommand+0x98>)
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f107 0110 	add.w	r1, r7, #16
 8008be2:	2300      	movs	r3, #0
 8008be4:	2200      	movs	r2, #0
 8008be6:	f7fe fbb1 	bl	800734c <xQueueGenericSend>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24
 8008bec:	e008      	b.n	8008c00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bee:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <xTimerGenericCommand+0x98>)
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	f107 0110 	add.w	r1, r7, #16
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	f7fe fca5 	bl	8007548 <xQueueGenericSendFromISR>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3728      	adds	r7, #40	; 0x28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000fdc 	.word	0x20000fdc

08008c10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <prvProcessExpiredTimer+0x94>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fa27 	bl	800707c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c34:	f003 0304 	and.w	r3, r3, #4
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d022      	beq.n	8008c82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	18d1      	adds	r1, r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	6978      	ldr	r0, [r7, #20]
 8008c4a:	f000 f8d1 	bl	8008df0 <prvInsertTimerInActiveList>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01f      	beq.n	8008c94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c54:	2300      	movs	r3, #0
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6978      	ldr	r0, [r7, #20]
 8008c60:	f7ff ff88 	bl	8008b74 <xTimerGenericCommand>
 8008c64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d113      	bne.n	8008c94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	6978      	ldr	r0, [r7, #20]
 8008c9a:	4798      	blx	r3
}
 8008c9c:	bf00      	nop
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000fd4 	.word	0x20000fd4

08008ca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cb0:	f107 0308 	add.w	r3, r7, #8
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f857 	bl	8008d68 <prvGetNextExpireTime>
 8008cba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f803 	bl	8008ccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008cc6:	f000 f8d5 	bl	8008e74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cca:	e7f1      	b.n	8008cb0 <prvTimerTask+0x8>

08008ccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cd6:	f7ff fa39 	bl	800814c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f866 	bl	8008db0 <prvSampleTimeNow>
 8008ce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d130      	bne.n	8008d4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <prvProcessTimerOrBlockTask+0x3c>
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d806      	bhi.n	8008d08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008cfa:	f7ff fa35 	bl	8008168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008cfe:	68f9      	ldr	r1, [r7, #12]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff85 	bl	8008c10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d06:	e024      	b.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d008      	beq.n	8008d20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <prvProcessTimerOrBlockTask+0x90>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <prvProcessTimerOrBlockTask+0x50>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <prvProcessTimerOrBlockTask+0x52>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d20:	4b0f      	ldr	r3, [pc, #60]	; (8008d60 <prvProcessTimerOrBlockTask+0x94>)
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	f7fe ff7d 	bl	8007c2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d32:	f7ff fa19 	bl	8008168 <xTaskResumeAll>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <prvProcessTimerOrBlockTask+0x98>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
}
 8008d4c:	e001      	b.n	8008d52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d4e:	f7ff fa0b 	bl	8008168 <xTaskResumeAll>
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20000fd8 	.word	0x20000fd8
 8008d60:	20000fdc 	.word	0x20000fdc
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d70:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <prvGetNextExpireTime+0x44>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <prvGetNextExpireTime+0x16>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	e000      	b.n	8008d80 <prvGetNextExpireTime+0x18>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d105      	bne.n	8008d98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d8c:	4b07      	ldr	r3, [pc, #28]	; (8008dac <prvGetNextExpireTime+0x44>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	e001      	b.n	8008d9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	20000fd4 	.word	0x20000fd4

08008db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008db8:	f7ff fa74 	bl	80082a4 <xTaskGetTickCount>
 8008dbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <prvSampleTimeNow+0x3c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d205      	bcs.n	8008dd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008dc8:	f000 f936 	bl	8009038 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dda:	4a04      	ldr	r2, [pc, #16]	; (8008dec <prvSampleTimeNow+0x3c>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20000fe4 	.word	0x20000fe4

08008df0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d812      	bhi.n	8008e3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	1ad2      	subs	r2, r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d302      	bcc.n	8008e2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e01b      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <prvInsertTimerInActiveList+0x7c>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe f8e8 	bl	800700a <vListInsert>
 8008e3a:	e012      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d206      	bcs.n	8008e52 <prvInsertTimerInActiveList+0x62>
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e007      	b.n	8008e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <prvInsertTimerInActiveList+0x80>)
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	f7fe f8d4 	bl	800700a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000fd8 	.word	0x20000fd8
 8008e70:	20000fd4 	.word	0x20000fd4

08008e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	; 0x38
 8008e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e7a:	e0ca      	b.n	8009012 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da18      	bge.n	8008eb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	3304      	adds	r3, #4
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	61fb      	str	r3, [r7, #28]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eaa:	6850      	ldr	r0, [r2, #4]
 8008eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eae:	6892      	ldr	r2, [r2, #8]
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f2c0 80aa 	blt.w	8009010 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe f8d5 	bl	800707c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff ff6b 	bl	8008db0 <prvSampleTimeNow>
 8008eda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	f200 8097 	bhi.w	8009012 <prvProcessReceivedCommands+0x19e>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <prvProcessReceivedCommands+0x78>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f15 	.word	0x08008f15
 8008ef8:	08008f89 	.word	0x08008f89
 8008efc:	08008f9d 	.word	0x08008f9d
 8008f00:	08008fe7 	.word	0x08008fe7
 8008f04:	08008f15 	.word	0x08008f15
 8008f08:	08008f15 	.word	0x08008f15
 8008f0c:	08008f89 	.word	0x08008f89
 8008f10:	08008f9d 	.word	0x08008f9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	18d1      	adds	r1, r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f34:	f7ff ff5c 	bl	8008df0 <prvInsertTimerInActiveList>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d069      	beq.n	8009012 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d05e      	beq.n	8009012 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	441a      	add	r2, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	2300      	movs	r3, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f66:	f7ff fe05 	bl	8008b74 <xTimerGenericCommand>
 8008f6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d14f      	bne.n	8009012 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61bb      	str	r3, [r7, #24]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008f9a:	e03a      	b.n	8009012 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	617b      	str	r3, [r7, #20]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	699a      	ldr	r2, [r3, #24]
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	18d1      	adds	r1, r2, r3
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe0:	f7ff ff06 	bl	8008df0 <prvInsertTimerInActiveList>
					break;
 8008fe4:	e015      	b.n	8009012 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff6:	f000 fbdb 	bl	80097b0 <vPortFree>
 8008ffa:	e00a      	b.n	8009012 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009002:	f023 0301 	bic.w	r3, r3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800900e:	e000      	b.n	8009012 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009010:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009012:	4b08      	ldr	r3, [pc, #32]	; (8009034 <prvProcessReceivedCommands+0x1c0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	1d39      	adds	r1, r7, #4
 8009018:	2200      	movs	r2, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fb30 	bl	8007680 <xQueueReceive>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	f47f af2a 	bne.w	8008e7c <prvProcessReceivedCommands+0x8>
	}
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	3730      	adds	r7, #48	; 0x30
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000fdc 	.word	0x20000fdc

08009038 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800903e:	e048      	b.n	80090d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009040:	4b2d      	ldr	r3, [pc, #180]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904a:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe f80f 	bl	800707c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d02e      	beq.n	80090d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d90e      	bls.n	80090a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009092:	4b19      	ldr	r3, [pc, #100]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3304      	adds	r3, #4
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7fd ffb4 	bl	800700a <vListInsert>
 80090a2:	e016      	b.n	80090d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	2100      	movs	r1, #0
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff fd60 	bl	8008b74 <xTimerGenericCommand>
 80090b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	603b      	str	r3, [r7, #0]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1b1      	bne.n	8009040 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090e2:	4b06      	ldr	r3, [pc, #24]	; (80090fc <prvSwitchTimerLists+0xc4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a04      	ldr	r2, [pc, #16]	; (80090f8 <prvSwitchTimerLists+0xc0>)
 80090e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090ea:	4a04      	ldr	r2, [pc, #16]	; (80090fc <prvSwitchTimerLists+0xc4>)
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	6013      	str	r3, [r2, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000fd4 	.word	0x20000fd4
 80090fc:	20000fd8 	.word	0x20000fd8

08009100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009106:	f000 f965 	bl	80093d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800910a:	4b15      	ldr	r3, [pc, #84]	; (8009160 <prvCheckForValidListAndQueue+0x60>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d120      	bne.n	8009154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009112:	4814      	ldr	r0, [pc, #80]	; (8009164 <prvCheckForValidListAndQueue+0x64>)
 8009114:	f7fd ff28 	bl	8006f68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009118:	4813      	ldr	r0, [pc, #76]	; (8009168 <prvCheckForValidListAndQueue+0x68>)
 800911a:	f7fd ff25 	bl	8006f68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <prvCheckForValidListAndQueue+0x6c>)
 8009120:	4a10      	ldr	r2, [pc, #64]	; (8009164 <prvCheckForValidListAndQueue+0x64>)
 8009122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009124:	4b12      	ldr	r3, [pc, #72]	; (8009170 <prvCheckForValidListAndQueue+0x70>)
 8009126:	4a10      	ldr	r2, [pc, #64]	; (8009168 <prvCheckForValidListAndQueue+0x68>)
 8009128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800912a:	2300      	movs	r3, #0
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	4b11      	ldr	r3, [pc, #68]	; (8009174 <prvCheckForValidListAndQueue+0x74>)
 8009130:	4a11      	ldr	r2, [pc, #68]	; (8009178 <prvCheckForValidListAndQueue+0x78>)
 8009132:	2110      	movs	r1, #16
 8009134:	200a      	movs	r0, #10
 8009136:	f7fe f833 	bl	80071a0 <xQueueGenericCreateStatic>
 800913a:	4603      	mov	r3, r0
 800913c:	4a08      	ldr	r2, [pc, #32]	; (8009160 <prvCheckForValidListAndQueue+0x60>)
 800913e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009140:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvCheckForValidListAndQueue+0x60>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <prvCheckForValidListAndQueue+0x60>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	490b      	ldr	r1, [pc, #44]	; (800917c <prvCheckForValidListAndQueue+0x7c>)
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fd42 	bl	8007bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009154:	f000 f96e 	bl	8009434 <vPortExitCritical>
}
 8009158:	bf00      	nop
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000fdc 	.word	0x20000fdc
 8009164:	20000fac 	.word	0x20000fac
 8009168:	20000fc0 	.word	0x20000fc0
 800916c:	20000fd4 	.word	0x20000fd4
 8009170:	20000fd8 	.word	0x20000fd8
 8009174:	20001088 	.word	0x20001088
 8009178:	20000fe8 	.word	0x20000fe8
 800917c:	0800a544 	.word	0x0800a544

08009180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3b04      	subs	r3, #4
 8009190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3b04      	subs	r3, #4
 800919e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f023 0201 	bic.w	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3b04      	subs	r3, #4
 80091ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091b0:	4a0c      	ldr	r2, [pc, #48]	; (80091e4 <pxPortInitialiseStack+0x64>)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3b14      	subs	r3, #20
 80091ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3b04      	subs	r3, #4
 80091c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f06f 0202 	mvn.w	r2, #2
 80091ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	3b20      	subs	r3, #32
 80091d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091d6:	68fb      	ldr	r3, [r7, #12]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	080091e9 	.word	0x080091e9

080091e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <prvTaskExitError+0x54>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fa:	d00a      	beq.n	8009212 <prvTaskExitError+0x2a>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60fb      	str	r3, [r7, #12]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <prvTaskExitError+0x28>
	__asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	60bb      	str	r3, [r7, #8]
}
 8009224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009226:	bf00      	nop
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0fc      	beq.n	8009228 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	2000000c 	.word	0x2000000c

08009240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <pxCurrentTCBConst2>)
 8009242:	6819      	ldr	r1, [r3, #0]
 8009244:	6808      	ldr	r0, [r1, #0]
 8009246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924a:	f380 8809 	msr	PSP, r0
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	4770      	bx	lr
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst2>:
 8009260:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009268:	4808      	ldr	r0, [pc, #32]	; (800928c <prvPortStartFirstTask+0x24>)
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	6800      	ldr	r0, [r0, #0]
 800926e:	f380 8808 	msr	MSP, r0
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	f380 8814 	msr	CONTROL, r0
 800927a:	b662      	cpsie	i
 800927c:	b661      	cpsie	f
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	df00      	svc	0
 8009288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800928a:	bf00      	nop
 800928c:	e000ed08 	.word	0xe000ed08

08009290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009296:	4b46      	ldr	r3, [pc, #280]	; (80093b0 <xPortStartScheduler+0x120>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a46      	ldr	r2, [pc, #280]	; (80093b4 <xPortStartScheduler+0x124>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d10a      	bne.n	80092b6 <xPortStartScheduler+0x26>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092b6:	4b3e      	ldr	r3, [pc, #248]	; (80093b0 <xPortStartScheduler+0x120>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a3f      	ldr	r2, [pc, #252]	; (80093b8 <xPortStartScheduler+0x128>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d10a      	bne.n	80092d6 <xPortStartScheduler+0x46>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	60fb      	str	r3, [r7, #12]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092d6:	4b39      	ldr	r3, [pc, #228]	; (80093bc <xPortStartScheduler+0x12c>)
 80092d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	22ff      	movs	r2, #255	; 0xff
 80092e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	4b31      	ldr	r3, [pc, #196]	; (80093c0 <xPortStartScheduler+0x130>)
 80092fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092fe:	4b31      	ldr	r3, [pc, #196]	; (80093c4 <xPortStartScheduler+0x134>)
 8009300:	2207      	movs	r2, #7
 8009302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009304:	e009      	b.n	800931a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009306:	4b2f      	ldr	r3, [pc, #188]	; (80093c4 <xPortStartScheduler+0x134>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3b01      	subs	r3, #1
 800930c:	4a2d      	ldr	r2, [pc, #180]	; (80093c4 <xPortStartScheduler+0x134>)
 800930e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	b2db      	uxtb	r3, r3
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	b2db      	uxtb	r3, r3
 8009318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009322:	2b80      	cmp	r3, #128	; 0x80
 8009324:	d0ef      	beq.n	8009306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009326:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <xPortStartScheduler+0x134>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f1c3 0307 	rsb	r3, r3, #7
 800932e:	2b04      	cmp	r3, #4
 8009330:	d00a      	beq.n	8009348 <xPortStartScheduler+0xb8>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	60bb      	str	r3, [r7, #8]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009348:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <xPortStartScheduler+0x134>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	4a1d      	ldr	r2, [pc, #116]	; (80093c4 <xPortStartScheduler+0x134>)
 8009350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009352:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <xPortStartScheduler+0x134>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800935a:	4a1a      	ldr	r2, [pc, #104]	; (80093c4 <xPortStartScheduler+0x134>)
 800935c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	b2da      	uxtb	r2, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009366:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <xPortStartScheduler+0x138>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a17      	ldr	r2, [pc, #92]	; (80093c8 <xPortStartScheduler+0x138>)
 800936c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009372:	4b15      	ldr	r3, [pc, #84]	; (80093c8 <xPortStartScheduler+0x138>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <xPortStartScheduler+0x138>)
 8009378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800937c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800937e:	f000 f8dd 	bl	800953c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <xPortStartScheduler+0x13c>)
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009388:	f000 f8fc 	bl	8009584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800938c:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <xPortStartScheduler+0x140>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0f      	ldr	r2, [pc, #60]	; (80093d0 <xPortStartScheduler+0x140>)
 8009392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009398:	f7ff ff66 	bl	8009268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800939c:	f7ff f84c 	bl	8008438 <vTaskSwitchContext>
	prvTaskExitError();
 80093a0:	f7ff ff22 	bl	80091e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	e000ed00 	.word	0xe000ed00
 80093b4:	410fc271 	.word	0x410fc271
 80093b8:	410fc270 	.word	0x410fc270
 80093bc:	e000e400 	.word	0xe000e400
 80093c0:	200010d8 	.word	0x200010d8
 80093c4:	200010dc 	.word	0x200010dc
 80093c8:	e000ed20 	.word	0xe000ed20
 80093cc:	2000000c 	.word	0x2000000c
 80093d0:	e000ef34 	.word	0xe000ef34

080093d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	607b      	str	r3, [r7, #4]
}
 80093ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <vPortEnterCritical+0x58>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3301      	adds	r3, #1
 80093f4:	4a0d      	ldr	r2, [pc, #52]	; (800942c <vPortEnterCritical+0x58>)
 80093f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <vPortEnterCritical+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d10f      	bne.n	8009420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <vPortEnterCritical+0x5c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <vPortEnterCritical+0x4c>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	603b      	str	r3, [r7, #0]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <vPortEnterCritical+0x4a>
	}
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	2000000c 	.word	0x2000000c
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800943a:	4b12      	ldr	r3, [pc, #72]	; (8009484 <vPortExitCritical+0x50>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10a      	bne.n	8009458 <vPortExitCritical+0x24>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	607b      	str	r3, [r7, #4]
}
 8009454:	bf00      	nop
 8009456:	e7fe      	b.n	8009456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009458:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <vPortExitCritical+0x50>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3b01      	subs	r3, #1
 800945e:	4a09      	ldr	r2, [pc, #36]	; (8009484 <vPortExitCritical+0x50>)
 8009460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <vPortExitCritical+0x50>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <vPortExitCritical+0x42>
 800946a:	2300      	movs	r3, #0
 800946c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f383 8811 	msr	BASEPRI, r3
}
 8009474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	2000000c 	.word	0x2000000c
	...

08009490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009490:	f3ef 8009 	mrs	r0, PSP
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <pxCurrentTCBConst>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	f01e 0f10 	tst.w	lr, #16
 80094a0:	bf08      	it	eq
 80094a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	6010      	str	r0, [r2, #0]
 80094ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094b4:	f380 8811 	msr	BASEPRI, r0
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f7fe ffba 	bl	8008438 <vTaskSwitchContext>
 80094c4:	f04f 0000 	mov.w	r0, #0
 80094c8:	f380 8811 	msr	BASEPRI, r0
 80094cc:	bc09      	pop	{r0, r3}
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	6808      	ldr	r0, [r1, #0]
 80094d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d6:	f01e 0f10 	tst.w	lr, #16
 80094da:	bf08      	it	eq
 80094dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094e0:	f380 8809 	msr	PSP, r0
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst>:
 80094f0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009512:	f7fe fed7 	bl	80082c4 <xTaskIncrementTick>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <xPortSysTickHandler+0x40>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f383 8811 	msr	BASEPRI, r3
}
 800952e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009540:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <vPortSetupTimerInterrupt+0x34>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <vPortSetupTimerInterrupt+0x38>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <vPortSetupTimerInterrupt+0x3c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a0a      	ldr	r2, [pc, #40]	; (800957c <vPortSetupTimerInterrupt+0x40>)
 8009552:	fba2 2303 	umull	r2, r3, r2, r3
 8009556:	099b      	lsrs	r3, r3, #6
 8009558:	4a09      	ldr	r2, [pc, #36]	; (8009580 <vPortSetupTimerInterrupt+0x44>)
 800955a:	3b01      	subs	r3, #1
 800955c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <vPortSetupTimerInterrupt+0x34>)
 8009560:	2207      	movs	r2, #7
 8009562:	601a      	str	r2, [r3, #0]
}
 8009564:	bf00      	nop
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000e010 	.word	0xe000e010
 8009574:	e000e018 	.word	0xe000e018
 8009578:	20000000 	.word	0x20000000
 800957c:	10624dd3 	.word	0x10624dd3
 8009580:	e000e014 	.word	0xe000e014

08009584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009594 <vPortEnableVFP+0x10>
 8009588:	6801      	ldr	r1, [r0, #0]
 800958a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800958e:	6001      	str	r1, [r0, #0]
 8009590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009592:	bf00      	nop
 8009594:	e000ed88 	.word	0xe000ed88

08009598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800959e:	f3ef 8305 	mrs	r3, IPSR
 80095a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d914      	bls.n	80095d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095aa:	4a17      	ldr	r2, [pc, #92]	; (8009608 <vPortValidateInterruptPriority+0x70>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095b4:	4b15      	ldr	r3, [pc, #84]	; (800960c <vPortValidateInterruptPriority+0x74>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	7afa      	ldrb	r2, [r7, #11]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d20a      	bcs.n	80095d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	607b      	str	r3, [r7, #4]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <vPortValidateInterruptPriority+0x78>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80095dc:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <vPortValidateInterruptPriority+0x7c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d90a      	bls.n	80095fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	603b      	str	r3, [r7, #0]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <vPortValidateInterruptPriority+0x60>
	}
 80095fa:	bf00      	nop
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	e000e3f0 	.word	0xe000e3f0
 800960c:	200010d8 	.word	0x200010d8
 8009610:	e000ed0c 	.word	0xe000ed0c
 8009614:	200010dc 	.word	0x200010dc

08009618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08a      	sub	sp, #40	; 0x28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009620:	2300      	movs	r3, #0
 8009622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009624:	f7fe fd92 	bl	800814c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009628:	4b5b      	ldr	r3, [pc, #364]	; (8009798 <pvPortMalloc+0x180>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009630:	f000 f920 	bl	8009874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009634:	4b59      	ldr	r3, [pc, #356]	; (800979c <pvPortMalloc+0x184>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4013      	ands	r3, r2
 800963c:	2b00      	cmp	r3, #0
 800963e:	f040 8093 	bne.w	8009768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01d      	beq.n	8009684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009648:	2208      	movs	r2, #8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4413      	add	r3, r2
 800964e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f003 0307 	and.w	r3, r3, #7
 8009656:	2b00      	cmp	r3, #0
 8009658:	d014      	beq.n	8009684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	3308      	adds	r3, #8
 8009662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <pvPortMalloc+0x6c>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	617b      	str	r3, [r7, #20]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d06e      	beq.n	8009768 <pvPortMalloc+0x150>
 800968a:	4b45      	ldr	r3, [pc, #276]	; (80097a0 <pvPortMalloc+0x188>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d869      	bhi.n	8009768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009694:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <pvPortMalloc+0x18c>)
 8009696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009698:	4b42      	ldr	r3, [pc, #264]	; (80097a4 <pvPortMalloc+0x18c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800969e:	e004      	b.n	80096aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d903      	bls.n	80096bc <pvPortMalloc+0xa4>
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f1      	bne.n	80096a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096bc:	4b36      	ldr	r3, [pc, #216]	; (8009798 <pvPortMalloc+0x180>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d050      	beq.n	8009768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2208      	movs	r2, #8
 80096cc:	4413      	add	r3, r2
 80096ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	2308      	movs	r3, #8
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d91f      	bls.n	8009728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4413      	add	r3, r2
 80096ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <pvPortMalloc+0xf8>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	613b      	str	r3, [r7, #16]
}
 800970c:	bf00      	nop
 800970e:	e7fe      	b.n	800970e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009722:	69b8      	ldr	r0, [r7, #24]
 8009724:	f000 f908 	bl	8009938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009728:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <pvPortMalloc+0x188>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	4a1b      	ldr	r2, [pc, #108]	; (80097a0 <pvPortMalloc+0x188>)
 8009734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009736:	4b1a      	ldr	r3, [pc, #104]	; (80097a0 <pvPortMalloc+0x188>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <pvPortMalloc+0x190>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d203      	bcs.n	800974a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009742:	4b17      	ldr	r3, [pc, #92]	; (80097a0 <pvPortMalloc+0x188>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a18      	ldr	r2, [pc, #96]	; (80097a8 <pvPortMalloc+0x190>)
 8009748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	4b13      	ldr	r3, [pc, #76]	; (800979c <pvPortMalloc+0x184>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	431a      	orrs	r2, r3
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <pvPortMalloc+0x194>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	4a11      	ldr	r2, [pc, #68]	; (80097ac <pvPortMalloc+0x194>)
 8009766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009768:	f7fe fcfe 	bl	8008168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <pvPortMalloc+0x174>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	60fb      	str	r3, [r7, #12]
}
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <pvPortMalloc+0x172>
	return pvReturn;
 800978c:	69fb      	ldr	r3, [r7, #28]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3728      	adds	r7, #40	; 0x28
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20004ce8 	.word	0x20004ce8
 800979c:	20004cfc 	.word	0x20004cfc
 80097a0:	20004cec 	.word	0x20004cec
 80097a4:	20004ce0 	.word	0x20004ce0
 80097a8:	20004cf0 	.word	0x20004cf0
 80097ac:	20004cf4 	.word	0x20004cf4

080097b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d04d      	beq.n	800985e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097c2:	2308      	movs	r3, #8
 80097c4:	425b      	negs	r3, r3
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4413      	add	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	4b24      	ldr	r3, [pc, #144]	; (8009868 <vPortFree+0xb8>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4013      	ands	r3, r2
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10a      	bne.n	80097f4 <vPortFree+0x44>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60fb      	str	r3, [r7, #12]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00a      	beq.n	8009812 <vPortFree+0x62>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	60bb      	str	r3, [r7, #8]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <vPortFree+0xb8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4013      	ands	r3, r2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01e      	beq.n	800985e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d11a      	bne.n	800985e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <vPortFree+0xb8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	43db      	mvns	r3, r3
 8009832:	401a      	ands	r2, r3
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009838:	f7fe fc88 	bl	800814c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <vPortFree+0xbc>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4413      	add	r3, r2
 8009846:	4a09      	ldr	r2, [pc, #36]	; (800986c <vPortFree+0xbc>)
 8009848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800984a:	6938      	ldr	r0, [r7, #16]
 800984c:	f000 f874 	bl	8009938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <vPortFree+0xc0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3301      	adds	r3, #1
 8009856:	4a06      	ldr	r2, [pc, #24]	; (8009870 <vPortFree+0xc0>)
 8009858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800985a:	f7fe fc85 	bl	8008168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800985e:	bf00      	nop
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20004cfc 	.word	0x20004cfc
 800986c:	20004cec 	.word	0x20004cec
 8009870:	20004cf8 	.word	0x20004cf8

08009874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800987a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800987e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009880:	4b27      	ldr	r3, [pc, #156]	; (8009920 <prvHeapInit+0xac>)
 8009882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0307 	and.w	r3, r3, #7
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00c      	beq.n	80098a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3307      	adds	r3, #7
 8009892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0307 	bic.w	r3, r3, #7
 800989a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	4a1f      	ldr	r2, [pc, #124]	; (8009920 <prvHeapInit+0xac>)
 80098a4:	4413      	add	r3, r2
 80098a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098ac:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <prvHeapInit+0xb0>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <prvHeapInit+0xb0>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4413      	add	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098c0:	2208      	movs	r2, #8
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0307 	bic.w	r3, r3, #7
 80098ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a15      	ldr	r2, [pc, #84]	; (8009928 <prvHeapInit+0xb4>)
 80098d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098d6:	4b14      	ldr	r3, [pc, #80]	; (8009928 <prvHeapInit+0xb4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <prvHeapInit+0xb4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098f4:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <prvHeapInit+0xb4>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4a0a      	ldr	r2, [pc, #40]	; (800992c <prvHeapInit+0xb8>)
 8009902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <prvHeapInit+0xbc>)
 800990a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800990c:	4b09      	ldr	r3, [pc, #36]	; (8009934 <prvHeapInit+0xc0>)
 800990e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009912:	601a      	str	r2, [r3, #0]
}
 8009914:	bf00      	nop
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	200010e0 	.word	0x200010e0
 8009924:	20004ce0 	.word	0x20004ce0
 8009928:	20004ce8 	.word	0x20004ce8
 800992c:	20004cf0 	.word	0x20004cf0
 8009930:	20004cec 	.word	0x20004cec
 8009934:	20004cfc 	.word	0x20004cfc

08009938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009940:	4b28      	ldr	r3, [pc, #160]	; (80099e4 <prvInsertBlockIntoFreeList+0xac>)
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e002      	b.n	800994c <prvInsertBlockIntoFreeList+0x14>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	429a      	cmp	r2, r3
 8009954:	d8f7      	bhi.n	8009946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d108      	bne.n	800997a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	441a      	add	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	441a      	add	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d118      	bne.n	80099c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d00d      	beq.n	80099b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	e008      	b.n	80099c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099b6:	4b0c      	ldr	r3, [pc, #48]	; (80099e8 <prvInsertBlockIntoFreeList+0xb0>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e003      	b.n	80099c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d002      	beq.n	80099d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d6:	bf00      	nop
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20004ce0 	.word	0x20004ce0
 80099e8:	20004ce8 	.word	0x20004ce8

080099ec <__errno>:
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <__errno+0x8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20000010 	.word	0x20000010

080099f8 <__libc_init_array>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	4d0d      	ldr	r5, [pc, #52]	; (8009a30 <__libc_init_array+0x38>)
 80099fc:	4c0d      	ldr	r4, [pc, #52]	; (8009a34 <__libc_init_array+0x3c>)
 80099fe:	1b64      	subs	r4, r4, r5
 8009a00:	10a4      	asrs	r4, r4, #2
 8009a02:	2600      	movs	r6, #0
 8009a04:	42a6      	cmp	r6, r4
 8009a06:	d109      	bne.n	8009a1c <__libc_init_array+0x24>
 8009a08:	4d0b      	ldr	r5, [pc, #44]	; (8009a38 <__libc_init_array+0x40>)
 8009a0a:	4c0c      	ldr	r4, [pc, #48]	; (8009a3c <__libc_init_array+0x44>)
 8009a0c:	f000 fd46 	bl	800a49c <_init>
 8009a10:	1b64      	subs	r4, r4, r5
 8009a12:	10a4      	asrs	r4, r4, #2
 8009a14:	2600      	movs	r6, #0
 8009a16:	42a6      	cmp	r6, r4
 8009a18:	d105      	bne.n	8009a26 <__libc_init_array+0x2e>
 8009a1a:	bd70      	pop	{r4, r5, r6, pc}
 8009a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a20:	4798      	blx	r3
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7ee      	b.n	8009a04 <__libc_init_array+0xc>
 8009a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2a:	4798      	blx	r3
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e7f2      	b.n	8009a16 <__libc_init_array+0x1e>
 8009a30:	0800a798 	.word	0x0800a798
 8009a34:	0800a798 	.word	0x0800a798
 8009a38:	0800a798 	.word	0x0800a798
 8009a3c:	0800a79c 	.word	0x0800a79c

08009a40 <__retarget_lock_acquire_recursive>:
 8009a40:	4770      	bx	lr

08009a42 <__retarget_lock_release_recursive>:
 8009a42:	4770      	bx	lr

08009a44 <memcpy>:
 8009a44:	440a      	add	r2, r1
 8009a46:	4291      	cmp	r1, r2
 8009a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a4c:	d100      	bne.n	8009a50 <memcpy+0xc>
 8009a4e:	4770      	bx	lr
 8009a50:	b510      	push	{r4, lr}
 8009a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a5a:	4291      	cmp	r1, r2
 8009a5c:	d1f9      	bne.n	8009a52 <memcpy+0xe>
 8009a5e:	bd10      	pop	{r4, pc}

08009a60 <memset>:
 8009a60:	4402      	add	r2, r0
 8009a62:	4603      	mov	r3, r0
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d100      	bne.n	8009a6a <memset+0xa>
 8009a68:	4770      	bx	lr
 8009a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6e:	e7f9      	b.n	8009a64 <memset+0x4>

08009a70 <_malloc_r>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	1ccd      	adds	r5, r1, #3
 8009a74:	f025 0503 	bic.w	r5, r5, #3
 8009a78:	3508      	adds	r5, #8
 8009a7a:	2d0c      	cmp	r5, #12
 8009a7c:	bf38      	it	cc
 8009a7e:	250c      	movcc	r5, #12
 8009a80:	2d00      	cmp	r5, #0
 8009a82:	4606      	mov	r6, r0
 8009a84:	db01      	blt.n	8009a8a <_malloc_r+0x1a>
 8009a86:	42a9      	cmp	r1, r5
 8009a88:	d903      	bls.n	8009a92 <_malloc_r+0x22>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	6033      	str	r3, [r6, #0]
 8009a8e:	2000      	movs	r0, #0
 8009a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a92:	f000 f96f 	bl	8009d74 <__malloc_lock>
 8009a96:	4921      	ldr	r1, [pc, #132]	; (8009b1c <_malloc_r+0xac>)
 8009a98:	680a      	ldr	r2, [r1, #0]
 8009a9a:	4614      	mov	r4, r2
 8009a9c:	b99c      	cbnz	r4, 8009ac6 <_malloc_r+0x56>
 8009a9e:	4f20      	ldr	r7, [pc, #128]	; (8009b20 <_malloc_r+0xb0>)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	b923      	cbnz	r3, 8009aae <_malloc_r+0x3e>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 f8a6 	bl	8009bf8 <_sbrk_r>
 8009aac:	6038      	str	r0, [r7, #0]
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 f8a1 	bl	8009bf8 <_sbrk_r>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	d123      	bne.n	8009b02 <_malloc_r+0x92>
 8009aba:	230c      	movs	r3, #12
 8009abc:	6033      	str	r3, [r6, #0]
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f000 f95e 	bl	8009d80 <__malloc_unlock>
 8009ac4:	e7e3      	b.n	8009a8e <_malloc_r+0x1e>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	1b5b      	subs	r3, r3, r5
 8009aca:	d417      	bmi.n	8009afc <_malloc_r+0x8c>
 8009acc:	2b0b      	cmp	r3, #11
 8009ace:	d903      	bls.n	8009ad8 <_malloc_r+0x68>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	441c      	add	r4, r3
 8009ad4:	6025      	str	r5, [r4, #0]
 8009ad6:	e004      	b.n	8009ae2 <_malloc_r+0x72>
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	42a2      	cmp	r2, r4
 8009adc:	bf0c      	ite	eq
 8009ade:	600b      	streq	r3, [r1, #0]
 8009ae0:	6053      	strne	r3, [r2, #4]
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f000 f94c 	bl	8009d80 <__malloc_unlock>
 8009ae8:	f104 000b 	add.w	r0, r4, #11
 8009aec:	1d23      	adds	r3, r4, #4
 8009aee:	f020 0007 	bic.w	r0, r0, #7
 8009af2:	1ac2      	subs	r2, r0, r3
 8009af4:	d0cc      	beq.n	8009a90 <_malloc_r+0x20>
 8009af6:	1a1b      	subs	r3, r3, r0
 8009af8:	50a3      	str	r3, [r4, r2]
 8009afa:	e7c9      	b.n	8009a90 <_malloc_r+0x20>
 8009afc:	4622      	mov	r2, r4
 8009afe:	6864      	ldr	r4, [r4, #4]
 8009b00:	e7cc      	b.n	8009a9c <_malloc_r+0x2c>
 8009b02:	1cc4      	adds	r4, r0, #3
 8009b04:	f024 0403 	bic.w	r4, r4, #3
 8009b08:	42a0      	cmp	r0, r4
 8009b0a:	d0e3      	beq.n	8009ad4 <_malloc_r+0x64>
 8009b0c:	1a21      	subs	r1, r4, r0
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f000 f872 	bl	8009bf8 <_sbrk_r>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d1dd      	bne.n	8009ad4 <_malloc_r+0x64>
 8009b18:	e7cf      	b.n	8009aba <_malloc_r+0x4a>
 8009b1a:	bf00      	nop
 8009b1c:	20004d00 	.word	0x20004d00
 8009b20:	20004d04 	.word	0x20004d04

08009b24 <cleanup_glue>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	460c      	mov	r4, r1
 8009b28:	6809      	ldr	r1, [r1, #0]
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	b109      	cbz	r1, 8009b32 <cleanup_glue+0xe>
 8009b2e:	f7ff fff9 	bl	8009b24 <cleanup_glue>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b3a:	f000 b927 	b.w	8009d8c <_free_r>
	...

08009b40 <_reclaim_reent>:
 8009b40:	4b2c      	ldr	r3, [pc, #176]	; (8009bf4 <_reclaim_reent+0xb4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4283      	cmp	r3, r0
 8009b46:	b570      	push	{r4, r5, r6, lr}
 8009b48:	4604      	mov	r4, r0
 8009b4a:	d051      	beq.n	8009bf0 <_reclaim_reent+0xb0>
 8009b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b4e:	b143      	cbz	r3, 8009b62 <_reclaim_reent+0x22>
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d14a      	bne.n	8009bec <_reclaim_reent+0xac>
 8009b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b58:	6819      	ldr	r1, [r3, #0]
 8009b5a:	b111      	cbz	r1, 8009b62 <_reclaim_reent+0x22>
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 f915 	bl	8009d8c <_free_r>
 8009b62:	6961      	ldr	r1, [r4, #20]
 8009b64:	b111      	cbz	r1, 8009b6c <_reclaim_reent+0x2c>
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 f910 	bl	8009d8c <_free_r>
 8009b6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b6e:	b111      	cbz	r1, 8009b76 <_reclaim_reent+0x36>
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 f90b 	bl	8009d8c <_free_r>
 8009b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b78:	b111      	cbz	r1, 8009b80 <_reclaim_reent+0x40>
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 f906 	bl	8009d8c <_free_r>
 8009b80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b82:	b111      	cbz	r1, 8009b8a <_reclaim_reent+0x4a>
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 f901 	bl	8009d8c <_free_r>
 8009b8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b8c:	b111      	cbz	r1, 8009b94 <_reclaim_reent+0x54>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 f8fc 	bl	8009d8c <_free_r>
 8009b94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b96:	b111      	cbz	r1, 8009b9e <_reclaim_reent+0x5e>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 f8f7 	bl	8009d8c <_free_r>
 8009b9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009ba0:	b111      	cbz	r1, 8009ba8 <_reclaim_reent+0x68>
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 f8f2 	bl	8009d8c <_free_r>
 8009ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009baa:	b111      	cbz	r1, 8009bb2 <_reclaim_reent+0x72>
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 f8ed 	bl	8009d8c <_free_r>
 8009bb2:	69a3      	ldr	r3, [r4, #24]
 8009bb4:	b1e3      	cbz	r3, 8009bf0 <_reclaim_reent+0xb0>
 8009bb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4798      	blx	r3
 8009bbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bbe:	b1b9      	cbz	r1, 8009bf0 <_reclaim_reent+0xb0>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bc6:	f7ff bfad 	b.w	8009b24 <cleanup_glue>
 8009bca:	5949      	ldr	r1, [r1, r5]
 8009bcc:	b941      	cbnz	r1, 8009be0 <_reclaim_reent+0xa0>
 8009bce:	3504      	adds	r5, #4
 8009bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd2:	2d80      	cmp	r5, #128	; 0x80
 8009bd4:	68d9      	ldr	r1, [r3, #12]
 8009bd6:	d1f8      	bne.n	8009bca <_reclaim_reent+0x8a>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 f8d7 	bl	8009d8c <_free_r>
 8009bde:	e7ba      	b.n	8009b56 <_reclaim_reent+0x16>
 8009be0:	680e      	ldr	r6, [r1, #0]
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f8d2 	bl	8009d8c <_free_r>
 8009be8:	4631      	mov	r1, r6
 8009bea:	e7ef      	b.n	8009bcc <_reclaim_reent+0x8c>
 8009bec:	2500      	movs	r5, #0
 8009bee:	e7ef      	b.n	8009bd0 <_reclaim_reent+0x90>
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000010 	.word	0x20000010

08009bf8 <_sbrk_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d06      	ldr	r5, [pc, #24]	; (8009c14 <_sbrk_r+0x1c>)
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4604      	mov	r4, r0
 8009c00:	4608      	mov	r0, r1
 8009c02:	602b      	str	r3, [r5, #0]
 8009c04:	f7f8 fec8 	bl	8002998 <_sbrk>
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	d102      	bne.n	8009c12 <_sbrk_r+0x1a>
 8009c0c:	682b      	ldr	r3, [r5, #0]
 8009c0e:	b103      	cbz	r3, 8009c12 <_sbrk_r+0x1a>
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	20004da0 	.word	0x20004da0

08009c18 <siprintf>:
 8009c18:	b40e      	push	{r1, r2, r3}
 8009c1a:	b500      	push	{lr}
 8009c1c:	b09c      	sub	sp, #112	; 0x70
 8009c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c20:	9002      	str	r0, [sp, #8]
 8009c22:	9006      	str	r0, [sp, #24]
 8009c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c28:	4809      	ldr	r0, [pc, #36]	; (8009c50 <siprintf+0x38>)
 8009c2a:	9107      	str	r1, [sp, #28]
 8009c2c:	9104      	str	r1, [sp, #16]
 8009c2e:	4909      	ldr	r1, [pc, #36]	; (8009c54 <siprintf+0x3c>)
 8009c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c34:	9105      	str	r1, [sp, #20]
 8009c36:	6800      	ldr	r0, [r0, #0]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	a902      	add	r1, sp, #8
 8009c3c:	f000 f952 	bl	8009ee4 <_svfiprintf_r>
 8009c40:	9b02      	ldr	r3, [sp, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	b01c      	add	sp, #112	; 0x70
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	b003      	add	sp, #12
 8009c4e:	4770      	bx	lr
 8009c50:	20000010 	.word	0x20000010
 8009c54:	ffff0208 	.word	0xffff0208

08009c58 <_strtol_l.isra.0>:
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5e:	d001      	beq.n	8009c64 <_strtol_l.isra.0+0xc>
 8009c60:	2b24      	cmp	r3, #36	; 0x24
 8009c62:	d906      	bls.n	8009c72 <_strtol_l.isra.0+0x1a>
 8009c64:	f7ff fec2 	bl	80099ec <__errno>
 8009c68:	2316      	movs	r3, #22
 8009c6a:	6003      	str	r3, [r0, #0]
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c72:	4f3a      	ldr	r7, [pc, #232]	; (8009d5c <_strtol_l.isra.0+0x104>)
 8009c74:	468e      	mov	lr, r1
 8009c76:	4676      	mov	r6, lr
 8009c78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009c7c:	5de5      	ldrb	r5, [r4, r7]
 8009c7e:	f015 0508 	ands.w	r5, r5, #8
 8009c82:	d1f8      	bne.n	8009c76 <_strtol_l.isra.0+0x1e>
 8009c84:	2c2d      	cmp	r4, #45	; 0x2d
 8009c86:	d134      	bne.n	8009cf2 <_strtol_l.isra.0+0x9a>
 8009c88:	f89e 4000 	ldrb.w	r4, [lr]
 8009c8c:	f04f 0801 	mov.w	r8, #1
 8009c90:	f106 0e02 	add.w	lr, r6, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d05c      	beq.n	8009d52 <_strtol_l.isra.0+0xfa>
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d10c      	bne.n	8009cb6 <_strtol_l.isra.0+0x5e>
 8009c9c:	2c30      	cmp	r4, #48	; 0x30
 8009c9e:	d10a      	bne.n	8009cb6 <_strtol_l.isra.0+0x5e>
 8009ca0:	f89e 4000 	ldrb.w	r4, [lr]
 8009ca4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ca8:	2c58      	cmp	r4, #88	; 0x58
 8009caa:	d14d      	bne.n	8009d48 <_strtol_l.isra.0+0xf0>
 8009cac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f10e 0e02 	add.w	lr, lr, #2
 8009cb6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009cba:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	fbbc f9f3 	udiv	r9, ip, r3
 8009cc4:	4635      	mov	r5, r6
 8009cc6:	fb03 ca19 	mls	sl, r3, r9, ip
 8009cca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009cce:	2f09      	cmp	r7, #9
 8009cd0:	d818      	bhi.n	8009d04 <_strtol_l.isra.0+0xac>
 8009cd2:	463c      	mov	r4, r7
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	dd24      	ble.n	8009d22 <_strtol_l.isra.0+0xca>
 8009cd8:	2e00      	cmp	r6, #0
 8009cda:	db1f      	blt.n	8009d1c <_strtol_l.isra.0+0xc4>
 8009cdc:	45a9      	cmp	r9, r5
 8009cde:	d31d      	bcc.n	8009d1c <_strtol_l.isra.0+0xc4>
 8009ce0:	d101      	bne.n	8009ce6 <_strtol_l.isra.0+0x8e>
 8009ce2:	45a2      	cmp	sl, r4
 8009ce4:	db1a      	blt.n	8009d1c <_strtol_l.isra.0+0xc4>
 8009ce6:	fb05 4503 	mla	r5, r5, r3, r4
 8009cea:	2601      	movs	r6, #1
 8009cec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009cf0:	e7eb      	b.n	8009cca <_strtol_l.isra.0+0x72>
 8009cf2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cf4:	bf08      	it	eq
 8009cf6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009cfa:	46a8      	mov	r8, r5
 8009cfc:	bf08      	it	eq
 8009cfe:	f106 0e02 	addeq.w	lr, r6, #2
 8009d02:	e7c7      	b.n	8009c94 <_strtol_l.isra.0+0x3c>
 8009d04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009d08:	2f19      	cmp	r7, #25
 8009d0a:	d801      	bhi.n	8009d10 <_strtol_l.isra.0+0xb8>
 8009d0c:	3c37      	subs	r4, #55	; 0x37
 8009d0e:	e7e1      	b.n	8009cd4 <_strtol_l.isra.0+0x7c>
 8009d10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009d14:	2f19      	cmp	r7, #25
 8009d16:	d804      	bhi.n	8009d22 <_strtol_l.isra.0+0xca>
 8009d18:	3c57      	subs	r4, #87	; 0x57
 8009d1a:	e7db      	b.n	8009cd4 <_strtol_l.isra.0+0x7c>
 8009d1c:	f04f 36ff 	mov.w	r6, #4294967295
 8009d20:	e7e4      	b.n	8009cec <_strtol_l.isra.0+0x94>
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	da05      	bge.n	8009d32 <_strtol_l.isra.0+0xda>
 8009d26:	2322      	movs	r3, #34	; 0x22
 8009d28:	6003      	str	r3, [r0, #0]
 8009d2a:	4665      	mov	r5, ip
 8009d2c:	b942      	cbnz	r2, 8009d40 <_strtol_l.isra.0+0xe8>
 8009d2e:	4628      	mov	r0, r5
 8009d30:	e79d      	b.n	8009c6e <_strtol_l.isra.0+0x16>
 8009d32:	f1b8 0f00 	cmp.w	r8, #0
 8009d36:	d000      	beq.n	8009d3a <_strtol_l.isra.0+0xe2>
 8009d38:	426d      	negs	r5, r5
 8009d3a:	2a00      	cmp	r2, #0
 8009d3c:	d0f7      	beq.n	8009d2e <_strtol_l.isra.0+0xd6>
 8009d3e:	b10e      	cbz	r6, 8009d44 <_strtol_l.isra.0+0xec>
 8009d40:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	e7f2      	b.n	8009d2e <_strtol_l.isra.0+0xd6>
 8009d48:	2430      	movs	r4, #48	; 0x30
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1b3      	bne.n	8009cb6 <_strtol_l.isra.0+0x5e>
 8009d4e:	2308      	movs	r3, #8
 8009d50:	e7b1      	b.n	8009cb6 <_strtol_l.isra.0+0x5e>
 8009d52:	2c30      	cmp	r4, #48	; 0x30
 8009d54:	d0a4      	beq.n	8009ca0 <_strtol_l.isra.0+0x48>
 8009d56:	230a      	movs	r3, #10
 8009d58:	e7ad      	b.n	8009cb6 <_strtol_l.isra.0+0x5e>
 8009d5a:	bf00      	nop
 8009d5c:	0800a65d 	.word	0x0800a65d

08009d60 <strtol>:
 8009d60:	4613      	mov	r3, r2
 8009d62:	460a      	mov	r2, r1
 8009d64:	4601      	mov	r1, r0
 8009d66:	4802      	ldr	r0, [pc, #8]	; (8009d70 <strtol+0x10>)
 8009d68:	6800      	ldr	r0, [r0, #0]
 8009d6a:	f7ff bf75 	b.w	8009c58 <_strtol_l.isra.0>
 8009d6e:	bf00      	nop
 8009d70:	20000010 	.word	0x20000010

08009d74 <__malloc_lock>:
 8009d74:	4801      	ldr	r0, [pc, #4]	; (8009d7c <__malloc_lock+0x8>)
 8009d76:	f7ff be63 	b.w	8009a40 <__retarget_lock_acquire_recursive>
 8009d7a:	bf00      	nop
 8009d7c:	20004d98 	.word	0x20004d98

08009d80 <__malloc_unlock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_unlock+0x8>)
 8009d82:	f7ff be5e 	b.w	8009a42 <__retarget_lock_release_recursive>
 8009d86:	bf00      	nop
 8009d88:	20004d98 	.word	0x20004d98

08009d8c <_free_r>:
 8009d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	d048      	beq.n	8009e24 <_free_r+0x98>
 8009d92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d96:	9001      	str	r0, [sp, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d9e:	bfb8      	it	lt
 8009da0:	18e4      	addlt	r4, r4, r3
 8009da2:	f7ff ffe7 	bl	8009d74 <__malloc_lock>
 8009da6:	4a20      	ldr	r2, [pc, #128]	; (8009e28 <_free_r+0x9c>)
 8009da8:	9801      	ldr	r0, [sp, #4]
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	4615      	mov	r5, r2
 8009dae:	b933      	cbnz	r3, 8009dbe <_free_r+0x32>
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	6014      	str	r4, [r2, #0]
 8009db4:	b003      	add	sp, #12
 8009db6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dba:	f7ff bfe1 	b.w	8009d80 <__malloc_unlock>
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	d90b      	bls.n	8009dda <_free_r+0x4e>
 8009dc2:	6821      	ldr	r1, [r4, #0]
 8009dc4:	1862      	adds	r2, r4, r1
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	bf04      	itt	eq
 8009dca:	681a      	ldreq	r2, [r3, #0]
 8009dcc:	685b      	ldreq	r3, [r3, #4]
 8009dce:	6063      	str	r3, [r4, #4]
 8009dd0:	bf04      	itt	eq
 8009dd2:	1852      	addeq	r2, r2, r1
 8009dd4:	6022      	streq	r2, [r4, #0]
 8009dd6:	602c      	str	r4, [r5, #0]
 8009dd8:	e7ec      	b.n	8009db4 <_free_r+0x28>
 8009dda:	461a      	mov	r2, r3
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	b10b      	cbz	r3, 8009de4 <_free_r+0x58>
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d9fa      	bls.n	8009dda <_free_r+0x4e>
 8009de4:	6811      	ldr	r1, [r2, #0]
 8009de6:	1855      	adds	r5, r2, r1
 8009de8:	42a5      	cmp	r5, r4
 8009dea:	d10b      	bne.n	8009e04 <_free_r+0x78>
 8009dec:	6824      	ldr	r4, [r4, #0]
 8009dee:	4421      	add	r1, r4
 8009df0:	1854      	adds	r4, r2, r1
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	6011      	str	r1, [r2, #0]
 8009df6:	d1dd      	bne.n	8009db4 <_free_r+0x28>
 8009df8:	681c      	ldr	r4, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	6053      	str	r3, [r2, #4]
 8009dfe:	4421      	add	r1, r4
 8009e00:	6011      	str	r1, [r2, #0]
 8009e02:	e7d7      	b.n	8009db4 <_free_r+0x28>
 8009e04:	d902      	bls.n	8009e0c <_free_r+0x80>
 8009e06:	230c      	movs	r3, #12
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	e7d3      	b.n	8009db4 <_free_r+0x28>
 8009e0c:	6825      	ldr	r5, [r4, #0]
 8009e0e:	1961      	adds	r1, r4, r5
 8009e10:	428b      	cmp	r3, r1
 8009e12:	bf04      	itt	eq
 8009e14:	6819      	ldreq	r1, [r3, #0]
 8009e16:	685b      	ldreq	r3, [r3, #4]
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	bf04      	itt	eq
 8009e1c:	1949      	addeq	r1, r1, r5
 8009e1e:	6021      	streq	r1, [r4, #0]
 8009e20:	6054      	str	r4, [r2, #4]
 8009e22:	e7c7      	b.n	8009db4 <_free_r+0x28>
 8009e24:	b003      	add	sp, #12
 8009e26:	bd30      	pop	{r4, r5, pc}
 8009e28:	20004d00 	.word	0x20004d00

08009e2c <__ssputs_r>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	688e      	ldr	r6, [r1, #8]
 8009e32:	429e      	cmp	r6, r3
 8009e34:	4682      	mov	sl, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4690      	mov	r8, r2
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	d838      	bhi.n	8009eb0 <__ssputs_r+0x84>
 8009e3e:	898a      	ldrh	r2, [r1, #12]
 8009e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e44:	d032      	beq.n	8009eac <__ssputs_r+0x80>
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	6909      	ldr	r1, [r1, #16]
 8009e4a:	eba5 0901 	sub.w	r9, r5, r1
 8009e4e:	6965      	ldr	r5, [r4, #20]
 8009e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e58:	3301      	adds	r3, #1
 8009e5a:	444b      	add	r3, r9
 8009e5c:	106d      	asrs	r5, r5, #1
 8009e5e:	429d      	cmp	r5, r3
 8009e60:	bf38      	it	cc
 8009e62:	461d      	movcc	r5, r3
 8009e64:	0553      	lsls	r3, r2, #21
 8009e66:	d531      	bpl.n	8009ecc <__ssputs_r+0xa0>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	f7ff fe01 	bl	8009a70 <_malloc_r>
 8009e6e:	4606      	mov	r6, r0
 8009e70:	b950      	cbnz	r0, 8009e88 <__ssputs_r+0x5c>
 8009e72:	230c      	movs	r3, #12
 8009e74:	f8ca 3000 	str.w	r3, [sl]
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295
 8009e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e88:	6921      	ldr	r1, [r4, #16]
 8009e8a:	464a      	mov	r2, r9
 8009e8c:	f7ff fdda 	bl	8009a44 <memcpy>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	6126      	str	r6, [r4, #16]
 8009e9e:	6165      	str	r5, [r4, #20]
 8009ea0:	444e      	add	r6, r9
 8009ea2:	eba5 0509 	sub.w	r5, r5, r9
 8009ea6:	6026      	str	r6, [r4, #0]
 8009ea8:	60a5      	str	r5, [r4, #8]
 8009eaa:	463e      	mov	r6, r7
 8009eac:	42be      	cmp	r6, r7
 8009eae:	d900      	bls.n	8009eb2 <__ssputs_r+0x86>
 8009eb0:	463e      	mov	r6, r7
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	6820      	ldr	r0, [r4, #0]
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	f000 faa8 	bl	800a40c <memmove>
 8009ebc:	68a3      	ldr	r3, [r4, #8]
 8009ebe:	6822      	ldr	r2, [r4, #0]
 8009ec0:	1b9b      	subs	r3, r3, r6
 8009ec2:	4432      	add	r2, r6
 8009ec4:	60a3      	str	r3, [r4, #8]
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7db      	b.n	8009e84 <__ssputs_r+0x58>
 8009ecc:	462a      	mov	r2, r5
 8009ece:	f000 fab7 	bl	800a440 <_realloc_r>
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d1e1      	bne.n	8009e9c <__ssputs_r+0x70>
 8009ed8:	6921      	ldr	r1, [r4, #16]
 8009eda:	4650      	mov	r0, sl
 8009edc:	f7ff ff56 	bl	8009d8c <_free_r>
 8009ee0:	e7c7      	b.n	8009e72 <__ssputs_r+0x46>
	...

08009ee4 <_svfiprintf_r>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	4698      	mov	r8, r3
 8009eea:	898b      	ldrh	r3, [r1, #12]
 8009eec:	061b      	lsls	r3, r3, #24
 8009eee:	b09d      	sub	sp, #116	; 0x74
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	d50e      	bpl.n	8009f16 <_svfiprintf_r+0x32>
 8009ef8:	690b      	ldr	r3, [r1, #16]
 8009efa:	b963      	cbnz	r3, 8009f16 <_svfiprintf_r+0x32>
 8009efc:	2140      	movs	r1, #64	; 0x40
 8009efe:	f7ff fdb7 	bl	8009a70 <_malloc_r>
 8009f02:	6028      	str	r0, [r5, #0]
 8009f04:	6128      	str	r0, [r5, #16]
 8009f06:	b920      	cbnz	r0, 8009f12 <_svfiprintf_r+0x2e>
 8009f08:	230c      	movs	r3, #12
 8009f0a:	603b      	str	r3, [r7, #0]
 8009f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f10:	e0d1      	b.n	800a0b6 <_svfiprintf_r+0x1d2>
 8009f12:	2340      	movs	r3, #64	; 0x40
 8009f14:	616b      	str	r3, [r5, #20]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1a:	2320      	movs	r3, #32
 8009f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f24:	2330      	movs	r3, #48	; 0x30
 8009f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0d0 <_svfiprintf_r+0x1ec>
 8009f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f2e:	f04f 0901 	mov.w	r9, #1
 8009f32:	4623      	mov	r3, r4
 8009f34:	469a      	mov	sl, r3
 8009f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f3a:	b10a      	cbz	r2, 8009f40 <_svfiprintf_r+0x5c>
 8009f3c:	2a25      	cmp	r2, #37	; 0x25
 8009f3e:	d1f9      	bne.n	8009f34 <_svfiprintf_r+0x50>
 8009f40:	ebba 0b04 	subs.w	fp, sl, r4
 8009f44:	d00b      	beq.n	8009f5e <_svfiprintf_r+0x7a>
 8009f46:	465b      	mov	r3, fp
 8009f48:	4622      	mov	r2, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ff6d 	bl	8009e2c <__ssputs_r>
 8009f52:	3001      	adds	r0, #1
 8009f54:	f000 80aa 	beq.w	800a0ac <_svfiprintf_r+0x1c8>
 8009f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5a:	445a      	add	r2, fp
 8009f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f000 80a2 	beq.w	800a0ac <_svfiprintf_r+0x1c8>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f72:	f10a 0a01 	add.w	sl, sl, #1
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f80:	4654      	mov	r4, sl
 8009f82:	2205      	movs	r2, #5
 8009f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f88:	4851      	ldr	r0, [pc, #324]	; (800a0d0 <_svfiprintf_r+0x1ec>)
 8009f8a:	f7f6 f929 	bl	80001e0 <memchr>
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	b9d8      	cbnz	r0, 8009fca <_svfiprintf_r+0xe6>
 8009f92:	06d0      	lsls	r0, r2, #27
 8009f94:	bf44      	itt	mi
 8009f96:	2320      	movmi	r3, #32
 8009f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9c:	0711      	lsls	r1, r2, #28
 8009f9e:	bf44      	itt	mi
 8009fa0:	232b      	movmi	r3, #43	; 0x2b
 8009fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009faa:	2b2a      	cmp	r3, #42	; 0x2a
 8009fac:	d015      	beq.n	8009fda <_svfiprintf_r+0xf6>
 8009fae:	9a07      	ldr	r2, [sp, #28]
 8009fb0:	4654      	mov	r4, sl
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	f04f 0c0a 	mov.w	ip, #10
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fbe:	3b30      	subs	r3, #48	; 0x30
 8009fc0:	2b09      	cmp	r3, #9
 8009fc2:	d94e      	bls.n	800a062 <_svfiprintf_r+0x17e>
 8009fc4:	b1b0      	cbz	r0, 8009ff4 <_svfiprintf_r+0x110>
 8009fc6:	9207      	str	r2, [sp, #28]
 8009fc8:	e014      	b.n	8009ff4 <_svfiprintf_r+0x110>
 8009fca:	eba0 0308 	sub.w	r3, r0, r8
 8009fce:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	46a2      	mov	sl, r4
 8009fd8:	e7d2      	b.n	8009f80 <_svfiprintf_r+0x9c>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	1d19      	adds	r1, r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bfbb      	ittet	lt
 8009fe6:	425b      	neglt	r3, r3
 8009fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8009fec:	9307      	strge	r3, [sp, #28]
 8009fee:	9307      	strlt	r3, [sp, #28]
 8009ff0:	bfb8      	it	lt
 8009ff2:	9204      	strlt	r2, [sp, #16]
 8009ff4:	7823      	ldrb	r3, [r4, #0]
 8009ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff8:	d10c      	bne.n	800a014 <_svfiprintf_r+0x130>
 8009ffa:	7863      	ldrb	r3, [r4, #1]
 8009ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffe:	d135      	bne.n	800a06c <_svfiprintf_r+0x188>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	9203      	str	r2, [sp, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfb8      	it	lt
 800a00c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a010:	3402      	adds	r4, #2
 800a012:	9305      	str	r3, [sp, #20]
 800a014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0e0 <_svfiprintf_r+0x1fc>
 800a018:	7821      	ldrb	r1, [r4, #0]
 800a01a:	2203      	movs	r2, #3
 800a01c:	4650      	mov	r0, sl
 800a01e:	f7f6 f8df 	bl	80001e0 <memchr>
 800a022:	b140      	cbz	r0, 800a036 <_svfiprintf_r+0x152>
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	eba0 000a 	sub.w	r0, r0, sl
 800a02a:	fa03 f000 	lsl.w	r0, r3, r0
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	4303      	orrs	r3, r0
 800a032:	3401      	adds	r4, #1
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03a:	4826      	ldr	r0, [pc, #152]	; (800a0d4 <_svfiprintf_r+0x1f0>)
 800a03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a040:	2206      	movs	r2, #6
 800a042:	f7f6 f8cd 	bl	80001e0 <memchr>
 800a046:	2800      	cmp	r0, #0
 800a048:	d038      	beq.n	800a0bc <_svfiprintf_r+0x1d8>
 800a04a:	4b23      	ldr	r3, [pc, #140]	; (800a0d8 <_svfiprintf_r+0x1f4>)
 800a04c:	bb1b      	cbnz	r3, 800a096 <_svfiprintf_r+0x1b2>
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	3307      	adds	r3, #7
 800a052:	f023 0307 	bic.w	r3, r3, #7
 800a056:	3308      	adds	r3, #8
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05c:	4433      	add	r3, r6
 800a05e:	9309      	str	r3, [sp, #36]	; 0x24
 800a060:	e767      	b.n	8009f32 <_svfiprintf_r+0x4e>
 800a062:	fb0c 3202 	mla	r2, ip, r2, r3
 800a066:	460c      	mov	r4, r1
 800a068:	2001      	movs	r0, #1
 800a06a:	e7a5      	b.n	8009fb8 <_svfiprintf_r+0xd4>
 800a06c:	2300      	movs	r3, #0
 800a06e:	3401      	adds	r4, #1
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	4619      	mov	r1, r3
 800a074:	f04f 0c0a 	mov.w	ip, #10
 800a078:	4620      	mov	r0, r4
 800a07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a07e:	3a30      	subs	r2, #48	; 0x30
 800a080:	2a09      	cmp	r2, #9
 800a082:	d903      	bls.n	800a08c <_svfiprintf_r+0x1a8>
 800a084:	2b00      	cmp	r3, #0
 800a086:	d0c5      	beq.n	800a014 <_svfiprintf_r+0x130>
 800a088:	9105      	str	r1, [sp, #20]
 800a08a:	e7c3      	b.n	800a014 <_svfiprintf_r+0x130>
 800a08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a090:	4604      	mov	r4, r0
 800a092:	2301      	movs	r3, #1
 800a094:	e7f0      	b.n	800a078 <_svfiprintf_r+0x194>
 800a096:	ab03      	add	r3, sp, #12
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	462a      	mov	r2, r5
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <_svfiprintf_r+0x1f8>)
 800a09e:	a904      	add	r1, sp, #16
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f3af 8000 	nop.w
 800a0a6:	1c42      	adds	r2, r0, #1
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	d1d6      	bne.n	800a05a <_svfiprintf_r+0x176>
 800a0ac:	89ab      	ldrh	r3, [r5, #12]
 800a0ae:	065b      	lsls	r3, r3, #25
 800a0b0:	f53f af2c 	bmi.w	8009f0c <_svfiprintf_r+0x28>
 800a0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0b6:	b01d      	add	sp, #116	; 0x74
 800a0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0bc:	ab03      	add	r3, sp, #12
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <_svfiprintf_r+0x1f8>)
 800a0c4:	a904      	add	r1, sp, #16
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f000 f87a 	bl	800a1c0 <_printf_i>
 800a0cc:	e7eb      	b.n	800a0a6 <_svfiprintf_r+0x1c2>
 800a0ce:	bf00      	nop
 800a0d0:	0800a75d 	.word	0x0800a75d
 800a0d4:	0800a767 	.word	0x0800a767
 800a0d8:	00000000 	.word	0x00000000
 800a0dc:	08009e2d 	.word	0x08009e2d
 800a0e0:	0800a763 	.word	0x0800a763

0800a0e4 <_printf_common>:
 800a0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	4616      	mov	r6, r2
 800a0ea:	4699      	mov	r9, r3
 800a0ec:	688a      	ldr	r2, [r1, #8]
 800a0ee:	690b      	ldr	r3, [r1, #16]
 800a0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	bfb8      	it	lt
 800a0f8:	4613      	movlt	r3, r2
 800a0fa:	6033      	str	r3, [r6, #0]
 800a0fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a100:	4607      	mov	r7, r0
 800a102:	460c      	mov	r4, r1
 800a104:	b10a      	cbz	r2, 800a10a <_printf_common+0x26>
 800a106:	3301      	adds	r3, #1
 800a108:	6033      	str	r3, [r6, #0]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	0699      	lsls	r1, r3, #26
 800a10e:	bf42      	ittt	mi
 800a110:	6833      	ldrmi	r3, [r6, #0]
 800a112:	3302      	addmi	r3, #2
 800a114:	6033      	strmi	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	f015 0506 	ands.w	r5, r5, #6
 800a11c:	d106      	bne.n	800a12c <_printf_common+0x48>
 800a11e:	f104 0a19 	add.w	sl, r4, #25
 800a122:	68e3      	ldr	r3, [r4, #12]
 800a124:	6832      	ldr	r2, [r6, #0]
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	42ab      	cmp	r3, r5
 800a12a:	dc26      	bgt.n	800a17a <_printf_common+0x96>
 800a12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a130:	1e13      	subs	r3, r2, #0
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	bf18      	it	ne
 800a136:	2301      	movne	r3, #1
 800a138:	0692      	lsls	r2, r2, #26
 800a13a:	d42b      	bmi.n	800a194 <_printf_common+0xb0>
 800a13c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a140:	4649      	mov	r1, r9
 800a142:	4638      	mov	r0, r7
 800a144:	47c0      	blx	r8
 800a146:	3001      	adds	r0, #1
 800a148:	d01e      	beq.n	800a188 <_printf_common+0xa4>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	68e5      	ldr	r5, [r4, #12]
 800a14e:	6832      	ldr	r2, [r6, #0]
 800a150:	f003 0306 	and.w	r3, r3, #6
 800a154:	2b04      	cmp	r3, #4
 800a156:	bf08      	it	eq
 800a158:	1aad      	subeq	r5, r5, r2
 800a15a:	68a3      	ldr	r3, [r4, #8]
 800a15c:	6922      	ldr	r2, [r4, #16]
 800a15e:	bf0c      	ite	eq
 800a160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a164:	2500      	movne	r5, #0
 800a166:	4293      	cmp	r3, r2
 800a168:	bfc4      	itt	gt
 800a16a:	1a9b      	subgt	r3, r3, r2
 800a16c:	18ed      	addgt	r5, r5, r3
 800a16e:	2600      	movs	r6, #0
 800a170:	341a      	adds	r4, #26
 800a172:	42b5      	cmp	r5, r6
 800a174:	d11a      	bne.n	800a1ac <_printf_common+0xc8>
 800a176:	2000      	movs	r0, #0
 800a178:	e008      	b.n	800a18c <_printf_common+0xa8>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4652      	mov	r2, sl
 800a17e:	4649      	mov	r1, r9
 800a180:	4638      	mov	r0, r7
 800a182:	47c0      	blx	r8
 800a184:	3001      	adds	r0, #1
 800a186:	d103      	bne.n	800a190 <_printf_common+0xac>
 800a188:	f04f 30ff 	mov.w	r0, #4294967295
 800a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a190:	3501      	adds	r5, #1
 800a192:	e7c6      	b.n	800a122 <_printf_common+0x3e>
 800a194:	18e1      	adds	r1, r4, r3
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	2030      	movs	r0, #48	; 0x30
 800a19a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a19e:	4422      	add	r2, r4
 800a1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1a8:	3302      	adds	r3, #2
 800a1aa:	e7c7      	b.n	800a13c <_printf_common+0x58>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	47c0      	blx	r8
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d0e6      	beq.n	800a188 <_printf_common+0xa4>
 800a1ba:	3601      	adds	r6, #1
 800a1bc:	e7d9      	b.n	800a172 <_printf_common+0x8e>
	...

0800a1c0 <_printf_i>:
 800a1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	4691      	mov	r9, r2
 800a1c8:	7e27      	ldrb	r7, [r4, #24]
 800a1ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1cc:	2f78      	cmp	r7, #120	; 0x78
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	469a      	mov	sl, r3
 800a1d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d6:	d807      	bhi.n	800a1e8 <_printf_i+0x28>
 800a1d8:	2f62      	cmp	r7, #98	; 0x62
 800a1da:	d80a      	bhi.n	800a1f2 <_printf_i+0x32>
 800a1dc:	2f00      	cmp	r7, #0
 800a1de:	f000 80d8 	beq.w	800a392 <_printf_i+0x1d2>
 800a1e2:	2f58      	cmp	r7, #88	; 0x58
 800a1e4:	f000 80a3 	beq.w	800a32e <_printf_i+0x16e>
 800a1e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f0:	e03a      	b.n	800a268 <_printf_i+0xa8>
 800a1f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1f6:	2b15      	cmp	r3, #21
 800a1f8:	d8f6      	bhi.n	800a1e8 <_printf_i+0x28>
 800a1fa:	a001      	add	r0, pc, #4	; (adr r0, 800a200 <_printf_i+0x40>)
 800a1fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a200:	0800a259 	.word	0x0800a259
 800a204:	0800a26d 	.word	0x0800a26d
 800a208:	0800a1e9 	.word	0x0800a1e9
 800a20c:	0800a1e9 	.word	0x0800a1e9
 800a210:	0800a1e9 	.word	0x0800a1e9
 800a214:	0800a1e9 	.word	0x0800a1e9
 800a218:	0800a26d 	.word	0x0800a26d
 800a21c:	0800a1e9 	.word	0x0800a1e9
 800a220:	0800a1e9 	.word	0x0800a1e9
 800a224:	0800a1e9 	.word	0x0800a1e9
 800a228:	0800a1e9 	.word	0x0800a1e9
 800a22c:	0800a379 	.word	0x0800a379
 800a230:	0800a29d 	.word	0x0800a29d
 800a234:	0800a35b 	.word	0x0800a35b
 800a238:	0800a1e9 	.word	0x0800a1e9
 800a23c:	0800a1e9 	.word	0x0800a1e9
 800a240:	0800a39b 	.word	0x0800a39b
 800a244:	0800a1e9 	.word	0x0800a1e9
 800a248:	0800a29d 	.word	0x0800a29d
 800a24c:	0800a1e9 	.word	0x0800a1e9
 800a250:	0800a1e9 	.word	0x0800a1e9
 800a254:	0800a363 	.word	0x0800a363
 800a258:	680b      	ldr	r3, [r1, #0]
 800a25a:	1d1a      	adds	r2, r3, #4
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	600a      	str	r2, [r1, #0]
 800a260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a268:	2301      	movs	r3, #1
 800a26a:	e0a3      	b.n	800a3b4 <_printf_i+0x1f4>
 800a26c:	6825      	ldr	r5, [r4, #0]
 800a26e:	6808      	ldr	r0, [r1, #0]
 800a270:	062e      	lsls	r6, r5, #24
 800a272:	f100 0304 	add.w	r3, r0, #4
 800a276:	d50a      	bpl.n	800a28e <_printf_i+0xce>
 800a278:	6805      	ldr	r5, [r0, #0]
 800a27a:	600b      	str	r3, [r1, #0]
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	da03      	bge.n	800a288 <_printf_i+0xc8>
 800a280:	232d      	movs	r3, #45	; 0x2d
 800a282:	426d      	negs	r5, r5
 800a284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a288:	485e      	ldr	r0, [pc, #376]	; (800a404 <_printf_i+0x244>)
 800a28a:	230a      	movs	r3, #10
 800a28c:	e019      	b.n	800a2c2 <_printf_i+0x102>
 800a28e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a292:	6805      	ldr	r5, [r0, #0]
 800a294:	600b      	str	r3, [r1, #0]
 800a296:	bf18      	it	ne
 800a298:	b22d      	sxthne	r5, r5
 800a29a:	e7ef      	b.n	800a27c <_printf_i+0xbc>
 800a29c:	680b      	ldr	r3, [r1, #0]
 800a29e:	6825      	ldr	r5, [r4, #0]
 800a2a0:	1d18      	adds	r0, r3, #4
 800a2a2:	6008      	str	r0, [r1, #0]
 800a2a4:	0628      	lsls	r0, r5, #24
 800a2a6:	d501      	bpl.n	800a2ac <_printf_i+0xec>
 800a2a8:	681d      	ldr	r5, [r3, #0]
 800a2aa:	e002      	b.n	800a2b2 <_printf_i+0xf2>
 800a2ac:	0669      	lsls	r1, r5, #25
 800a2ae:	d5fb      	bpl.n	800a2a8 <_printf_i+0xe8>
 800a2b0:	881d      	ldrh	r5, [r3, #0]
 800a2b2:	4854      	ldr	r0, [pc, #336]	; (800a404 <_printf_i+0x244>)
 800a2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2b6:	bf0c      	ite	eq
 800a2b8:	2308      	moveq	r3, #8
 800a2ba:	230a      	movne	r3, #10
 800a2bc:	2100      	movs	r1, #0
 800a2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2c2:	6866      	ldr	r6, [r4, #4]
 800a2c4:	60a6      	str	r6, [r4, #8]
 800a2c6:	2e00      	cmp	r6, #0
 800a2c8:	bfa2      	ittt	ge
 800a2ca:	6821      	ldrge	r1, [r4, #0]
 800a2cc:	f021 0104 	bicge.w	r1, r1, #4
 800a2d0:	6021      	strge	r1, [r4, #0]
 800a2d2:	b90d      	cbnz	r5, 800a2d8 <_printf_i+0x118>
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	d04d      	beq.n	800a374 <_printf_i+0x1b4>
 800a2d8:	4616      	mov	r6, r2
 800a2da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2de:	fb03 5711 	mls	r7, r3, r1, r5
 800a2e2:	5dc7      	ldrb	r7, [r0, r7]
 800a2e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2e8:	462f      	mov	r7, r5
 800a2ea:	42bb      	cmp	r3, r7
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	d9f4      	bls.n	800a2da <_printf_i+0x11a>
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d10b      	bne.n	800a30c <_printf_i+0x14c>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	07df      	lsls	r7, r3, #31
 800a2f8:	d508      	bpl.n	800a30c <_printf_i+0x14c>
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	6861      	ldr	r1, [r4, #4]
 800a2fe:	4299      	cmp	r1, r3
 800a300:	bfde      	ittt	le
 800a302:	2330      	movle	r3, #48	; 0x30
 800a304:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a30c:	1b92      	subs	r2, r2, r6
 800a30e:	6122      	str	r2, [r4, #16]
 800a310:	f8cd a000 	str.w	sl, [sp]
 800a314:	464b      	mov	r3, r9
 800a316:	aa03      	add	r2, sp, #12
 800a318:	4621      	mov	r1, r4
 800a31a:	4640      	mov	r0, r8
 800a31c:	f7ff fee2 	bl	800a0e4 <_printf_common>
 800a320:	3001      	adds	r0, #1
 800a322:	d14c      	bne.n	800a3be <_printf_i+0x1fe>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b004      	add	sp, #16
 800a32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32e:	4835      	ldr	r0, [pc, #212]	; (800a404 <_printf_i+0x244>)
 800a330:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	680e      	ldr	r6, [r1, #0]
 800a338:	061f      	lsls	r7, r3, #24
 800a33a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a33e:	600e      	str	r6, [r1, #0]
 800a340:	d514      	bpl.n	800a36c <_printf_i+0x1ac>
 800a342:	07d9      	lsls	r1, r3, #31
 800a344:	bf44      	itt	mi
 800a346:	f043 0320 	orrmi.w	r3, r3, #32
 800a34a:	6023      	strmi	r3, [r4, #0]
 800a34c:	b91d      	cbnz	r5, 800a356 <_printf_i+0x196>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f023 0320 	bic.w	r3, r3, #32
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	2310      	movs	r3, #16
 800a358:	e7b0      	b.n	800a2bc <_printf_i+0xfc>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	f043 0320 	orr.w	r3, r3, #32
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	2378      	movs	r3, #120	; 0x78
 800a364:	4828      	ldr	r0, [pc, #160]	; (800a408 <_printf_i+0x248>)
 800a366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a36a:	e7e3      	b.n	800a334 <_printf_i+0x174>
 800a36c:	065e      	lsls	r6, r3, #25
 800a36e:	bf48      	it	mi
 800a370:	b2ad      	uxthmi	r5, r5
 800a372:	e7e6      	b.n	800a342 <_printf_i+0x182>
 800a374:	4616      	mov	r6, r2
 800a376:	e7bb      	b.n	800a2f0 <_printf_i+0x130>
 800a378:	680b      	ldr	r3, [r1, #0]
 800a37a:	6826      	ldr	r6, [r4, #0]
 800a37c:	6960      	ldr	r0, [r4, #20]
 800a37e:	1d1d      	adds	r5, r3, #4
 800a380:	600d      	str	r5, [r1, #0]
 800a382:	0635      	lsls	r5, r6, #24
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	d501      	bpl.n	800a38c <_printf_i+0x1cc>
 800a388:	6018      	str	r0, [r3, #0]
 800a38a:	e002      	b.n	800a392 <_printf_i+0x1d2>
 800a38c:	0671      	lsls	r1, r6, #25
 800a38e:	d5fb      	bpl.n	800a388 <_printf_i+0x1c8>
 800a390:	8018      	strh	r0, [r3, #0]
 800a392:	2300      	movs	r3, #0
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	4616      	mov	r6, r2
 800a398:	e7ba      	b.n	800a310 <_printf_i+0x150>
 800a39a:	680b      	ldr	r3, [r1, #0]
 800a39c:	1d1a      	adds	r2, r3, #4
 800a39e:	600a      	str	r2, [r1, #0]
 800a3a0:	681e      	ldr	r6, [r3, #0]
 800a3a2:	6862      	ldr	r2, [r4, #4]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7f5 ff1a 	bl	80001e0 <memchr>
 800a3ac:	b108      	cbz	r0, 800a3b2 <_printf_i+0x1f2>
 800a3ae:	1b80      	subs	r0, r0, r6
 800a3b0:	6060      	str	r0, [r4, #4]
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	6123      	str	r3, [r4, #16]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3bc:	e7a8      	b.n	800a310 <_printf_i+0x150>
 800a3be:	6923      	ldr	r3, [r4, #16]
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	47d0      	blx	sl
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d0ab      	beq.n	800a324 <_printf_i+0x164>
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	079b      	lsls	r3, r3, #30
 800a3d0:	d413      	bmi.n	800a3fa <_printf_i+0x23a>
 800a3d2:	68e0      	ldr	r0, [r4, #12]
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	4298      	cmp	r0, r3
 800a3d8:	bfb8      	it	lt
 800a3da:	4618      	movlt	r0, r3
 800a3dc:	e7a4      	b.n	800a328 <_printf_i+0x168>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	47d0      	blx	sl
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d09b      	beq.n	800a324 <_printf_i+0x164>
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	68e3      	ldr	r3, [r4, #12]
 800a3f0:	9903      	ldr	r1, [sp, #12]
 800a3f2:	1a5b      	subs	r3, r3, r1
 800a3f4:	42ab      	cmp	r3, r5
 800a3f6:	dcf2      	bgt.n	800a3de <_printf_i+0x21e>
 800a3f8:	e7eb      	b.n	800a3d2 <_printf_i+0x212>
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	f104 0619 	add.w	r6, r4, #25
 800a400:	e7f5      	b.n	800a3ee <_printf_i+0x22e>
 800a402:	bf00      	nop
 800a404:	0800a76e 	.word	0x0800a76e
 800a408:	0800a77f 	.word	0x0800a77f

0800a40c <memmove>:
 800a40c:	4288      	cmp	r0, r1
 800a40e:	b510      	push	{r4, lr}
 800a410:	eb01 0402 	add.w	r4, r1, r2
 800a414:	d902      	bls.n	800a41c <memmove+0x10>
 800a416:	4284      	cmp	r4, r0
 800a418:	4623      	mov	r3, r4
 800a41a:	d807      	bhi.n	800a42c <memmove+0x20>
 800a41c:	1e43      	subs	r3, r0, #1
 800a41e:	42a1      	cmp	r1, r4
 800a420:	d008      	beq.n	800a434 <memmove+0x28>
 800a422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a42a:	e7f8      	b.n	800a41e <memmove+0x12>
 800a42c:	4402      	add	r2, r0
 800a42e:	4601      	mov	r1, r0
 800a430:	428a      	cmp	r2, r1
 800a432:	d100      	bne.n	800a436 <memmove+0x2a>
 800a434:	bd10      	pop	{r4, pc}
 800a436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a43e:	e7f7      	b.n	800a430 <memmove+0x24>

0800a440 <_realloc_r>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4607      	mov	r7, r0
 800a444:	4614      	mov	r4, r2
 800a446:	460e      	mov	r6, r1
 800a448:	b921      	cbnz	r1, 800a454 <_realloc_r+0x14>
 800a44a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a44e:	4611      	mov	r1, r2
 800a450:	f7ff bb0e 	b.w	8009a70 <_malloc_r>
 800a454:	b922      	cbnz	r2, 800a460 <_realloc_r+0x20>
 800a456:	f7ff fc99 	bl	8009d8c <_free_r>
 800a45a:	4625      	mov	r5, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	f000 f814 	bl	800a48c <_malloc_usable_size_r>
 800a464:	42a0      	cmp	r0, r4
 800a466:	d20f      	bcs.n	800a488 <_realloc_r+0x48>
 800a468:	4621      	mov	r1, r4
 800a46a:	4638      	mov	r0, r7
 800a46c:	f7ff fb00 	bl	8009a70 <_malloc_r>
 800a470:	4605      	mov	r5, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0f2      	beq.n	800a45c <_realloc_r+0x1c>
 800a476:	4631      	mov	r1, r6
 800a478:	4622      	mov	r2, r4
 800a47a:	f7ff fae3 	bl	8009a44 <memcpy>
 800a47e:	4631      	mov	r1, r6
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff fc83 	bl	8009d8c <_free_r>
 800a486:	e7e9      	b.n	800a45c <_realloc_r+0x1c>
 800a488:	4635      	mov	r5, r6
 800a48a:	e7e7      	b.n	800a45c <_realloc_r+0x1c>

0800a48c <_malloc_usable_size_r>:
 800a48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a490:	1f18      	subs	r0, r3, #4
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfbc      	itt	lt
 800a496:	580b      	ldrlt	r3, [r1, r0]
 800a498:	18c0      	addlt	r0, r0, r3
 800a49a:	4770      	bx	lr

0800a49c <_init>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_fini>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr
